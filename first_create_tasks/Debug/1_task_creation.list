
1_task_creation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004af8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004cc8  08004cc8  00014cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d38  08004d38  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08004d38  08004d38  00014d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d40  08004d40  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d40  08004d40  00014d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d44  08004d44  00014d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004be0  20000060  08004da8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c40  08004da8  00024c40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017503  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003333  00000000  00000000  000375d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001400  00000000  00000000  0003a910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f8f  00000000  00000000  0003bd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000369b  00000000  00000000  0003cc9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000159e9  00000000  00000000  0004033a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000899b5  00000000  00000000  00055d23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005748  00000000  00000000  000df6d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000e4e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004cb0 	.word	0x08004cb0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08004cb0 	.word	0x08004cb0

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
typedef uint32_t TaskProfiler;

TaskProfiler BlueTaskProfiler, RedTaskProfiler, GreenTaskProfiler;

int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af02      	add	r7, sp, #8

  HAL_Init();
 8000512:	f000 fa53 	bl	80009bc <HAL_Init>


  SystemClock_Config();
 8000516:	f000 f855 	bl	80005c4 <SystemClock_Config>


  MX_GPIO_Init();
 800051a:	f000 f8db 	bl	80006d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800051e:	f000 f8af 	bl	8000680 <MX_USART2_UART_Init>

  xTaskCreate(vBlueLedControllerTask,
 8000522:	2300      	movs	r3, #0
 8000524:	9301      	str	r3, [sp, #4]
 8000526:	2301      	movs	r3, #1
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	2300      	movs	r3, #0
 800052c:	2264      	movs	r2, #100	; 0x64
 800052e:	490d      	ldr	r1, [pc, #52]	; (8000564 <main+0x58>)
 8000530:	480d      	ldr	r0, [pc, #52]	; (8000568 <main+0x5c>)
 8000532:	f002 fcb4 	bl	8002e9e <xTaskCreate>
				100,
				NULL,
				1,
				NULL);

  xTaskCreate(vRedLedControllerTask,
 8000536:	2300      	movs	r3, #0
 8000538:	9301      	str	r3, [sp, #4]
 800053a:	2301      	movs	r3, #1
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	2300      	movs	r3, #0
 8000540:	2264      	movs	r2, #100	; 0x64
 8000542:	490a      	ldr	r1, [pc, #40]	; (800056c <main+0x60>)
 8000544:	480a      	ldr	r0, [pc, #40]	; (8000570 <main+0x64>)
 8000546:	f002 fcaa 	bl	8002e9e <xTaskCreate>
				100,
				NULL,
				1,
				NULL);

  xTaskCreate(vGreenLedControllerTask,
 800054a:	2300      	movs	r3, #0
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	2301      	movs	r3, #1
 8000550:	9300      	str	r3, [sp, #0]
 8000552:	2300      	movs	r3, #0
 8000554:	2264      	movs	r2, #100	; 0x64
 8000556:	4907      	ldr	r1, [pc, #28]	; (8000574 <main+0x68>)
 8000558:	4807      	ldr	r0, [pc, #28]	; (8000578 <main+0x6c>)
 800055a:	f002 fca0 	bl	8002e9e <xTaskCreate>
				100,
				NULL,
				1,
				NULL);

 vTaskStartScheduler();
 800055e:	f002 fdf9 	bl	8003154 <vTaskStartScheduler>

  while (1)
 8000562:	e7fe      	b.n	8000562 <main+0x56>
 8000564:	08004cc8 	.word	0x08004cc8
 8000568:	0800057d 	.word	0x0800057d
 800056c:	08004cdc 	.word	0x08004cdc
 8000570:	08000595 	.word	0x08000595
 8000574:	08004cf0 	.word	0x08004cf0
 8000578:	080005ad 	.word	0x080005ad

0800057c <vBlueLedControllerTask>:
  }

}

void vBlueLedControllerTask(void *pvParameters)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	while(1)
	{
		BlueTaskProfiler++;
 8000584:	4b02      	ldr	r3, [pc, #8]	; (8000590 <vBlueLedControllerTask+0x14>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	3301      	adds	r3, #1
 800058a:	4a01      	ldr	r2, [pc, #4]	; (8000590 <vBlueLedControllerTask+0x14>)
 800058c:	6013      	str	r3, [r2, #0]
 800058e:	e7f9      	b.n	8000584 <vBlueLedControllerTask+0x8>
 8000590:	200000c4 	.word	0x200000c4

08000594 <vRedLedControllerTask>:

	}
}

void vRedLedControllerTask(void *pvParameters)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		RedTaskProfiler++;
 800059c:	4b02      	ldr	r3, [pc, #8]	; (80005a8 <vRedLedControllerTask+0x14>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	3301      	adds	r3, #1
 80005a2:	4a01      	ldr	r2, [pc, #4]	; (80005a8 <vRedLedControllerTask+0x14>)
 80005a4:	6013      	str	r3, [r2, #0]
 80005a6:	e7f9      	b.n	800059c <vRedLedControllerTask+0x8>
 80005a8:	200000c8 	.word	0x200000c8

080005ac <vGreenLedControllerTask>:
	}
}


void vGreenLedControllerTask(void *pvParameters)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		GreenTaskProfiler++;
 80005b4:	4b02      	ldr	r3, [pc, #8]	; (80005c0 <vGreenLedControllerTask+0x14>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	3301      	adds	r3, #1
 80005ba:	4a01      	ldr	r2, [pc, #4]	; (80005c0 <vGreenLedControllerTask+0x14>)
 80005bc:	6013      	str	r3, [r2, #0]
 80005be:	e7f9      	b.n	80005b4 <vGreenLedControllerTask+0x8>
 80005c0:	200000cc 	.word	0x200000cc

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	; 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 031c 	add.w	r3, r7, #28
 80005ce:	2234      	movs	r2, #52	; 0x34
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f004 fa82 	bl	8004adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 0308 	add.w	r3, r7, #8
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	4b22      	ldr	r3, [pc, #136]	; (8000678 <SystemClock_Config+0xb4>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	4a21      	ldr	r2, [pc, #132]	; (8000678 <SystemClock_Config+0xb4>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	; 0x40
 80005f8:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <SystemClock_Config+0xb4>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000604:	2300      	movs	r3, #0
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	4b1c      	ldr	r3, [pc, #112]	; (800067c <SystemClock_Config+0xb8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a1b      	ldr	r2, [pc, #108]	; (800067c <SystemClock_Config+0xb8>)
 800060e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b19      	ldr	r3, [pc, #100]	; (800067c <SystemClock_Config+0xb8>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800061c:	603b      	str	r3, [r7, #0]
 800061e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000620:	2302      	movs	r3, #2
 8000622:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000624:	2301      	movs	r3, #1
 8000626:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000628:	2310      	movs	r3, #16
 800062a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800062c:	2300      	movs	r3, #0
 800062e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 031c 	add.w	r3, r7, #28
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fe6b 	bl	8001310 <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000640:	f000 f874 	bl	800072c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000658:	f107 0308 	add.w	r3, r7, #8
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f000 fc44 	bl	8000eec <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800066a:	f000 f85f 	bl	800072c <Error_Handler>
  }
}
 800066e:	bf00      	nop
 8000670:	3750      	adds	r7, #80	; 0x50
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800
 800067c:	40007000 	.word	0x40007000

08000680 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000684:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 8000686:	4a12      	ldr	r2, [pc, #72]	; (80006d0 <MX_USART2_UART_Init+0x50>)
 8000688:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 800068c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000690:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_USART2_UART_Init+0x4c>)
 80006b8:	f001 faec 	bl	8001c94 <HAL_UART_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006c2:	f000 f833 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	2000007c 	.word	0x2000007c
 80006d0:	40004400 	.word	0x40004400

080006d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_GPIO_Init+0x30>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a08      	ldr	r2, [pc, #32]	; (8000704 <MX_GPIO_Init+0x30>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_GPIO_Init+0x30>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800

08000708 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a04      	ldr	r2, [pc, #16]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d101      	bne.n	800071e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800071a:	f000 f971 	bl	8000a00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40010000 	.word	0x40010000

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000734:	e7fe      	b.n	8000734 <Error_Handler+0x8>
	...

08000738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <HAL_MspInit+0x54>)
 8000744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000746:	4a11      	ldr	r2, [pc, #68]	; (800078c <HAL_MspInit+0x54>)
 8000748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074c:	6453      	str	r3, [r2, #68]	; 0x44
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <HAL_MspInit+0x54>)
 8000750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <HAL_MspInit+0x54>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <HAL_MspInit+0x54>)
 8000764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000768:	6413      	str	r3, [r2, #64]	; 0x40
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <HAL_MspInit+0x54>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	210f      	movs	r1, #15
 800077a:	f06f 0001 	mvn.w	r0, #1
 800077e:	f000 fa17 	bl	8000bb0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800

08000790 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	; 0x28
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a19      	ldr	r2, [pc, #100]	; (8000814 <HAL_UART_MspInit+0x84>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d12b      	bne.n	800080a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	4b18      	ldr	r3, [pc, #96]	; (8000818 <HAL_UART_MspInit+0x88>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ba:	4a17      	ldr	r2, [pc, #92]	; (8000818 <HAL_UART_MspInit+0x88>)
 80007bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c0:	6413      	str	r3, [r2, #64]	; 0x40
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <HAL_UART_MspInit+0x88>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <HAL_UART_MspInit+0x88>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a10      	ldr	r2, [pc, #64]	; (8000818 <HAL_UART_MspInit+0x88>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <HAL_UART_MspInit+0x88>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007ea:	230c      	movs	r3, #12
 80007ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f6:	2303      	movs	r3, #3
 80007f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007fa:	2307      	movs	r3, #7
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	4619      	mov	r1, r3
 8000804:	4805      	ldr	r0, [pc, #20]	; (800081c <HAL_UART_MspInit+0x8c>)
 8000806:	f000 f9fd 	bl	8000c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800080a:	bf00      	nop
 800080c:	3728      	adds	r7, #40	; 0x28
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40004400 	.word	0x40004400
 8000818:	40023800 	.word	0x40023800
 800081c:	40020000 	.word	0x40020000

08000820 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08c      	sub	sp, #48	; 0x30
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000828:	2300      	movs	r3, #0
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800082c:	2300      	movs	r3, #0
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000830:	2300      	movs	r3, #0
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	4b2e      	ldr	r3, [pc, #184]	; (80008f0 <HAL_InitTick+0xd0>)
 8000836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000838:	4a2d      	ldr	r2, [pc, #180]	; (80008f0 <HAL_InitTick+0xd0>)
 800083a:	f043 0301 	orr.w	r3, r3, #1
 800083e:	6453      	str	r3, [r2, #68]	; 0x44
 8000840:	4b2b      	ldr	r3, [pc, #172]	; (80008f0 <HAL_InitTick+0xd0>)
 8000842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800084c:	f107 020c 	add.w	r2, r7, #12
 8000850:	f107 0310 	add.w	r3, r7, #16
 8000854:	4611      	mov	r1, r2
 8000856:	4618      	mov	r0, r3
 8000858:	f000 fd28 	bl	80012ac <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800085c:	f000 fd12 	bl	8001284 <HAL_RCC_GetPCLK2Freq>
 8000860:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000864:	4a23      	ldr	r2, [pc, #140]	; (80008f4 <HAL_InitTick+0xd4>)
 8000866:	fba2 2303 	umull	r2, r3, r2, r3
 800086a:	0c9b      	lsrs	r3, r3, #18
 800086c:	3b01      	subs	r3, #1
 800086e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000870:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <HAL_InitTick+0xd8>)
 8000872:	4a22      	ldr	r2, [pc, #136]	; (80008fc <HAL_InitTick+0xdc>)
 8000874:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000876:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <HAL_InitTick+0xd8>)
 8000878:	f240 32e7 	movw	r2, #999	; 0x3e7
 800087c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800087e:	4a1e      	ldr	r2, [pc, #120]	; (80008f8 <HAL_InitTick+0xd8>)
 8000880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000882:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000884:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <HAL_InitTick+0xd8>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088a:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <HAL_InitTick+0xd8>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000890:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <HAL_InitTick+0xd8>)
 8000892:	2200      	movs	r2, #0
 8000894:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000896:	4818      	ldr	r0, [pc, #96]	; (80008f8 <HAL_InitTick+0xd8>)
 8000898:	f000 ffbe 	bl	8001818 <HAL_TIM_Base_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80008a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d11b      	bne.n	80008e2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80008aa:	4813      	ldr	r0, [pc, #76]	; (80008f8 <HAL_InitTick+0xd8>)
 80008ac:	f001 f80e 	bl	80018cc <HAL_TIM_Base_Start_IT>
 80008b0:	4603      	mov	r3, r0
 80008b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80008b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d111      	bne.n	80008e2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80008be:	2019      	movs	r0, #25
 80008c0:	f000 f992 	bl	8000be8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2b0f      	cmp	r3, #15
 80008c8:	d808      	bhi.n	80008dc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80008ca:	2200      	movs	r2, #0
 80008cc:	6879      	ldr	r1, [r7, #4]
 80008ce:	2019      	movs	r0, #25
 80008d0:	f000 f96e 	bl	8000bb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008d4:	4a0a      	ldr	r2, [pc, #40]	; (8000900 <HAL_InitTick+0xe0>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6013      	str	r3, [r2, #0]
 80008da:	e002      	b.n	80008e2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80008dc:	2301      	movs	r3, #1
 80008de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80008e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3730      	adds	r7, #48	; 0x30
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800
 80008f4:	431bde83 	.word	0x431bde83
 80008f8:	200000d0 	.word	0x200000d0
 80008fc:	40010000 	.word	0x40010000
 8000900:	20000004 	.word	0x20000004

08000904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000908:	e7fe      	b.n	8000908 <NMI_Handler+0x4>

0800090a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <HardFault_Handler+0x4>

08000910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <MemManage_Handler+0x4>

08000916 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <BusFault_Handler+0x4>

0800091c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <UsageFault_Handler+0x4>

08000922 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000934:	4802      	ldr	r0, [pc, #8]	; (8000940 <TIM1_UP_IRQHandler+0x10>)
 8000936:	f001 f817 	bl	8001968 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200000d0 	.word	0x200000d0

08000944 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <SystemInit+0x20>)
 800094a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800094e:	4a05      	ldr	r2, [pc, #20]	; (8000964 <SystemInit+0x20>)
 8000950:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000954:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000968:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800096c:	f7ff ffea 	bl	8000944 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000970:	480c      	ldr	r0, [pc, #48]	; (80009a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000972:	490d      	ldr	r1, [pc, #52]	; (80009a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000974:	4a0d      	ldr	r2, [pc, #52]	; (80009ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000978:	e002      	b.n	8000980 <LoopCopyDataInit>

0800097a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800097a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800097c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800097e:	3304      	adds	r3, #4

08000980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000984:	d3f9      	bcc.n	800097a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000986:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000988:	4c0a      	ldr	r4, [pc, #40]	; (80009b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800098c:	e001      	b.n	8000992 <LoopFillZerobss>

0800098e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800098e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000990:	3204      	adds	r2, #4

08000992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000994:	d3fb      	bcc.n	800098e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000996:	f004 f8ff 	bl	8004b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800099a:	f7ff fdb7 	bl	800050c <main>
  bx  lr    
 800099e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80009a0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80009a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80009ac:	08004d48 	.word	0x08004d48
  ldr r2, =_sbss
 80009b0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80009b4:	20004c40 	.word	0x20004c40

080009b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009b8:	e7fe      	b.n	80009b8 <ADC_IRQHandler>
	...

080009bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009c0:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <HAL_Init+0x40>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a0d      	ldr	r2, [pc, #52]	; (80009fc <HAL_Init+0x40>)
 80009c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009cc:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <HAL_Init+0x40>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <HAL_Init+0x40>)
 80009d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d8:	4b08      	ldr	r3, [pc, #32]	; (80009fc <HAL_Init+0x40>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a07      	ldr	r2, [pc, #28]	; (80009fc <HAL_Init+0x40>)
 80009de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e4:	2003      	movs	r0, #3
 80009e6:	f000 f8d8 	bl	8000b9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ea:	200f      	movs	r0, #15
 80009ec:	f7ff ff18 	bl	8000820 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009f0:	f7ff fea2 	bl	8000738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f4:	2300      	movs	r3, #0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40023c00 	.word	0x40023c00

08000a00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_IncTick+0x20>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <HAL_IncTick+0x24>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4413      	add	r3, r2
 8000a10:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <HAL_IncTick+0x24>)
 8000a12:	6013      	str	r3, [r2, #0]
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	20000008 	.word	0x20000008
 8000a24:	20000118 	.word	0x20000118

08000a28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <HAL_GetTick+0x14>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	20000118 	.word	0x20000118

08000a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a72:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	60d3      	str	r3, [r2, #12]
}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a8c:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	0a1b      	lsrs	r3, r3, #8
 8000a92:	f003 0307 	and.w	r3, r3, #7
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	db0b      	blt.n	8000ace <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	f003 021f 	and.w	r2, r3, #31
 8000abc:	4907      	ldr	r1, [pc, #28]	; (8000adc <__NVIC_EnableIRQ+0x38>)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	095b      	lsrs	r3, r3, #5
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000e100 	.word	0xe000e100

08000ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	6039      	str	r1, [r7, #0]
 8000aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	db0a      	blt.n	8000b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	490c      	ldr	r1, [pc, #48]	; (8000b2c <__NVIC_SetPriority+0x4c>)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	0112      	lsls	r2, r2, #4
 8000b00:	b2d2      	uxtb	r2, r2
 8000b02:	440b      	add	r3, r1
 8000b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b08:	e00a      	b.n	8000b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4908      	ldr	r1, [pc, #32]	; (8000b30 <__NVIC_SetPriority+0x50>)
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	f003 030f 	and.w	r3, r3, #15
 8000b16:	3b04      	subs	r3, #4
 8000b18:	0112      	lsls	r2, r2, #4
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	440b      	add	r3, r1
 8000b1e:	761a      	strb	r2, [r3, #24]
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000e100 	.word	0xe000e100
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b089      	sub	sp, #36	; 0x24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	f1c3 0307 	rsb	r3, r3, #7
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	bf28      	it	cs
 8000b52:	2304      	movcs	r3, #4
 8000b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3304      	adds	r3, #4
 8000b5a:	2b06      	cmp	r3, #6
 8000b5c:	d902      	bls.n	8000b64 <NVIC_EncodePriority+0x30>
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3b03      	subs	r3, #3
 8000b62:	e000      	b.n	8000b66 <NVIC_EncodePriority+0x32>
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	43da      	mvns	r2, r3
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	401a      	ands	r2, r3
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	fa01 f303 	lsl.w	r3, r1, r3
 8000b86:	43d9      	mvns	r1, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	4313      	orrs	r3, r2
         );
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3724      	adds	r7, #36	; 0x24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff ff4c 	bl	8000a40 <__NVIC_SetPriorityGrouping>
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
 8000bbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bc2:	f7ff ff61 	bl	8000a88 <__NVIC_GetPriorityGrouping>
 8000bc6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	68b9      	ldr	r1, [r7, #8]
 8000bcc:	6978      	ldr	r0, [r7, #20]
 8000bce:	f7ff ffb1 	bl	8000b34 <NVIC_EncodePriority>
 8000bd2:	4602      	mov	r2, r0
 8000bd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff ff80 	bl	8000ae0 <__NVIC_SetPriority>
}
 8000be0:	bf00      	nop
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff ff54 	bl	8000aa4 <__NVIC_EnableIRQ>
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b089      	sub	sp, #36	; 0x24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
 8000c1e:	e14d      	b.n	8000ebc <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c20:	2201      	movs	r2, #1
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	697a      	ldr	r2, [r7, #20]
 8000c30:	4013      	ands	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	f040 813c 	bne.w	8000eb6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f003 0303 	and.w	r3, r3, #3
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d005      	beq.n	8000c56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d130      	bne.n	8000cb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	2203      	movs	r2, #3
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43db      	mvns	r3, r3
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	68da      	ldr	r2, [r3, #12]
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	69ba      	ldr	r2, [r7, #24]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	091b      	lsrs	r3, r3, #4
 8000ca2:	f003 0201 	and.w	r2, r3, #1
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f003 0303 	and.w	r3, r3, #3
 8000cc0:	2b03      	cmp	r3, #3
 8000cc2:	d017      	beq.n	8000cf4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	2203      	movs	r2, #3
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	689a      	ldr	r2, [r3, #8]
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f003 0303 	and.w	r3, r3, #3
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d123      	bne.n	8000d48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	08da      	lsrs	r2, r3, #3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3208      	adds	r2, #8
 8000d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	f003 0307 	and.w	r3, r3, #7
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	220f      	movs	r2, #15
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	4013      	ands	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	691a      	ldr	r2, [r3, #16]
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	08da      	lsrs	r2, r3, #3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	3208      	adds	r2, #8
 8000d42:	69b9      	ldr	r1, [r7, #24]
 8000d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	2203      	movs	r2, #3
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 0203 	and.w	r2, r3, #3
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	f000 8096 	beq.w	8000eb6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	4b51      	ldr	r3, [pc, #324]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	4a50      	ldr	r2, [pc, #320]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d98:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9a:	4b4e      	ldr	r3, [pc, #312]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000da6:	4a4c      	ldr	r2, [pc, #304]	; (8000ed8 <HAL_GPIO_Init+0x2d4>)
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	089b      	lsrs	r3, r3, #2
 8000dac:	3302      	adds	r3, #2
 8000dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	f003 0303 	and.w	r3, r3, #3
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	220f      	movs	r2, #15
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a43      	ldr	r2, [pc, #268]	; (8000edc <HAL_GPIO_Init+0x2d8>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d00d      	beq.n	8000dee <HAL_GPIO_Init+0x1ea>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a42      	ldr	r2, [pc, #264]	; (8000ee0 <HAL_GPIO_Init+0x2dc>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d007      	beq.n	8000dea <HAL_GPIO_Init+0x1e6>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a41      	ldr	r2, [pc, #260]	; (8000ee4 <HAL_GPIO_Init+0x2e0>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d101      	bne.n	8000de6 <HAL_GPIO_Init+0x1e2>
 8000de2:	2302      	movs	r3, #2
 8000de4:	e004      	b.n	8000df0 <HAL_GPIO_Init+0x1ec>
 8000de6:	2307      	movs	r3, #7
 8000de8:	e002      	b.n	8000df0 <HAL_GPIO_Init+0x1ec>
 8000dea:	2301      	movs	r3, #1
 8000dec:	e000      	b.n	8000df0 <HAL_GPIO_Init+0x1ec>
 8000dee:	2300      	movs	r3, #0
 8000df0:	69fa      	ldr	r2, [r7, #28]
 8000df2:	f002 0203 	and.w	r2, r2, #3
 8000df6:	0092      	lsls	r2, r2, #2
 8000df8:	4093      	lsls	r3, r2
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e00:	4935      	ldr	r1, [pc, #212]	; (8000ed8 <HAL_GPIO_Init+0x2d4>)
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	089b      	lsrs	r3, r3, #2
 8000e06:	3302      	adds	r3, #2
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e0e:	4b36      	ldr	r3, [pc, #216]	; (8000ee8 <HAL_GPIO_Init+0x2e4>)
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	43db      	mvns	r3, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e32:	4a2d      	ldr	r2, [pc, #180]	; (8000ee8 <HAL_GPIO_Init+0x2e4>)
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e38:	4b2b      	ldr	r3, [pc, #172]	; (8000ee8 <HAL_GPIO_Init+0x2e4>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d003      	beq.n	8000e5c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e5c:	4a22      	ldr	r2, [pc, #136]	; (8000ee8 <HAL_GPIO_Init+0x2e4>)
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e62:	4b21      	ldr	r3, [pc, #132]	; (8000ee8 <HAL_GPIO_Init+0x2e4>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e86:	4a18      	ldr	r2, [pc, #96]	; (8000ee8 <HAL_GPIO_Init+0x2e4>)
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e8c:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <HAL_GPIO_Init+0x2e4>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d003      	beq.n	8000eb0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ee8 <HAL_GPIO_Init+0x2e4>)
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	61fb      	str	r3, [r7, #28]
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	2b0f      	cmp	r3, #15
 8000ec0:	f67f aeae 	bls.w	8000c20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop
 8000ec8:	3724      	adds	r7, #36	; 0x24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40013800 	.word	0x40013800
 8000edc:	40020000 	.word	0x40020000
 8000ee0:	40020400 	.word	0x40020400
 8000ee4:	40020800 	.word	0x40020800
 8000ee8:	40013c00 	.word	0x40013c00

08000eec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d101      	bne.n	8000f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e0cc      	b.n	800109a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f00:	4b68      	ldr	r3, [pc, #416]	; (80010a4 <HAL_RCC_ClockConfig+0x1b8>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f003 0307 	and.w	r3, r3, #7
 8000f08:	683a      	ldr	r2, [r7, #0]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d90c      	bls.n	8000f28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f0e:	4b65      	ldr	r3, [pc, #404]	; (80010a4 <HAL_RCC_ClockConfig+0x1b8>)
 8000f10:	683a      	ldr	r2, [r7, #0]
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f16:	4b63      	ldr	r3, [pc, #396]	; (80010a4 <HAL_RCC_ClockConfig+0x1b8>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	683a      	ldr	r2, [r7, #0]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d001      	beq.n	8000f28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e0b8      	b.n	800109a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d020      	beq.n	8000f76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 0304 	and.w	r3, r3, #4
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d005      	beq.n	8000f4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f40:	4b59      	ldr	r3, [pc, #356]	; (80010a8 <HAL_RCC_ClockConfig+0x1bc>)
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	4a58      	ldr	r2, [pc, #352]	; (80010a8 <HAL_RCC_ClockConfig+0x1bc>)
 8000f46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000f4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 0308 	and.w	r3, r3, #8
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d005      	beq.n	8000f64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f58:	4b53      	ldr	r3, [pc, #332]	; (80010a8 <HAL_RCC_ClockConfig+0x1bc>)
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	4a52      	ldr	r2, [pc, #328]	; (80010a8 <HAL_RCC_ClockConfig+0x1bc>)
 8000f5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000f62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f64:	4b50      	ldr	r3, [pc, #320]	; (80010a8 <HAL_RCC_ClockConfig+0x1bc>)
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	494d      	ldr	r1, [pc, #308]	; (80010a8 <HAL_RCC_ClockConfig+0x1bc>)
 8000f72:	4313      	orrs	r3, r2
 8000f74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d044      	beq.n	800100c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d107      	bne.n	8000f9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f8a:	4b47      	ldr	r3, [pc, #284]	; (80010a8 <HAL_RCC_ClockConfig+0x1bc>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d119      	bne.n	8000fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e07f      	b.n	800109a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d003      	beq.n	8000faa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fa6:	2b03      	cmp	r3, #3
 8000fa8:	d107      	bne.n	8000fba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000faa:	4b3f      	ldr	r3, [pc, #252]	; (80010a8 <HAL_RCC_ClockConfig+0x1bc>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d109      	bne.n	8000fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e06f      	b.n	800109a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fba:	4b3b      	ldr	r3, [pc, #236]	; (80010a8 <HAL_RCC_ClockConfig+0x1bc>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e067      	b.n	800109a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fca:	4b37      	ldr	r3, [pc, #220]	; (80010a8 <HAL_RCC_ClockConfig+0x1bc>)
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f023 0203 	bic.w	r2, r3, #3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	4934      	ldr	r1, [pc, #208]	; (80010a8 <HAL_RCC_ClockConfig+0x1bc>)
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000fdc:	f7ff fd24 	bl	8000a28 <HAL_GetTick>
 8000fe0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fe2:	e00a      	b.n	8000ffa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fe4:	f7ff fd20 	bl	8000a28 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d901      	bls.n	8000ffa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e04f      	b.n	800109a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ffa:	4b2b      	ldr	r3, [pc, #172]	; (80010a8 <HAL_RCC_ClockConfig+0x1bc>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f003 020c 	and.w	r2, r3, #12
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	429a      	cmp	r2, r3
 800100a:	d1eb      	bne.n	8000fe4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800100c:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <HAL_RCC_ClockConfig+0x1b8>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	683a      	ldr	r2, [r7, #0]
 8001016:	429a      	cmp	r2, r3
 8001018:	d20c      	bcs.n	8001034 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800101a:	4b22      	ldr	r3, [pc, #136]	; (80010a4 <HAL_RCC_ClockConfig+0x1b8>)
 800101c:	683a      	ldr	r2, [r7, #0]
 800101e:	b2d2      	uxtb	r2, r2
 8001020:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001022:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	429a      	cmp	r2, r3
 800102e:	d001      	beq.n	8001034 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e032      	b.n	800109a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0304 	and.w	r3, r3, #4
 800103c:	2b00      	cmp	r3, #0
 800103e:	d008      	beq.n	8001052 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001040:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	4916      	ldr	r1, [pc, #88]	; (80010a8 <HAL_RCC_ClockConfig+0x1bc>)
 800104e:	4313      	orrs	r3, r2
 8001050:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0308 	and.w	r3, r3, #8
 800105a:	2b00      	cmp	r3, #0
 800105c:	d009      	beq.n	8001072 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800105e:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	691b      	ldr	r3, [r3, #16]
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	490e      	ldr	r1, [pc, #56]	; (80010a8 <HAL_RCC_ClockConfig+0x1bc>)
 800106e:	4313      	orrs	r3, r2
 8001070:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001072:	f000 f821 	bl	80010b8 <HAL_RCC_GetSysClockFreq>
 8001076:	4602      	mov	r2, r0
 8001078:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <HAL_RCC_ClockConfig+0x1bc>)
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	091b      	lsrs	r3, r3, #4
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	490a      	ldr	r1, [pc, #40]	; (80010ac <HAL_RCC_ClockConfig+0x1c0>)
 8001084:	5ccb      	ldrb	r3, [r1, r3]
 8001086:	fa22 f303 	lsr.w	r3, r2, r3
 800108a:	4a09      	ldr	r2, [pc, #36]	; (80010b0 <HAL_RCC_ClockConfig+0x1c4>)
 800108c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fbc4 	bl	8000820 <HAL_InitTick>

  return HAL_OK;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023c00 	.word	0x40023c00
 80010a8:	40023800 	.word	0x40023800
 80010ac:	08004d20 	.word	0x08004d20
 80010b0:	20000000 	.word	0x20000000
 80010b4:	20000004 	.word	0x20000004

080010b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010bc:	b090      	sub	sp, #64	; 0x40
 80010be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80010c0:	2300      	movs	r3, #0
 80010c2:	637b      	str	r3, [r7, #52]	; 0x34
 80010c4:	2300      	movs	r3, #0
 80010c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010c8:	2300      	movs	r3, #0
 80010ca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80010d0:	4b59      	ldr	r3, [pc, #356]	; (8001238 <HAL_RCC_GetSysClockFreq+0x180>)
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f003 030c 	and.w	r3, r3, #12
 80010d8:	2b08      	cmp	r3, #8
 80010da:	d00d      	beq.n	80010f8 <HAL_RCC_GetSysClockFreq+0x40>
 80010dc:	2b08      	cmp	r3, #8
 80010de:	f200 80a1 	bhi.w	8001224 <HAL_RCC_GetSysClockFreq+0x16c>
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d002      	beq.n	80010ec <HAL_RCC_GetSysClockFreq+0x34>
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	d003      	beq.n	80010f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80010ea:	e09b      	b.n	8001224 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80010ec:	4b53      	ldr	r3, [pc, #332]	; (800123c <HAL_RCC_GetSysClockFreq+0x184>)
 80010ee:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80010f0:	e09b      	b.n	800122a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80010f2:	4b53      	ldr	r3, [pc, #332]	; (8001240 <HAL_RCC_GetSysClockFreq+0x188>)
 80010f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80010f6:	e098      	b.n	800122a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010f8:	4b4f      	ldr	r3, [pc, #316]	; (8001238 <HAL_RCC_GetSysClockFreq+0x180>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001100:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001102:	4b4d      	ldr	r3, [pc, #308]	; (8001238 <HAL_RCC_GetSysClockFreq+0x180>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d028      	beq.n	8001160 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800110e:	4b4a      	ldr	r3, [pc, #296]	; (8001238 <HAL_RCC_GetSysClockFreq+0x180>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	099b      	lsrs	r3, r3, #6
 8001114:	2200      	movs	r2, #0
 8001116:	623b      	str	r3, [r7, #32]
 8001118:	627a      	str	r2, [r7, #36]	; 0x24
 800111a:	6a3b      	ldr	r3, [r7, #32]
 800111c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001120:	2100      	movs	r1, #0
 8001122:	4b47      	ldr	r3, [pc, #284]	; (8001240 <HAL_RCC_GetSysClockFreq+0x188>)
 8001124:	fb03 f201 	mul.w	r2, r3, r1
 8001128:	2300      	movs	r3, #0
 800112a:	fb00 f303 	mul.w	r3, r0, r3
 800112e:	4413      	add	r3, r2
 8001130:	4a43      	ldr	r2, [pc, #268]	; (8001240 <HAL_RCC_GetSysClockFreq+0x188>)
 8001132:	fba0 1202 	umull	r1, r2, r0, r2
 8001136:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001138:	460a      	mov	r2, r1
 800113a:	62ba      	str	r2, [r7, #40]	; 0x28
 800113c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800113e:	4413      	add	r3, r2
 8001140:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001144:	2200      	movs	r2, #0
 8001146:	61bb      	str	r3, [r7, #24]
 8001148:	61fa      	str	r2, [r7, #28]
 800114a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800114e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001152:	f7ff f85d 	bl	8000210 <__aeabi_uldivmod>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4613      	mov	r3, r2
 800115c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800115e:	e053      	b.n	8001208 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001160:	4b35      	ldr	r3, [pc, #212]	; (8001238 <HAL_RCC_GetSysClockFreq+0x180>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	099b      	lsrs	r3, r3, #6
 8001166:	2200      	movs	r2, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	617a      	str	r2, [r7, #20]
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001172:	f04f 0b00 	mov.w	fp, #0
 8001176:	4652      	mov	r2, sl
 8001178:	465b      	mov	r3, fp
 800117a:	f04f 0000 	mov.w	r0, #0
 800117e:	f04f 0100 	mov.w	r1, #0
 8001182:	0159      	lsls	r1, r3, #5
 8001184:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001188:	0150      	lsls	r0, r2, #5
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	ebb2 080a 	subs.w	r8, r2, sl
 8001192:	eb63 090b 	sbc.w	r9, r3, fp
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	f04f 0300 	mov.w	r3, #0
 800119e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80011a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80011a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80011aa:	ebb2 0408 	subs.w	r4, r2, r8
 80011ae:	eb63 0509 	sbc.w	r5, r3, r9
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	f04f 0300 	mov.w	r3, #0
 80011ba:	00eb      	lsls	r3, r5, #3
 80011bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80011c0:	00e2      	lsls	r2, r4, #3
 80011c2:	4614      	mov	r4, r2
 80011c4:	461d      	mov	r5, r3
 80011c6:	eb14 030a 	adds.w	r3, r4, sl
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	eb45 030b 	adc.w	r3, r5, fp
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	f04f 0300 	mov.w	r3, #0
 80011da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80011de:	4629      	mov	r1, r5
 80011e0:	028b      	lsls	r3, r1, #10
 80011e2:	4621      	mov	r1, r4
 80011e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80011e8:	4621      	mov	r1, r4
 80011ea:	028a      	lsls	r2, r1, #10
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011f2:	2200      	movs	r2, #0
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	60fa      	str	r2, [r7, #12]
 80011f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011fc:	f7ff f808 	bl	8000210 <__aeabi_uldivmod>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4613      	mov	r3, r2
 8001206:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001208:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <HAL_RCC_GetSysClockFreq+0x180>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	0c1b      	lsrs	r3, r3, #16
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	3301      	adds	r3, #1
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001218:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800121a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800121c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001220:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001222:	e002      	b.n	800122a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <HAL_RCC_GetSysClockFreq+0x184>)
 8001226:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001228:	bf00      	nop
    }
  }
  return sysclockfreq;
 800122a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800122c:	4618      	mov	r0, r3
 800122e:	3740      	adds	r7, #64	; 0x40
 8001230:	46bd      	mov	sp, r7
 8001232:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800
 800123c:	00f42400 	.word	0x00f42400
 8001240:	017d7840 	.word	0x017d7840

08001244 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001248:	4b03      	ldr	r3, [pc, #12]	; (8001258 <HAL_RCC_GetHCLKFreq+0x14>)
 800124a:	681b      	ldr	r3, [r3, #0]
}
 800124c:	4618      	mov	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	20000000 	.word	0x20000000

0800125c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001260:	f7ff fff0 	bl	8001244 <HAL_RCC_GetHCLKFreq>
 8001264:	4602      	mov	r2, r0
 8001266:	4b05      	ldr	r3, [pc, #20]	; (800127c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	0a9b      	lsrs	r3, r3, #10
 800126c:	f003 0307 	and.w	r3, r3, #7
 8001270:	4903      	ldr	r1, [pc, #12]	; (8001280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001272:	5ccb      	ldrb	r3, [r1, r3]
 8001274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001278:	4618      	mov	r0, r3
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40023800 	.word	0x40023800
 8001280:	08004d30 	.word	0x08004d30

08001284 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001288:	f7ff ffdc 	bl	8001244 <HAL_RCC_GetHCLKFreq>
 800128c:	4602      	mov	r2, r0
 800128e:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	0b5b      	lsrs	r3, r3, #13
 8001294:	f003 0307 	and.w	r3, r3, #7
 8001298:	4903      	ldr	r1, [pc, #12]	; (80012a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800129a:	5ccb      	ldrb	r3, [r1, r3]
 800129c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40023800 	.word	0x40023800
 80012a8:	08004d30 	.word	0x08004d30

080012ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	220f      	movs	r2, #15
 80012ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_RCC_GetClockConfig+0x5c>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f003 0203 	and.w	r2, r3, #3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <HAL_RCC_GetClockConfig+0x5c>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <HAL_RCC_GetClockConfig+0x5c>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <HAL_RCC_GetClockConfig+0x5c>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	08db      	lsrs	r3, r3, #3
 80012e6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80012ee:	4b07      	ldr	r3, [pc, #28]	; (800130c <HAL_RCC_GetClockConfig+0x60>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0207 	and.w	r2, r3, #7
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	601a      	str	r2, [r3, #0]
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800
 800130c:	40023c00 	.word	0x40023c00

08001310 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e273      	b.n	800180a <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	2b00      	cmp	r3, #0
 800132c:	d075      	beq.n	800141a <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800132e:	4b88      	ldr	r3, [pc, #544]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 030c 	and.w	r3, r3, #12
 8001336:	2b04      	cmp	r3, #4
 8001338:	d00c      	beq.n	8001354 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800133a:	4b85      	ldr	r3, [pc, #532]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001342:	2b08      	cmp	r3, #8
 8001344:	d112      	bne.n	800136c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001346:	4b82      	ldr	r3, [pc, #520]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800134e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001352:	d10b      	bne.n	800136c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001354:	4b7e      	ldr	r3, [pc, #504]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d05b      	beq.n	8001418 <HAL_RCC_OscConfig+0x108>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d157      	bne.n	8001418 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e24e      	b.n	800180a <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001374:	d106      	bne.n	8001384 <HAL_RCC_OscConfig+0x74>
 8001376:	4b76      	ldr	r3, [pc, #472]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a75      	ldr	r2, [pc, #468]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 800137c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	e01d      	b.n	80013c0 <HAL_RCC_OscConfig+0xb0>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800138c:	d10c      	bne.n	80013a8 <HAL_RCC_OscConfig+0x98>
 800138e:	4b70      	ldr	r3, [pc, #448]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a6f      	ldr	r2, [pc, #444]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 8001394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	4b6d      	ldr	r3, [pc, #436]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a6c      	ldr	r2, [pc, #432]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 80013a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	e00b      	b.n	80013c0 <HAL_RCC_OscConfig+0xb0>
 80013a8:	4b69      	ldr	r3, [pc, #420]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a68      	ldr	r2, [pc, #416]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 80013ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013b2:	6013      	str	r3, [r2, #0]
 80013b4:	4b66      	ldr	r3, [pc, #408]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a65      	ldr	r2, [pc, #404]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 80013ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d013      	beq.n	80013f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c8:	f7ff fb2e 	bl	8000a28 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d0:	f7ff fb2a 	bl	8000a28 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b64      	cmp	r3, #100	; 0x64
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e213      	b.n	800180a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e2:	4b5b      	ldr	r3, [pc, #364]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0f0      	beq.n	80013d0 <HAL_RCC_OscConfig+0xc0>
 80013ee:	e014      	b.n	800141a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f0:	f7ff fb1a 	bl	8000a28 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013f8:	f7ff fb16 	bl	8000a28 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b64      	cmp	r3, #100	; 0x64
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e1ff      	b.n	800180a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800140a:	4b51      	ldr	r3, [pc, #324]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f0      	bne.n	80013f8 <HAL_RCC_OscConfig+0xe8>
 8001416:	e000      	b.n	800141a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d063      	beq.n	80014ee <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001426:	4b4a      	ldr	r3, [pc, #296]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f003 030c 	and.w	r3, r3, #12
 800142e:	2b00      	cmp	r3, #0
 8001430:	d00b      	beq.n	800144a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001432:	4b47      	ldr	r3, [pc, #284]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800143a:	2b08      	cmp	r3, #8
 800143c:	d11c      	bne.n	8001478 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800143e:	4b44      	ldr	r3, [pc, #272]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d116      	bne.n	8001478 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800144a:	4b41      	ldr	r3, [pc, #260]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d005      	beq.n	8001462 <HAL_RCC_OscConfig+0x152>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d001      	beq.n	8001462 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e1d3      	b.n	800180a <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001462:	4b3b      	ldr	r3, [pc, #236]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	691b      	ldr	r3, [r3, #16]
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	4937      	ldr	r1, [pc, #220]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 8001472:	4313      	orrs	r3, r2
 8001474:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001476:	e03a      	b.n	80014ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d020      	beq.n	80014c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001480:	4b34      	ldr	r3, [pc, #208]	; (8001554 <HAL_RCC_OscConfig+0x244>)
 8001482:	2201      	movs	r2, #1
 8001484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001486:	f7ff facf 	bl	8000a28 <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800148e:	f7ff facb 	bl	8000a28 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e1b4      	b.n	800180a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a0:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0f0      	beq.n	800148e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ac:	4b28      	ldr	r3, [pc, #160]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	4925      	ldr	r1, [pc, #148]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	600b      	str	r3, [r1, #0]
 80014c0:	e015      	b.n	80014ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014c2:	4b24      	ldr	r3, [pc, #144]	; (8001554 <HAL_RCC_OscConfig+0x244>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c8:	f7ff faae 	bl	8000a28 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014d0:	f7ff faaa 	bl	8000a28 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e193      	b.n	800180a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e2:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f0      	bne.n	80014d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d036      	beq.n	8001568 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d016      	beq.n	8001530 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <HAL_RCC_OscConfig+0x248>)
 8001504:	2201      	movs	r2, #1
 8001506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001508:	f7ff fa8e 	bl	8000a28 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001510:	f7ff fa8a 	bl	8000a28 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e173      	b.n	800180a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 8001524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f0      	beq.n	8001510 <HAL_RCC_OscConfig+0x200>
 800152e:	e01b      	b.n	8001568 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001530:	4b09      	ldr	r3, [pc, #36]	; (8001558 <HAL_RCC_OscConfig+0x248>)
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001536:	f7ff fa77 	bl	8000a28 <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800153c:	e00e      	b.n	800155c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800153e:	f7ff fa73 	bl	8000a28 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d907      	bls.n	800155c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e15c      	b.n	800180a <HAL_RCC_OscConfig+0x4fa>
 8001550:	40023800 	.word	0x40023800
 8001554:	42470000 	.word	0x42470000
 8001558:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800155c:	4b8a      	ldr	r3, [pc, #552]	; (8001788 <HAL_RCC_OscConfig+0x478>)
 800155e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1ea      	bne.n	800153e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 8097 	beq.w	80016a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001576:	2300      	movs	r3, #0
 8001578:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800157a:	4b83      	ldr	r3, [pc, #524]	; (8001788 <HAL_RCC_OscConfig+0x478>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10f      	bne.n	80015a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	4b7f      	ldr	r3, [pc, #508]	; (8001788 <HAL_RCC_OscConfig+0x478>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	4a7e      	ldr	r2, [pc, #504]	; (8001788 <HAL_RCC_OscConfig+0x478>)
 8001590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001594:	6413      	str	r3, [r2, #64]	; 0x40
 8001596:	4b7c      	ldr	r3, [pc, #496]	; (8001788 <HAL_RCC_OscConfig+0x478>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015a2:	2301      	movs	r3, #1
 80015a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a6:	4b79      	ldr	r3, [pc, #484]	; (800178c <HAL_RCC_OscConfig+0x47c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d118      	bne.n	80015e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015b2:	4b76      	ldr	r3, [pc, #472]	; (800178c <HAL_RCC_OscConfig+0x47c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a75      	ldr	r2, [pc, #468]	; (800178c <HAL_RCC_OscConfig+0x47c>)
 80015b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015be:	f7ff fa33 	bl	8000a28 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015c6:	f7ff fa2f 	bl	8000a28 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e118      	b.n	800180a <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d8:	4b6c      	ldr	r3, [pc, #432]	; (800178c <HAL_RCC_OscConfig+0x47c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0f0      	beq.n	80015c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d106      	bne.n	80015fa <HAL_RCC_OscConfig+0x2ea>
 80015ec:	4b66      	ldr	r3, [pc, #408]	; (8001788 <HAL_RCC_OscConfig+0x478>)
 80015ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f0:	4a65      	ldr	r2, [pc, #404]	; (8001788 <HAL_RCC_OscConfig+0x478>)
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	6713      	str	r3, [r2, #112]	; 0x70
 80015f8:	e01c      	b.n	8001634 <HAL_RCC_OscConfig+0x324>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	2b05      	cmp	r3, #5
 8001600:	d10c      	bne.n	800161c <HAL_RCC_OscConfig+0x30c>
 8001602:	4b61      	ldr	r3, [pc, #388]	; (8001788 <HAL_RCC_OscConfig+0x478>)
 8001604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001606:	4a60      	ldr	r2, [pc, #384]	; (8001788 <HAL_RCC_OscConfig+0x478>)
 8001608:	f043 0304 	orr.w	r3, r3, #4
 800160c:	6713      	str	r3, [r2, #112]	; 0x70
 800160e:	4b5e      	ldr	r3, [pc, #376]	; (8001788 <HAL_RCC_OscConfig+0x478>)
 8001610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001612:	4a5d      	ldr	r2, [pc, #372]	; (8001788 <HAL_RCC_OscConfig+0x478>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6713      	str	r3, [r2, #112]	; 0x70
 800161a:	e00b      	b.n	8001634 <HAL_RCC_OscConfig+0x324>
 800161c:	4b5a      	ldr	r3, [pc, #360]	; (8001788 <HAL_RCC_OscConfig+0x478>)
 800161e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001620:	4a59      	ldr	r2, [pc, #356]	; (8001788 <HAL_RCC_OscConfig+0x478>)
 8001622:	f023 0301 	bic.w	r3, r3, #1
 8001626:	6713      	str	r3, [r2, #112]	; 0x70
 8001628:	4b57      	ldr	r3, [pc, #348]	; (8001788 <HAL_RCC_OscConfig+0x478>)
 800162a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162c:	4a56      	ldr	r2, [pc, #344]	; (8001788 <HAL_RCC_OscConfig+0x478>)
 800162e:	f023 0304 	bic.w	r3, r3, #4
 8001632:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d015      	beq.n	8001668 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800163c:	f7ff f9f4 	bl	8000a28 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001642:	e00a      	b.n	800165a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001644:	f7ff f9f0 	bl	8000a28 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001652:	4293      	cmp	r3, r2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e0d7      	b.n	800180a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800165a:	4b4b      	ldr	r3, [pc, #300]	; (8001788 <HAL_RCC_OscConfig+0x478>)
 800165c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0ee      	beq.n	8001644 <HAL_RCC_OscConfig+0x334>
 8001666:	e014      	b.n	8001692 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001668:	f7ff f9de 	bl	8000a28 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800166e:	e00a      	b.n	8001686 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001670:	f7ff f9da 	bl	8000a28 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	f241 3288 	movw	r2, #5000	; 0x1388
 800167e:	4293      	cmp	r3, r2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e0c1      	b.n	800180a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001686:	4b40      	ldr	r3, [pc, #256]	; (8001788 <HAL_RCC_OscConfig+0x478>)
 8001688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1ee      	bne.n	8001670 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001692:	7dfb      	ldrb	r3, [r7, #23]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d105      	bne.n	80016a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001698:	4b3b      	ldr	r3, [pc, #236]	; (8001788 <HAL_RCC_OscConfig+0x478>)
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	4a3a      	ldr	r2, [pc, #232]	; (8001788 <HAL_RCC_OscConfig+0x478>)
 800169e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f000 80ad 	beq.w	8001808 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016ae:	4b36      	ldr	r3, [pc, #216]	; (8001788 <HAL_RCC_OscConfig+0x478>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 030c 	and.w	r3, r3, #12
 80016b6:	2b08      	cmp	r3, #8
 80016b8:	d060      	beq.n	800177c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d145      	bne.n	800174e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c2:	4b33      	ldr	r3, [pc, #204]	; (8001790 <HAL_RCC_OscConfig+0x480>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c8:	f7ff f9ae 	bl	8000a28 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d0:	f7ff f9aa 	bl	8000a28 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e093      	b.n	800180a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e2:	4b29      	ldr	r3, [pc, #164]	; (8001788 <HAL_RCC_OscConfig+0x478>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1f0      	bne.n	80016d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69da      	ldr	r2, [r3, #28]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	431a      	orrs	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fc:	019b      	lsls	r3, r3, #6
 80016fe:	431a      	orrs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001704:	085b      	lsrs	r3, r3, #1
 8001706:	3b01      	subs	r3, #1
 8001708:	041b      	lsls	r3, r3, #16
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001710:	061b      	lsls	r3, r3, #24
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001718:	071b      	lsls	r3, r3, #28
 800171a:	491b      	ldr	r1, [pc, #108]	; (8001788 <HAL_RCC_OscConfig+0x478>)
 800171c:	4313      	orrs	r3, r2
 800171e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001720:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <HAL_RCC_OscConfig+0x480>)
 8001722:	2201      	movs	r2, #1
 8001724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001726:	f7ff f97f 	bl	8000a28 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800172e:	f7ff f97b 	bl	8000a28 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e064      	b.n	800180a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001740:	4b11      	ldr	r3, [pc, #68]	; (8001788 <HAL_RCC_OscConfig+0x478>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0f0      	beq.n	800172e <HAL_RCC_OscConfig+0x41e>
 800174c:	e05c      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <HAL_RCC_OscConfig+0x480>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001754:	f7ff f968 	bl	8000a28 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800175c:	f7ff f964 	bl	8000a28 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e04d      	b.n	800180a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176e:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_RCC_OscConfig+0x478>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x44c>
 800177a:	e045      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d107      	bne.n	8001794 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e040      	b.n	800180a <HAL_RCC_OscConfig+0x4fa>
 8001788:	40023800 	.word	0x40023800
 800178c:	40007000 	.word	0x40007000
 8001790:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001794:	4b1f      	ldr	r3, [pc, #124]	; (8001814 <HAL_RCC_OscConfig+0x504>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d030      	beq.n	8001804 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d129      	bne.n	8001804 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d122      	bne.n	8001804 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017c4:	4013      	ands	r3, r2
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d119      	bne.n	8001804 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017da:	085b      	lsrs	r3, r3, #1
 80017dc:	3b01      	subs	r3, #1
 80017de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d10f      	bne.n	8001804 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d107      	bne.n	8001804 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001800:	429a      	cmp	r2, r3
 8001802:	d001      	beq.n	8001808 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e000      	b.n	800180a <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800

08001818 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e041      	b.n	80018ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d106      	bne.n	8001844 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f839 	bl	80018b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2202      	movs	r2, #2
 8001848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3304      	adds	r3, #4
 8001854:	4619      	mov	r1, r3
 8001856:	4610      	mov	r0, r2
 8001858:	f000 f99e 	bl	8001b98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d001      	beq.n	80018e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e035      	b.n	8001950 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2202      	movs	r2, #2
 80018e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	68da      	ldr	r2, [r3, #12]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0201 	orr.w	r2, r2, #1
 80018fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a16      	ldr	r2, [pc, #88]	; (800195c <HAL_TIM_Base_Start_IT+0x90>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d009      	beq.n	800191a <HAL_TIM_Base_Start_IT+0x4e>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a15      	ldr	r2, [pc, #84]	; (8001960 <HAL_TIM_Base_Start_IT+0x94>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d004      	beq.n	800191a <HAL_TIM_Base_Start_IT+0x4e>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a13      	ldr	r2, [pc, #76]	; (8001964 <HAL_TIM_Base_Start_IT+0x98>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d111      	bne.n	800193e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2b06      	cmp	r3, #6
 800192a:	d010      	beq.n	800194e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f042 0201 	orr.w	r2, r2, #1
 800193a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800193c:	e007      	b.n	800194e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f042 0201 	orr.w	r2, r2, #1
 800194c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	40010000 	.word	0x40010000
 8001960:	40000c00 	.word	0x40000c00
 8001964:	40014000 	.word	0x40014000

08001968 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d020      	beq.n	80019cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d01b      	beq.n	80019cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f06f 0202 	mvn.w	r2, #2
 800199c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2201      	movs	r2, #1
 80019a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	f003 0303 	and.w	r3, r3, #3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 f8d2 	bl	8001b5c <HAL_TIM_IC_CaptureCallback>
 80019b8:	e005      	b.n	80019c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 f8c4 	bl	8001b48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 f8d5 	bl	8001b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d020      	beq.n	8001a18 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d01b      	beq.n	8001a18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f06f 0204 	mvn.w	r2, #4
 80019e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2202      	movs	r2, #2
 80019ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f8ac 	bl	8001b5c <HAL_TIM_IC_CaptureCallback>
 8001a04:	e005      	b.n	8001a12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f89e 	bl	8001b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 f8af 	bl	8001b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d020      	beq.n	8001a64 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f003 0308 	and.w	r3, r3, #8
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d01b      	beq.n	8001a64 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f06f 0208 	mvn.w	r2, #8
 8001a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2204      	movs	r2, #4
 8001a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f886 	bl	8001b5c <HAL_TIM_IC_CaptureCallback>
 8001a50:	e005      	b.n	8001a5e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 f878 	bl	8001b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 f889 	bl	8001b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	f003 0310 	and.w	r3, r3, #16
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d020      	beq.n	8001ab0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f003 0310 	and.w	r3, r3, #16
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d01b      	beq.n	8001ab0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f06f 0210 	mvn.w	r2, #16
 8001a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2208      	movs	r2, #8
 8001a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f860 	bl	8001b5c <HAL_TIM_IC_CaptureCallback>
 8001a9c:	e005      	b.n	8001aaa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f852 	bl	8001b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f863 	bl	8001b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00c      	beq.n	8001ad4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d007      	beq.n	8001ad4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f06f 0201 	mvn.w	r2, #1
 8001acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7fe fe1a 	bl	8000708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00c      	beq.n	8001af8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d007      	beq.n	8001af8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f8c4 	bl	8001c80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00c      	beq.n	8001b1c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d007      	beq.n	8001b1c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f834 	bl	8001b84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	f003 0320 	and.w	r3, r3, #32
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00c      	beq.n	8001b40 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f003 0320 	and.w	r3, r3, #32
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d007      	beq.n	8001b40 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f06f 0220 	mvn.w	r2, #32
 8001b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f896 	bl	8001c6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b40:	bf00      	nop
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a2c      	ldr	r2, [pc, #176]	; (8001c5c <TIM_Base_SetConfig+0xc4>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d003      	beq.n	8001bb8 <TIM_Base_SetConfig+0x20>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a2b      	ldr	r2, [pc, #172]	; (8001c60 <TIM_Base_SetConfig+0xc8>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d108      	bne.n	8001bca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a23      	ldr	r2, [pc, #140]	; (8001c5c <TIM_Base_SetConfig+0xc4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d00b      	beq.n	8001bea <TIM_Base_SetConfig+0x52>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a22      	ldr	r2, [pc, #136]	; (8001c60 <TIM_Base_SetConfig+0xc8>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d007      	beq.n	8001bea <TIM_Base_SetConfig+0x52>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a21      	ldr	r2, [pc, #132]	; (8001c64 <TIM_Base_SetConfig+0xcc>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d003      	beq.n	8001bea <TIM_Base_SetConfig+0x52>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a20      	ldr	r2, [pc, #128]	; (8001c68 <TIM_Base_SetConfig+0xd0>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d108      	bne.n	8001bfc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a0e      	ldr	r2, [pc, #56]	; (8001c5c <TIM_Base_SetConfig+0xc4>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d103      	bne.n	8001c30 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	691a      	ldr	r2, [r3, #16]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d105      	bne.n	8001c4e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	f023 0201 	bic.w	r2, r3, #1
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	611a      	str	r2, [r3, #16]
  }
}
 8001c4e:	bf00      	nop
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40010000 	.word	0x40010000
 8001c60:	40000c00 	.word	0x40000c00
 8001c64:	40014000 	.word	0x40014000
 8001c68:	40014800 	.word	0x40014800

08001c6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e042      	b.n	8001d2c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d106      	bne.n	8001cc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7fe fd68 	bl	8000790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2224      	movs	r2, #36	; 0x24
 8001cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 f82b 	bl	8001d34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	691a      	ldr	r2, [r3, #16]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001cec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	695a      	ldr	r2, [r3, #20]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68da      	ldr	r2, [r3, #12]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2220      	movs	r2, #32
 8001d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2220      	movs	r2, #32
 8001d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d38:	b0c0      	sub	sp, #256	; 0x100
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d50:	68d9      	ldr	r1, [r3, #12]
 8001d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	ea40 0301 	orr.w	r3, r0, r1
 8001d5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	431a      	orrs	r2, r3
 8001d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001d8c:	f021 010c 	bic.w	r1, r1, #12
 8001d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001d9a:	430b      	orrs	r3, r1
 8001d9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dae:	6999      	ldr	r1, [r3, #24]
 8001db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	ea40 0301 	orr.w	r3, r0, r1
 8001dba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	4b8f      	ldr	r3, [pc, #572]	; (8002000 <UART_SetConfig+0x2cc>)
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d005      	beq.n	8001dd4 <UART_SetConfig+0xa0>
 8001dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	4b8d      	ldr	r3, [pc, #564]	; (8002004 <UART_SetConfig+0x2d0>)
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d104      	bne.n	8001dde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001dd4:	f7ff fa56 	bl	8001284 <HAL_RCC_GetPCLK2Freq>
 8001dd8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001ddc:	e003      	b.n	8001de6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001dde:	f7ff fa3d 	bl	800125c <HAL_RCC_GetPCLK1Freq>
 8001de2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001df0:	f040 810c 	bne.w	800200c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001dfe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001e02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001e06:	4622      	mov	r2, r4
 8001e08:	462b      	mov	r3, r5
 8001e0a:	1891      	adds	r1, r2, r2
 8001e0c:	65b9      	str	r1, [r7, #88]	; 0x58
 8001e0e:	415b      	adcs	r3, r3
 8001e10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001e16:	4621      	mov	r1, r4
 8001e18:	eb12 0801 	adds.w	r8, r2, r1
 8001e1c:	4629      	mov	r1, r5
 8001e1e:	eb43 0901 	adc.w	r9, r3, r1
 8001e22:	f04f 0200 	mov.w	r2, #0
 8001e26:	f04f 0300 	mov.w	r3, #0
 8001e2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e36:	4690      	mov	r8, r2
 8001e38:	4699      	mov	r9, r3
 8001e3a:	4623      	mov	r3, r4
 8001e3c:	eb18 0303 	adds.w	r3, r8, r3
 8001e40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001e44:	462b      	mov	r3, r5
 8001e46:	eb49 0303 	adc.w	r3, r9, r3
 8001e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001e5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001e5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001e62:	460b      	mov	r3, r1
 8001e64:	18db      	adds	r3, r3, r3
 8001e66:	653b      	str	r3, [r7, #80]	; 0x50
 8001e68:	4613      	mov	r3, r2
 8001e6a:	eb42 0303 	adc.w	r3, r2, r3
 8001e6e:	657b      	str	r3, [r7, #84]	; 0x54
 8001e70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001e74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001e78:	f7fe f9ca 	bl	8000210 <__aeabi_uldivmod>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4b61      	ldr	r3, [pc, #388]	; (8002008 <UART_SetConfig+0x2d4>)
 8001e82:	fba3 2302 	umull	r2, r3, r3, r2
 8001e86:	095b      	lsrs	r3, r3, #5
 8001e88:	011c      	lsls	r4, r3, #4
 8001e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001e94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001e98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001e9c:	4642      	mov	r2, r8
 8001e9e:	464b      	mov	r3, r9
 8001ea0:	1891      	adds	r1, r2, r2
 8001ea2:	64b9      	str	r1, [r7, #72]	; 0x48
 8001ea4:	415b      	adcs	r3, r3
 8001ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ea8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001eac:	4641      	mov	r1, r8
 8001eae:	eb12 0a01 	adds.w	sl, r2, r1
 8001eb2:	4649      	mov	r1, r9
 8001eb4:	eb43 0b01 	adc.w	fp, r3, r1
 8001eb8:	f04f 0200 	mov.w	r2, #0
 8001ebc:	f04f 0300 	mov.w	r3, #0
 8001ec0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001ec4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001ec8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ecc:	4692      	mov	sl, r2
 8001ece:	469b      	mov	fp, r3
 8001ed0:	4643      	mov	r3, r8
 8001ed2:	eb1a 0303 	adds.w	r3, sl, r3
 8001ed6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001eda:	464b      	mov	r3, r9
 8001edc:	eb4b 0303 	adc.w	r3, fp, r3
 8001ee0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001ef0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001ef4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	18db      	adds	r3, r3, r3
 8001efc:	643b      	str	r3, [r7, #64]	; 0x40
 8001efe:	4613      	mov	r3, r2
 8001f00:	eb42 0303 	adc.w	r3, r2, r3
 8001f04:	647b      	str	r3, [r7, #68]	; 0x44
 8001f06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001f0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001f0e:	f7fe f97f 	bl	8000210 <__aeabi_uldivmod>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4611      	mov	r1, r2
 8001f18:	4b3b      	ldr	r3, [pc, #236]	; (8002008 <UART_SetConfig+0x2d4>)
 8001f1a:	fba3 2301 	umull	r2, r3, r3, r1
 8001f1e:	095b      	lsrs	r3, r3, #5
 8001f20:	2264      	movs	r2, #100	; 0x64
 8001f22:	fb02 f303 	mul.w	r3, r2, r3
 8001f26:	1acb      	subs	r3, r1, r3
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001f2e:	4b36      	ldr	r3, [pc, #216]	; (8002008 <UART_SetConfig+0x2d4>)
 8001f30:	fba3 2302 	umull	r2, r3, r3, r2
 8001f34:	095b      	lsrs	r3, r3, #5
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f3c:	441c      	add	r4, r3
 8001f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f42:	2200      	movs	r2, #0
 8001f44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001f48:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001f4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001f50:	4642      	mov	r2, r8
 8001f52:	464b      	mov	r3, r9
 8001f54:	1891      	adds	r1, r2, r2
 8001f56:	63b9      	str	r1, [r7, #56]	; 0x38
 8001f58:	415b      	adcs	r3, r3
 8001f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001f60:	4641      	mov	r1, r8
 8001f62:	1851      	adds	r1, r2, r1
 8001f64:	6339      	str	r1, [r7, #48]	; 0x30
 8001f66:	4649      	mov	r1, r9
 8001f68:	414b      	adcs	r3, r1
 8001f6a:	637b      	str	r3, [r7, #52]	; 0x34
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	f04f 0300 	mov.w	r3, #0
 8001f74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001f78:	4659      	mov	r1, fp
 8001f7a:	00cb      	lsls	r3, r1, #3
 8001f7c:	4651      	mov	r1, sl
 8001f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f82:	4651      	mov	r1, sl
 8001f84:	00ca      	lsls	r2, r1, #3
 8001f86:	4610      	mov	r0, r2
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	4642      	mov	r2, r8
 8001f8e:	189b      	adds	r3, r3, r2
 8001f90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001f94:	464b      	mov	r3, r9
 8001f96:	460a      	mov	r2, r1
 8001f98:	eb42 0303 	adc.w	r3, r2, r3
 8001f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001fac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001fb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	18db      	adds	r3, r3, r3
 8001fb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fba:	4613      	mov	r3, r2
 8001fbc:	eb42 0303 	adc.w	r3, r2, r3
 8001fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001fc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001fca:	f7fe f921 	bl	8000210 <__aeabi_uldivmod>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4b0d      	ldr	r3, [pc, #52]	; (8002008 <UART_SetConfig+0x2d4>)
 8001fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8001fd8:	095b      	lsrs	r3, r3, #5
 8001fda:	2164      	movs	r1, #100	; 0x64
 8001fdc:	fb01 f303 	mul.w	r3, r1, r3
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	3332      	adds	r3, #50	; 0x32
 8001fe6:	4a08      	ldr	r2, [pc, #32]	; (8002008 <UART_SetConfig+0x2d4>)
 8001fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fec:	095b      	lsrs	r3, r3, #5
 8001fee:	f003 0207 	and.w	r2, r3, #7
 8001ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4422      	add	r2, r4
 8001ffa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001ffc:	e106      	b.n	800220c <UART_SetConfig+0x4d8>
 8001ffe:	bf00      	nop
 8002000:	40011000 	.word	0x40011000
 8002004:	40011400 	.word	0x40011400
 8002008:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800200c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002010:	2200      	movs	r2, #0
 8002012:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002016:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800201a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800201e:	4642      	mov	r2, r8
 8002020:	464b      	mov	r3, r9
 8002022:	1891      	adds	r1, r2, r2
 8002024:	6239      	str	r1, [r7, #32]
 8002026:	415b      	adcs	r3, r3
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
 800202a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800202e:	4641      	mov	r1, r8
 8002030:	1854      	adds	r4, r2, r1
 8002032:	4649      	mov	r1, r9
 8002034:	eb43 0501 	adc.w	r5, r3, r1
 8002038:	f04f 0200 	mov.w	r2, #0
 800203c:	f04f 0300 	mov.w	r3, #0
 8002040:	00eb      	lsls	r3, r5, #3
 8002042:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002046:	00e2      	lsls	r2, r4, #3
 8002048:	4614      	mov	r4, r2
 800204a:	461d      	mov	r5, r3
 800204c:	4643      	mov	r3, r8
 800204e:	18e3      	adds	r3, r4, r3
 8002050:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002054:	464b      	mov	r3, r9
 8002056:	eb45 0303 	adc.w	r3, r5, r3
 800205a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800205e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800206a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	f04f 0300 	mov.w	r3, #0
 8002076:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800207a:	4629      	mov	r1, r5
 800207c:	008b      	lsls	r3, r1, #2
 800207e:	4621      	mov	r1, r4
 8002080:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002084:	4621      	mov	r1, r4
 8002086:	008a      	lsls	r2, r1, #2
 8002088:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800208c:	f7fe f8c0 	bl	8000210 <__aeabi_uldivmod>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4b60      	ldr	r3, [pc, #384]	; (8002218 <UART_SetConfig+0x4e4>)
 8002096:	fba3 2302 	umull	r2, r3, r3, r2
 800209a:	095b      	lsrs	r3, r3, #5
 800209c:	011c      	lsls	r4, r3, #4
 800209e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020a2:	2200      	movs	r2, #0
 80020a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80020a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80020ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80020b0:	4642      	mov	r2, r8
 80020b2:	464b      	mov	r3, r9
 80020b4:	1891      	adds	r1, r2, r2
 80020b6:	61b9      	str	r1, [r7, #24]
 80020b8:	415b      	adcs	r3, r3
 80020ba:	61fb      	str	r3, [r7, #28]
 80020bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020c0:	4641      	mov	r1, r8
 80020c2:	1851      	adds	r1, r2, r1
 80020c4:	6139      	str	r1, [r7, #16]
 80020c6:	4649      	mov	r1, r9
 80020c8:	414b      	adcs	r3, r1
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	f04f 0200 	mov.w	r2, #0
 80020d0:	f04f 0300 	mov.w	r3, #0
 80020d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020d8:	4659      	mov	r1, fp
 80020da:	00cb      	lsls	r3, r1, #3
 80020dc:	4651      	mov	r1, sl
 80020de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020e2:	4651      	mov	r1, sl
 80020e4:	00ca      	lsls	r2, r1, #3
 80020e6:	4610      	mov	r0, r2
 80020e8:	4619      	mov	r1, r3
 80020ea:	4603      	mov	r3, r0
 80020ec:	4642      	mov	r2, r8
 80020ee:	189b      	adds	r3, r3, r2
 80020f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80020f4:	464b      	mov	r3, r9
 80020f6:	460a      	mov	r2, r1
 80020f8:	eb42 0303 	adc.w	r3, r2, r3
 80020fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	67bb      	str	r3, [r7, #120]	; 0x78
 800210a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	f04f 0300 	mov.w	r3, #0
 8002114:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002118:	4649      	mov	r1, r9
 800211a:	008b      	lsls	r3, r1, #2
 800211c:	4641      	mov	r1, r8
 800211e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002122:	4641      	mov	r1, r8
 8002124:	008a      	lsls	r2, r1, #2
 8002126:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800212a:	f7fe f871 	bl	8000210 <__aeabi_uldivmod>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4611      	mov	r1, r2
 8002134:	4b38      	ldr	r3, [pc, #224]	; (8002218 <UART_SetConfig+0x4e4>)
 8002136:	fba3 2301 	umull	r2, r3, r3, r1
 800213a:	095b      	lsrs	r3, r3, #5
 800213c:	2264      	movs	r2, #100	; 0x64
 800213e:	fb02 f303 	mul.w	r3, r2, r3
 8002142:	1acb      	subs	r3, r1, r3
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	3332      	adds	r3, #50	; 0x32
 8002148:	4a33      	ldr	r2, [pc, #204]	; (8002218 <UART_SetConfig+0x4e4>)
 800214a:	fba2 2303 	umull	r2, r3, r2, r3
 800214e:	095b      	lsrs	r3, r3, #5
 8002150:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002154:	441c      	add	r4, r3
 8002156:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800215a:	2200      	movs	r2, #0
 800215c:	673b      	str	r3, [r7, #112]	; 0x70
 800215e:	677a      	str	r2, [r7, #116]	; 0x74
 8002160:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002164:	4642      	mov	r2, r8
 8002166:	464b      	mov	r3, r9
 8002168:	1891      	adds	r1, r2, r2
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	415b      	adcs	r3, r3
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002174:	4641      	mov	r1, r8
 8002176:	1851      	adds	r1, r2, r1
 8002178:	6039      	str	r1, [r7, #0]
 800217a:	4649      	mov	r1, r9
 800217c:	414b      	adcs	r3, r1
 800217e:	607b      	str	r3, [r7, #4]
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	f04f 0300 	mov.w	r3, #0
 8002188:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800218c:	4659      	mov	r1, fp
 800218e:	00cb      	lsls	r3, r1, #3
 8002190:	4651      	mov	r1, sl
 8002192:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002196:	4651      	mov	r1, sl
 8002198:	00ca      	lsls	r2, r1, #3
 800219a:	4610      	mov	r0, r2
 800219c:	4619      	mov	r1, r3
 800219e:	4603      	mov	r3, r0
 80021a0:	4642      	mov	r2, r8
 80021a2:	189b      	adds	r3, r3, r2
 80021a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80021a6:	464b      	mov	r3, r9
 80021a8:	460a      	mov	r2, r1
 80021aa:	eb42 0303 	adc.w	r3, r2, r3
 80021ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80021b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	663b      	str	r3, [r7, #96]	; 0x60
 80021ba:	667a      	str	r2, [r7, #100]	; 0x64
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	f04f 0300 	mov.w	r3, #0
 80021c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80021c8:	4649      	mov	r1, r9
 80021ca:	008b      	lsls	r3, r1, #2
 80021cc:	4641      	mov	r1, r8
 80021ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021d2:	4641      	mov	r1, r8
 80021d4:	008a      	lsls	r2, r1, #2
 80021d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80021da:	f7fe f819 	bl	8000210 <__aeabi_uldivmod>
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	4b0d      	ldr	r3, [pc, #52]	; (8002218 <UART_SetConfig+0x4e4>)
 80021e4:	fba3 1302 	umull	r1, r3, r3, r2
 80021e8:	095b      	lsrs	r3, r3, #5
 80021ea:	2164      	movs	r1, #100	; 0x64
 80021ec:	fb01 f303 	mul.w	r3, r1, r3
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	3332      	adds	r3, #50	; 0x32
 80021f6:	4a08      	ldr	r2, [pc, #32]	; (8002218 <UART_SetConfig+0x4e4>)
 80021f8:	fba2 2303 	umull	r2, r3, r2, r3
 80021fc:	095b      	lsrs	r3, r3, #5
 80021fe:	f003 020f 	and.w	r2, r3, #15
 8002202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4422      	add	r2, r4
 800220a:	609a      	str	r2, [r3, #8]
}
 800220c:	bf00      	nop
 800220e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002212:	46bd      	mov	sp, r7
 8002214:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002218:	51eb851f 	.word	0x51eb851f

0800221c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002220:	4b05      	ldr	r3, [pc, #20]	; (8002238 <SysTick_Handler+0x1c>)
 8002222:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002224:	f001 fbf2 	bl	8003a0c <xTaskGetSchedulerState>
 8002228:	4603      	mov	r3, r0
 800222a:	2b01      	cmp	r3, #1
 800222c:	d001      	beq.n	8002232 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800222e:	f002 f9db 	bl	80045e8 <xPortSysTickHandler>
  }
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	e000e010 	.word	0xe000e010

0800223c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4a07      	ldr	r2, [pc, #28]	; (8002268 <vApplicationGetIdleTaskMemory+0x2c>)
 800224c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	4a06      	ldr	r2, [pc, #24]	; (800226c <vApplicationGetIdleTaskMemory+0x30>)
 8002252:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2280      	movs	r2, #128	; 0x80
 8002258:	601a      	str	r2, [r3, #0]
}
 800225a:	bf00      	nop
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	2000011c 	.word	0x2000011c
 800226c:	200001c4 	.word	0x200001c4

08002270 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4a07      	ldr	r2, [pc, #28]	; (800229c <vApplicationGetTimerTaskMemory+0x2c>)
 8002280:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	4a06      	ldr	r2, [pc, #24]	; (80022a0 <vApplicationGetTimerTaskMemory+0x30>)
 8002286:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800228e:	601a      	str	r2, [r3, #0]
}
 8002290:	bf00      	nop
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	200003c4 	.word	0x200003c4
 80022a0:	2000046c 	.word	0x2000046c

080022a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f103 0208 	add.w	r2, r3, #8
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f103 0208 	add.w	r2, r3, #8
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f103 0208 	add.w	r2, r3, #8
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80022fe:	b480      	push	{r7}
 8002300:	b085      	sub	sp, #20
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
 8002306:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	1c5a      	adds	r2, r3, #1
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	601a      	str	r2, [r3, #0]
}
 800233a:	bf00      	nop
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002346:	b480      	push	{r7}
 8002348:	b085      	sub	sp, #20
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
 800234e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800235c:	d103      	bne.n	8002366 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	e00c      	b.n	8002380 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3308      	adds	r3, #8
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	e002      	b.n	8002374 <vListInsert+0x2e>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	429a      	cmp	r2, r3
 800237e:	d2f6      	bcs.n	800236e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	1c5a      	adds	r2, r3, #1
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	601a      	str	r2, [r3, #0]
}
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6892      	ldr	r2, [r2, #8]
 80023ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6852      	ldr	r2, [r2, #4]
 80023d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d103      	bne.n	80023ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	1e5a      	subs	r2, r3, #1
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10a      	bne.n	8002436 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002424:	f383 8811 	msr	BASEPRI, r3
 8002428:	f3bf 8f6f 	isb	sy
 800242c:	f3bf 8f4f 	dsb	sy
 8002430:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002432:	bf00      	nop
 8002434:	e7fe      	b.n	8002434 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002436:	f002 f845 	bl	80044c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002442:	68f9      	ldr	r1, [r7, #12]
 8002444:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002446:	fb01 f303 	mul.w	r3, r1, r3
 800244a:	441a      	add	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002466:	3b01      	subs	r3, #1
 8002468:	68f9      	ldr	r1, [r7, #12]
 800246a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800246c:	fb01 f303 	mul.w	r3, r1, r3
 8002470:	441a      	add	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	22ff      	movs	r2, #255	; 0xff
 800247a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	22ff      	movs	r2, #255	; 0xff
 8002482:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d114      	bne.n	80024b6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d01a      	beq.n	80024ca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	3310      	adds	r3, #16
 8002498:	4618      	mov	r0, r3
 800249a:	f001 f8f5 	bl	8003688 <xTaskRemoveFromEventList>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d012      	beq.n	80024ca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <xQueueGenericReset+0xcc>)
 80024a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	f3bf 8f4f 	dsb	sy
 80024b0:	f3bf 8f6f 	isb	sy
 80024b4:	e009      	b.n	80024ca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	3310      	adds	r3, #16
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fef2 	bl	80022a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	3324      	adds	r3, #36	; 0x24
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff feed 	bl	80022a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80024ca:	f002 f82b 	bl	8004524 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80024ce:	2301      	movs	r3, #1
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	e000ed04 	.word	0xe000ed04

080024dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08e      	sub	sp, #56	; 0x38
 80024e0:	af02      	add	r7, sp, #8
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
 80024e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10a      	bne.n	8002506 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80024f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f4:	f383 8811 	msr	BASEPRI, r3
 80024f8:	f3bf 8f6f 	isb	sy
 80024fc:	f3bf 8f4f 	dsb	sy
 8002500:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002502:	bf00      	nop
 8002504:	e7fe      	b.n	8002504 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10a      	bne.n	8002522 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800250c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002510:	f383 8811 	msr	BASEPRI, r3
 8002514:	f3bf 8f6f 	isb	sy
 8002518:	f3bf 8f4f 	dsb	sy
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800251e:	bf00      	nop
 8002520:	e7fe      	b.n	8002520 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d002      	beq.n	800252e <xQueueGenericCreateStatic+0x52>
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <xQueueGenericCreateStatic+0x56>
 800252e:	2301      	movs	r3, #1
 8002530:	e000      	b.n	8002534 <xQueueGenericCreateStatic+0x58>
 8002532:	2300      	movs	r3, #0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10a      	bne.n	800254e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800253c:	f383 8811 	msr	BASEPRI, r3
 8002540:	f3bf 8f6f 	isb	sy
 8002544:	f3bf 8f4f 	dsb	sy
 8002548:	623b      	str	r3, [r7, #32]
}
 800254a:	bf00      	nop
 800254c:	e7fe      	b.n	800254c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d102      	bne.n	800255a <xQueueGenericCreateStatic+0x7e>
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <xQueueGenericCreateStatic+0x82>
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <xQueueGenericCreateStatic+0x84>
 800255e:	2300      	movs	r3, #0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10a      	bne.n	800257a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002568:	f383 8811 	msr	BASEPRI, r3
 800256c:	f3bf 8f6f 	isb	sy
 8002570:	f3bf 8f4f 	dsb	sy
 8002574:	61fb      	str	r3, [r7, #28]
}
 8002576:	bf00      	nop
 8002578:	e7fe      	b.n	8002578 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800257a:	2350      	movs	r3, #80	; 0x50
 800257c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2b50      	cmp	r3, #80	; 0x50
 8002582:	d00a      	beq.n	800259a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002588:	f383 8811 	msr	BASEPRI, r3
 800258c:	f3bf 8f6f 	isb	sy
 8002590:	f3bf 8f4f 	dsb	sy
 8002594:	61bb      	str	r3, [r7, #24]
}
 8002596:	bf00      	nop
 8002598:	e7fe      	b.n	8002598 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800259a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80025a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00d      	beq.n	80025c2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80025a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80025ae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80025b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	4613      	mov	r3, r2
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	68b9      	ldr	r1, [r7, #8]
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 f805 	bl	80025cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80025c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3730      	adds	r7, #48	; 0x30
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
 80025d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d103      	bne.n	80025e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	e002      	b.n	80025ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025fa:	2101      	movs	r1, #1
 80025fc:	69b8      	ldr	r0, [r7, #24]
 80025fe:	f7ff ff05 	bl	800240c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	78fa      	ldrb	r2, [r7, #3]
 8002606:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800260a:	bf00      	nop
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08e      	sub	sp, #56	; 0x38
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
 8002620:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002622:	2300      	movs	r3, #0
 8002624:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800262a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10a      	bne.n	8002646 <xQueueGenericSend+0x32>
	__asm volatile
 8002630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002634:	f383 8811 	msr	BASEPRI, r3
 8002638:	f3bf 8f6f 	isb	sy
 800263c:	f3bf 8f4f 	dsb	sy
 8002640:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002642:	bf00      	nop
 8002644:	e7fe      	b.n	8002644 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d103      	bne.n	8002654 <xQueueGenericSend+0x40>
 800264c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <xQueueGenericSend+0x44>
 8002654:	2301      	movs	r3, #1
 8002656:	e000      	b.n	800265a <xQueueGenericSend+0x46>
 8002658:	2300      	movs	r3, #0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10a      	bne.n	8002674 <xQueueGenericSend+0x60>
	__asm volatile
 800265e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002662:	f383 8811 	msr	BASEPRI, r3
 8002666:	f3bf 8f6f 	isb	sy
 800266a:	f3bf 8f4f 	dsb	sy
 800266e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002670:	bf00      	nop
 8002672:	e7fe      	b.n	8002672 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d103      	bne.n	8002682 <xQueueGenericSend+0x6e>
 800267a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <xQueueGenericSend+0x72>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <xQueueGenericSend+0x74>
 8002686:	2300      	movs	r3, #0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10a      	bne.n	80026a2 <xQueueGenericSend+0x8e>
	__asm volatile
 800268c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002690:	f383 8811 	msr	BASEPRI, r3
 8002694:	f3bf 8f6f 	isb	sy
 8002698:	f3bf 8f4f 	dsb	sy
 800269c:	623b      	str	r3, [r7, #32]
}
 800269e:	bf00      	nop
 80026a0:	e7fe      	b.n	80026a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026a2:	f001 f9b3 	bl	8003a0c <xTaskGetSchedulerState>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d102      	bne.n	80026b2 <xQueueGenericSend+0x9e>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <xQueueGenericSend+0xa2>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <xQueueGenericSend+0xa4>
 80026b6:	2300      	movs	r3, #0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10a      	bne.n	80026d2 <xQueueGenericSend+0xbe>
	__asm volatile
 80026bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c0:	f383 8811 	msr	BASEPRI, r3
 80026c4:	f3bf 8f6f 	isb	sy
 80026c8:	f3bf 8f4f 	dsb	sy
 80026cc:	61fb      	str	r3, [r7, #28]
}
 80026ce:	bf00      	nop
 80026d0:	e7fe      	b.n	80026d0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80026d2:	f001 fef7 	bl	80044c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026de:	429a      	cmp	r2, r3
 80026e0:	d302      	bcc.n	80026e8 <xQueueGenericSend+0xd4>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d129      	bne.n	800273c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	68b9      	ldr	r1, [r7, #8]
 80026ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026ee:	f000 fa0b 	bl	8002b08 <prvCopyDataToQueue>
 80026f2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d010      	beq.n	800271e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fe:	3324      	adds	r3, #36	; 0x24
 8002700:	4618      	mov	r0, r3
 8002702:	f000 ffc1 	bl	8003688 <xTaskRemoveFromEventList>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d013      	beq.n	8002734 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800270c:	4b3f      	ldr	r3, [pc, #252]	; (800280c <xQueueGenericSend+0x1f8>)
 800270e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	f3bf 8f4f 	dsb	sy
 8002718:	f3bf 8f6f 	isb	sy
 800271c:	e00a      	b.n	8002734 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800271e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002720:	2b00      	cmp	r3, #0
 8002722:	d007      	beq.n	8002734 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002724:	4b39      	ldr	r3, [pc, #228]	; (800280c <xQueueGenericSend+0x1f8>)
 8002726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	f3bf 8f4f 	dsb	sy
 8002730:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002734:	f001 fef6 	bl	8004524 <vPortExitCritical>
				return pdPASS;
 8002738:	2301      	movs	r3, #1
 800273a:	e063      	b.n	8002804 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d103      	bne.n	800274a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002742:	f001 feef 	bl	8004524 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002746:	2300      	movs	r3, #0
 8002748:	e05c      	b.n	8002804 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800274a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800274c:	2b00      	cmp	r3, #0
 800274e:	d106      	bne.n	800275e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	4618      	mov	r0, r3
 8002756:	f000 fffb 	bl	8003750 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800275a:	2301      	movs	r3, #1
 800275c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800275e:	f001 fee1 	bl	8004524 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002762:	f000 fd67 	bl	8003234 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002766:	f001 fead 	bl	80044c4 <vPortEnterCritical>
 800276a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002770:	b25b      	sxtb	r3, r3
 8002772:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002776:	d103      	bne.n	8002780 <xQueueGenericSend+0x16c>
 8002778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002782:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002786:	b25b      	sxtb	r3, r3
 8002788:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800278c:	d103      	bne.n	8002796 <xQueueGenericSend+0x182>
 800278e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002796:	f001 fec5 	bl	8004524 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800279a:	1d3a      	adds	r2, r7, #4
 800279c:	f107 0314 	add.w	r3, r7, #20
 80027a0:	4611      	mov	r1, r2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 ffea 	bl	800377c <xTaskCheckForTimeOut>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d124      	bne.n	80027f8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80027ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027b0:	f000 faa2 	bl	8002cf8 <prvIsQueueFull>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d018      	beq.n	80027ec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80027ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027bc:	3310      	adds	r3, #16
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	4611      	mov	r1, r2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 ff10 	bl	80035e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80027c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027ca:	f000 fa2d 	bl	8002c28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80027ce:	f000 fd3f 	bl	8003250 <xTaskResumeAll>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f47f af7c 	bne.w	80026d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80027da:	4b0c      	ldr	r3, [pc, #48]	; (800280c <xQueueGenericSend+0x1f8>)
 80027dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	f3bf 8f4f 	dsb	sy
 80027e6:	f3bf 8f6f 	isb	sy
 80027ea:	e772      	b.n	80026d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80027ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027ee:	f000 fa1b 	bl	8002c28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80027f2:	f000 fd2d 	bl	8003250 <xTaskResumeAll>
 80027f6:	e76c      	b.n	80026d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80027f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027fa:	f000 fa15 	bl	8002c28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80027fe:	f000 fd27 	bl	8003250 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002802:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002804:	4618      	mov	r0, r3
 8002806:	3738      	adds	r7, #56	; 0x38
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	e000ed04 	.word	0xe000ed04

08002810 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b090      	sub	sp, #64	; 0x40
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
 800281c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10a      	bne.n	800283e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800282c:	f383 8811 	msr	BASEPRI, r3
 8002830:	f3bf 8f6f 	isb	sy
 8002834:	f3bf 8f4f 	dsb	sy
 8002838:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800283a:	bf00      	nop
 800283c:	e7fe      	b.n	800283c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d103      	bne.n	800284c <xQueueGenericSendFromISR+0x3c>
 8002844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <xQueueGenericSendFromISR+0x40>
 800284c:	2301      	movs	r3, #1
 800284e:	e000      	b.n	8002852 <xQueueGenericSendFromISR+0x42>
 8002850:	2300      	movs	r3, #0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10a      	bne.n	800286c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800285a:	f383 8811 	msr	BASEPRI, r3
 800285e:	f3bf 8f6f 	isb	sy
 8002862:	f3bf 8f4f 	dsb	sy
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002868:	bf00      	nop
 800286a:	e7fe      	b.n	800286a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d103      	bne.n	800287a <xQueueGenericSendFromISR+0x6a>
 8002872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002876:	2b01      	cmp	r3, #1
 8002878:	d101      	bne.n	800287e <xQueueGenericSendFromISR+0x6e>
 800287a:	2301      	movs	r3, #1
 800287c:	e000      	b.n	8002880 <xQueueGenericSendFromISR+0x70>
 800287e:	2300      	movs	r3, #0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10a      	bne.n	800289a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002888:	f383 8811 	msr	BASEPRI, r3
 800288c:	f3bf 8f6f 	isb	sy
 8002890:	f3bf 8f4f 	dsb	sy
 8002894:	623b      	str	r3, [r7, #32]
}
 8002896:	bf00      	nop
 8002898:	e7fe      	b.n	8002898 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800289a:	f001 fef5 	bl	8004688 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800289e:	f3ef 8211 	mrs	r2, BASEPRI
 80028a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a6:	f383 8811 	msr	BASEPRI, r3
 80028aa:	f3bf 8f6f 	isb	sy
 80028ae:	f3bf 8f4f 	dsb	sy
 80028b2:	61fa      	str	r2, [r7, #28]
 80028b4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80028b6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80028b8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d302      	bcc.n	80028cc <xQueueGenericSendFromISR+0xbc>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d12f      	bne.n	800292c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80028cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028da:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	68b9      	ldr	r1, [r7, #8]
 80028e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80028e2:	f000 f911 	bl	8002b08 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80028e6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80028ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028ee:	d112      	bne.n	8002916 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d016      	beq.n	8002926 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fa:	3324      	adds	r3, #36	; 0x24
 80028fc:	4618      	mov	r0, r3
 80028fe:	f000 fec3 	bl	8003688 <xTaskRemoveFromEventList>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00e      	beq.n	8002926 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00b      	beq.n	8002926 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	e007      	b.n	8002926 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002916:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800291a:	3301      	adds	r3, #1
 800291c:	b2db      	uxtb	r3, r3
 800291e:	b25a      	sxtb	r2, r3
 8002920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002926:	2301      	movs	r3, #1
 8002928:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800292a:	e001      	b.n	8002930 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800292c:	2300      	movs	r3, #0
 800292e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002932:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800293a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800293c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800293e:	4618      	mov	r0, r3
 8002940:	3740      	adds	r7, #64	; 0x40
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08c      	sub	sp, #48	; 0x30
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002954:	2300      	movs	r3, #0
 8002956:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800295c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10a      	bne.n	8002978 <xQueueReceive+0x30>
	__asm volatile
 8002962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002966:	f383 8811 	msr	BASEPRI, r3
 800296a:	f3bf 8f6f 	isb	sy
 800296e:	f3bf 8f4f 	dsb	sy
 8002972:	623b      	str	r3, [r7, #32]
}
 8002974:	bf00      	nop
 8002976:	e7fe      	b.n	8002976 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d103      	bne.n	8002986 <xQueueReceive+0x3e>
 800297e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <xQueueReceive+0x42>
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <xQueueReceive+0x44>
 800298a:	2300      	movs	r3, #0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10a      	bne.n	80029a6 <xQueueReceive+0x5e>
	__asm volatile
 8002990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002994:	f383 8811 	msr	BASEPRI, r3
 8002998:	f3bf 8f6f 	isb	sy
 800299c:	f3bf 8f4f 	dsb	sy
 80029a0:	61fb      	str	r3, [r7, #28]
}
 80029a2:	bf00      	nop
 80029a4:	e7fe      	b.n	80029a4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029a6:	f001 f831 	bl	8003a0c <xTaskGetSchedulerState>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d102      	bne.n	80029b6 <xQueueReceive+0x6e>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <xQueueReceive+0x72>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <xQueueReceive+0x74>
 80029ba:	2300      	movs	r3, #0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10a      	bne.n	80029d6 <xQueueReceive+0x8e>
	__asm volatile
 80029c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c4:	f383 8811 	msr	BASEPRI, r3
 80029c8:	f3bf 8f6f 	isb	sy
 80029cc:	f3bf 8f4f 	dsb	sy
 80029d0:	61bb      	str	r3, [r7, #24]
}
 80029d2:	bf00      	nop
 80029d4:	e7fe      	b.n	80029d4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80029d6:	f001 fd75 	bl	80044c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d01f      	beq.n	8002a26 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80029e6:	68b9      	ldr	r1, [r7, #8]
 80029e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029ea:	f000 f8f7 	bl	8002bdc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	1e5a      	subs	r2, r3, #1
 80029f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00f      	beq.n	8002a1e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a00:	3310      	adds	r3, #16
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 fe40 	bl	8003688 <xTaskRemoveFromEventList>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d007      	beq.n	8002a1e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002a0e:	4b3d      	ldr	r3, [pc, #244]	; (8002b04 <xQueueReceive+0x1bc>)
 8002a10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	f3bf 8f4f 	dsb	sy
 8002a1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002a1e:	f001 fd81 	bl	8004524 <vPortExitCritical>
				return pdPASS;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e069      	b.n	8002afa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d103      	bne.n	8002a34 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a2c:	f001 fd7a 	bl	8004524 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002a30:	2300      	movs	r3, #0
 8002a32:	e062      	b.n	8002afa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d106      	bne.n	8002a48 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a3a:	f107 0310 	add.w	r3, r7, #16
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 fe86 	bl	8003750 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a44:	2301      	movs	r3, #1
 8002a46:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a48:	f001 fd6c 	bl	8004524 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a4c:	f000 fbf2 	bl	8003234 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a50:	f001 fd38 	bl	80044c4 <vPortEnterCritical>
 8002a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a5a:	b25b      	sxtb	r3, r3
 8002a5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a60:	d103      	bne.n	8002a6a <xQueueReceive+0x122>
 8002a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a70:	b25b      	sxtb	r3, r3
 8002a72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a76:	d103      	bne.n	8002a80 <xQueueReceive+0x138>
 8002a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a80:	f001 fd50 	bl	8004524 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a84:	1d3a      	adds	r2, r7, #4
 8002a86:	f107 0310 	add.w	r3, r7, #16
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 fe75 	bl	800377c <xTaskCheckForTimeOut>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d123      	bne.n	8002ae0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a9a:	f000 f917 	bl	8002ccc <prvIsQueueEmpty>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d017      	beq.n	8002ad4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa6:	3324      	adds	r3, #36	; 0x24
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 fd9b 	bl	80035e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002ab2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ab4:	f000 f8b8 	bl	8002c28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002ab8:	f000 fbca 	bl	8003250 <xTaskResumeAll>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d189      	bne.n	80029d6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002ac2:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <xQueueReceive+0x1bc>)
 8002ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	f3bf 8f4f 	dsb	sy
 8002ace:	f3bf 8f6f 	isb	sy
 8002ad2:	e780      	b.n	80029d6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002ad4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ad6:	f000 f8a7 	bl	8002c28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ada:	f000 fbb9 	bl	8003250 <xTaskResumeAll>
 8002ade:	e77a      	b.n	80029d6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002ae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ae2:	f000 f8a1 	bl	8002c28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ae6:	f000 fbb3 	bl	8003250 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002aea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002aec:	f000 f8ee 	bl	8002ccc <prvIsQueueEmpty>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f43f af6f 	beq.w	80029d6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002af8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3730      	adds	r7, #48	; 0x30
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	e000ed04 	.word	0xe000ed04

08002b08 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10d      	bne.n	8002b42 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d14d      	bne.n	8002bca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 ff88 	bl	8003a48 <xTaskPriorityDisinherit>
 8002b38:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	609a      	str	r2, [r3, #8]
 8002b40:	e043      	b.n	8002bca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d119      	bne.n	8002b7c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6858      	ldr	r0, [r3, #4]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	461a      	mov	r2, r3
 8002b52:	68b9      	ldr	r1, [r7, #8]
 8002b54:	f002 f846 	bl	8004be4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	441a      	add	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d32b      	bcc.n	8002bca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	e026      	b.n	8002bca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	68d8      	ldr	r0, [r3, #12]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	461a      	mov	r2, r3
 8002b86:	68b9      	ldr	r1, [r7, #8]
 8002b88:	f002 f82c 	bl	8004be4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	425b      	negs	r3, r3
 8002b96:	441a      	add	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	68da      	ldr	r2, [r3, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d207      	bcs.n	8002bb8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	425b      	negs	r3, r3
 8002bb2:	441a      	add	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d105      	bne.n	8002bca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d002      	beq.n	8002bca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002bd2:	697b      	ldr	r3, [r7, #20]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d018      	beq.n	8002c20 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	441a      	add	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d303      	bcc.n	8002c10 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68d9      	ldr	r1, [r3, #12]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	461a      	mov	r2, r3
 8002c1a:	6838      	ldr	r0, [r7, #0]
 8002c1c:	f001 ffe2 	bl	8004be4 <memcpy>
	}
}
 8002c20:	bf00      	nop
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002c30:	f001 fc48 	bl	80044c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c3c:	e011      	b.n	8002c62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d012      	beq.n	8002c6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	3324      	adds	r3, #36	; 0x24
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 fd1c 	bl	8003688 <xTaskRemoveFromEventList>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002c56:	f000 fdf3 	bl	8003840 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	dce9      	bgt.n	8002c3e <prvUnlockQueue+0x16>
 8002c6a:	e000      	b.n	8002c6e <prvUnlockQueue+0x46>
					break;
 8002c6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	22ff      	movs	r2, #255	; 0xff
 8002c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002c76:	f001 fc55 	bl	8004524 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002c7a:	f001 fc23 	bl	80044c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c86:	e011      	b.n	8002cac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d012      	beq.n	8002cb6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3310      	adds	r3, #16
 8002c94:	4618      	mov	r0, r3
 8002c96:	f000 fcf7 	bl	8003688 <xTaskRemoveFromEventList>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002ca0:	f000 fdce 	bl	8003840 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002ca4:	7bbb      	ldrb	r3, [r7, #14]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002cac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	dce9      	bgt.n	8002c88 <prvUnlockQueue+0x60>
 8002cb4:	e000      	b.n	8002cb8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002cb6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	22ff      	movs	r2, #255	; 0xff
 8002cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002cc0:	f001 fc30 	bl	8004524 <vPortExitCritical>
}
 8002cc4:	bf00      	nop
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002cd4:	f001 fbf6 	bl	80044c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d102      	bne.n	8002ce6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	e001      	b.n	8002cea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002cea:	f001 fc1b 	bl	8004524 <vPortExitCritical>

	return xReturn;
 8002cee:	68fb      	ldr	r3, [r7, #12]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002d00:	f001 fbe0 	bl	80044c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d102      	bne.n	8002d16 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002d10:	2301      	movs	r3, #1
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	e001      	b.n	8002d1a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002d16:	2300      	movs	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002d1a:	f001 fc03 	bl	8004524 <vPortExitCritical>

	return xReturn;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	e014      	b.n	8002d62 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002d38:	4a0f      	ldr	r2, [pc, #60]	; (8002d78 <vQueueAddToRegistry+0x50>)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10b      	bne.n	8002d5c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002d44:	490c      	ldr	r1, [pc, #48]	; (8002d78 <vQueueAddToRegistry+0x50>)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002d4e:	4a0a      	ldr	r2, [pc, #40]	; (8002d78 <vQueueAddToRegistry+0x50>)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	4413      	add	r3, r2
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002d5a:	e006      	b.n	8002d6a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2b07      	cmp	r3, #7
 8002d66:	d9e7      	bls.n	8002d38 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002d68:	bf00      	nop
 8002d6a:	bf00      	nop
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	2000086c 	.word	0x2000086c

08002d7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002d8c:	f001 fb9a 	bl	80044c4 <vPortEnterCritical>
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d96:	b25b      	sxtb	r3, r3
 8002d98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d9c:	d103      	bne.n	8002da6 <vQueueWaitForMessageRestricted+0x2a>
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dac:	b25b      	sxtb	r3, r3
 8002dae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002db2:	d103      	bne.n	8002dbc <vQueueWaitForMessageRestricted+0x40>
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dbc:	f001 fbb2 	bl	8004524 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d106      	bne.n	8002dd6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	3324      	adds	r3, #36	; 0x24
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	68b9      	ldr	r1, [r7, #8]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 fc2d 	bl	8003630 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002dd6:	6978      	ldr	r0, [r7, #20]
 8002dd8:	f7ff ff26 	bl	8002c28 <prvUnlockQueue>
	}
 8002ddc:	bf00      	nop
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08e      	sub	sp, #56	; 0x38
 8002de8:	af04      	add	r7, sp, #16
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
 8002df0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10a      	bne.n	8002e0e <xTaskCreateStatic+0x2a>
	__asm volatile
 8002df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfc:	f383 8811 	msr	BASEPRI, r3
 8002e00:	f3bf 8f6f 	isb	sy
 8002e04:	f3bf 8f4f 	dsb	sy
 8002e08:	623b      	str	r3, [r7, #32]
}
 8002e0a:	bf00      	nop
 8002e0c:	e7fe      	b.n	8002e0c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10a      	bne.n	8002e2a <xTaskCreateStatic+0x46>
	__asm volatile
 8002e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e18:	f383 8811 	msr	BASEPRI, r3
 8002e1c:	f3bf 8f6f 	isb	sy
 8002e20:	f3bf 8f4f 	dsb	sy
 8002e24:	61fb      	str	r3, [r7, #28]
}
 8002e26:	bf00      	nop
 8002e28:	e7fe      	b.n	8002e28 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002e2a:	23a8      	movs	r3, #168	; 0xa8
 8002e2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	2ba8      	cmp	r3, #168	; 0xa8
 8002e32:	d00a      	beq.n	8002e4a <xTaskCreateStatic+0x66>
	__asm volatile
 8002e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e38:	f383 8811 	msr	BASEPRI, r3
 8002e3c:	f3bf 8f6f 	isb	sy
 8002e40:	f3bf 8f4f 	dsb	sy
 8002e44:	61bb      	str	r3, [r7, #24]
}
 8002e46:	bf00      	nop
 8002e48:	e7fe      	b.n	8002e48 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002e4a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d01e      	beq.n	8002e90 <xTaskCreateStatic+0xac>
 8002e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d01b      	beq.n	8002e90 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e5a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e60:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	2202      	movs	r2, #2
 8002e66:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	9303      	str	r3, [sp, #12]
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	9302      	str	r3, [sp, #8]
 8002e72:	f107 0314 	add.w	r3, r7, #20
 8002e76:	9301      	str	r3, [sp, #4]
 8002e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	68b9      	ldr	r1, [r7, #8]
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 f850 	bl	8002f28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e8a:	f000 f8f3 	bl	8003074 <prvAddNewTaskToReadyList>
 8002e8e:	e001      	b.n	8002e94 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002e94:	697b      	ldr	r3, [r7, #20]
	}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3728      	adds	r7, #40	; 0x28
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b08c      	sub	sp, #48	; 0x30
 8002ea2:	af04      	add	r7, sp, #16
 8002ea4:	60f8      	str	r0, [r7, #12]
 8002ea6:	60b9      	str	r1, [r7, #8]
 8002ea8:	603b      	str	r3, [r7, #0]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002eae:	88fb      	ldrh	r3, [r7, #6]
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f001 fc28 	bl	8004708 <pvPortMalloc>
 8002eb8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00e      	beq.n	8002ede <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002ec0:	20a8      	movs	r0, #168	; 0xa8
 8002ec2:	f001 fc21 	bl	8004708 <pvPortMalloc>
 8002ec6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ed4:	e005      	b.n	8002ee2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002ed6:	6978      	ldr	r0, [r7, #20]
 8002ed8:	f001 fce2 	bl	80048a0 <vPortFree>
 8002edc:	e001      	b.n	8002ee2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d017      	beq.n	8002f18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ef0:	88fa      	ldrh	r2, [r7, #6]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	9303      	str	r3, [sp, #12]
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	9302      	str	r3, [sp, #8]
 8002efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efc:	9301      	str	r3, [sp, #4]
 8002efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	68b9      	ldr	r1, [r7, #8]
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 f80e 	bl	8002f28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f0c:	69f8      	ldr	r0, [r7, #28]
 8002f0e:	f000 f8b1 	bl	8003074 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002f12:	2301      	movs	r3, #1
 8002f14:	61bb      	str	r3, [r7, #24]
 8002f16:	e002      	b.n	8002f1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002f1e:	69bb      	ldr	r3, [r7, #24]
	}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3720      	adds	r7, #32
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
 8002f34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	461a      	mov	r2, r3
 8002f40:	21a5      	movs	r1, #165	; 0xa5
 8002f42:	f001 fdcb 	bl	8004adc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f50:	3b01      	subs	r3, #1
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	f023 0307 	bic.w	r3, r3, #7
 8002f5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00a      	beq.n	8002f80 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6e:	f383 8811 	msr	BASEPRI, r3
 8002f72:	f3bf 8f6f 	isb	sy
 8002f76:	f3bf 8f4f 	dsb	sy
 8002f7a:	617b      	str	r3, [r7, #20]
}
 8002f7c:	bf00      	nop
 8002f7e:	e7fe      	b.n	8002f7e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d01f      	beq.n	8002fc6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
 8002f8a:	e012      	b.n	8002fb2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	4413      	add	r3, r2
 8002f92:	7819      	ldrb	r1, [r3, #0]
 8002f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	4413      	add	r3, r2
 8002f9a:	3334      	adds	r3, #52	; 0x34
 8002f9c:	460a      	mov	r2, r1
 8002f9e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d006      	beq.n	8002fba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	61fb      	str	r3, [r7, #28]
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	2b0f      	cmp	r3, #15
 8002fb6:	d9e9      	bls.n	8002f8c <prvInitialiseNewTask+0x64>
 8002fb8:	e000      	b.n	8002fbc <prvInitialiseNewTask+0x94>
			{
				break;
 8002fba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fc4:	e003      	b.n	8002fce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd0:	2b37      	cmp	r3, #55	; 0x37
 8002fd2:	d901      	bls.n	8002fd8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002fd4:	2337      	movs	r3, #55	; 0x37
 8002fd6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fdc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fe2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fec:	3304      	adds	r3, #4
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff f978 	bl	80022e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff6:	3318      	adds	r3, #24
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff f973 	bl	80022e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003002:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003006:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800300a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800300e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003012:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003016:	2200      	movs	r2, #0
 8003018:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800301c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301e:	2200      	movs	r2, #0
 8003020:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003026:	3354      	adds	r3, #84	; 0x54
 8003028:	224c      	movs	r2, #76	; 0x4c
 800302a:	2100      	movs	r1, #0
 800302c:	4618      	mov	r0, r3
 800302e:	f001 fd55 	bl	8004adc <memset>
 8003032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003034:	4a0c      	ldr	r2, [pc, #48]	; (8003068 <prvInitialiseNewTask+0x140>)
 8003036:	659a      	str	r2, [r3, #88]	; 0x58
 8003038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303a:	4a0c      	ldr	r2, [pc, #48]	; (800306c <prvInitialiseNewTask+0x144>)
 800303c:	65da      	str	r2, [r3, #92]	; 0x5c
 800303e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003040:	4a0b      	ldr	r2, [pc, #44]	; (8003070 <prvInitialiseNewTask+0x148>)
 8003042:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	68f9      	ldr	r1, [r7, #12]
 8003048:	69b8      	ldr	r0, [r7, #24]
 800304a:	f001 f90d 	bl	8004268 <pxPortInitialiseStack>
 800304e:	4602      	mov	r2, r0
 8003050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003052:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800305a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800305e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003060:	bf00      	nop
 8003062:	3720      	adds	r7, #32
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	20004b00 	.word	0x20004b00
 800306c:	20004b68 	.word	0x20004b68
 8003070:	20004bd0 	.word	0x20004bd0

08003074 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800307c:	f001 fa22 	bl	80044c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003080:	4b2d      	ldr	r3, [pc, #180]	; (8003138 <prvAddNewTaskToReadyList+0xc4>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	3301      	adds	r3, #1
 8003086:	4a2c      	ldr	r2, [pc, #176]	; (8003138 <prvAddNewTaskToReadyList+0xc4>)
 8003088:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800308a:	4b2c      	ldr	r3, [pc, #176]	; (800313c <prvAddNewTaskToReadyList+0xc8>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d109      	bne.n	80030a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003092:	4a2a      	ldr	r2, [pc, #168]	; (800313c <prvAddNewTaskToReadyList+0xc8>)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003098:	4b27      	ldr	r3, [pc, #156]	; (8003138 <prvAddNewTaskToReadyList+0xc4>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d110      	bne.n	80030c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80030a0:	f000 fbf2 	bl	8003888 <prvInitialiseTaskLists>
 80030a4:	e00d      	b.n	80030c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80030a6:	4b26      	ldr	r3, [pc, #152]	; (8003140 <prvAddNewTaskToReadyList+0xcc>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d109      	bne.n	80030c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80030ae:	4b23      	ldr	r3, [pc, #140]	; (800313c <prvAddNewTaskToReadyList+0xc8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d802      	bhi.n	80030c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80030bc:	4a1f      	ldr	r2, [pc, #124]	; (800313c <prvAddNewTaskToReadyList+0xc8>)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80030c2:	4b20      	ldr	r3, [pc, #128]	; (8003144 <prvAddNewTaskToReadyList+0xd0>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	3301      	adds	r3, #1
 80030c8:	4a1e      	ldr	r2, [pc, #120]	; (8003144 <prvAddNewTaskToReadyList+0xd0>)
 80030ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80030cc:	4b1d      	ldr	r3, [pc, #116]	; (8003144 <prvAddNewTaskToReadyList+0xd0>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d8:	4b1b      	ldr	r3, [pc, #108]	; (8003148 <prvAddNewTaskToReadyList+0xd4>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d903      	bls.n	80030e8 <prvAddNewTaskToReadyList+0x74>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e4:	4a18      	ldr	r2, [pc, #96]	; (8003148 <prvAddNewTaskToReadyList+0xd4>)
 80030e6:	6013      	str	r3, [r2, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4a15      	ldr	r2, [pc, #84]	; (800314c <prvAddNewTaskToReadyList+0xd8>)
 80030f6:	441a      	add	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3304      	adds	r3, #4
 80030fc:	4619      	mov	r1, r3
 80030fe:	4610      	mov	r0, r2
 8003100:	f7ff f8fd 	bl	80022fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003104:	f001 fa0e 	bl	8004524 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003108:	4b0d      	ldr	r3, [pc, #52]	; (8003140 <prvAddNewTaskToReadyList+0xcc>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00e      	beq.n	800312e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003110:	4b0a      	ldr	r3, [pc, #40]	; (800313c <prvAddNewTaskToReadyList+0xc8>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311a:	429a      	cmp	r2, r3
 800311c:	d207      	bcs.n	800312e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800311e:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <prvAddNewTaskToReadyList+0xdc>)
 8003120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	f3bf 8f4f 	dsb	sy
 800312a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800312e:	bf00      	nop
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	20000d80 	.word	0x20000d80
 800313c:	200008ac 	.word	0x200008ac
 8003140:	20000d8c 	.word	0x20000d8c
 8003144:	20000d9c 	.word	0x20000d9c
 8003148:	20000d88 	.word	0x20000d88
 800314c:	200008b0 	.word	0x200008b0
 8003150:	e000ed04 	.word	0xe000ed04

08003154 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08a      	sub	sp, #40	; 0x28
 8003158:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800315a:	2300      	movs	r3, #0
 800315c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800315e:	2300      	movs	r3, #0
 8003160:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003162:	463a      	mov	r2, r7
 8003164:	1d39      	adds	r1, r7, #4
 8003166:	f107 0308 	add.w	r3, r7, #8
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff f866 	bl	800223c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003170:	6839      	ldr	r1, [r7, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	9202      	str	r2, [sp, #8]
 8003178:	9301      	str	r3, [sp, #4]
 800317a:	2300      	movs	r3, #0
 800317c:	9300      	str	r3, [sp, #0]
 800317e:	2300      	movs	r3, #0
 8003180:	460a      	mov	r2, r1
 8003182:	4924      	ldr	r1, [pc, #144]	; (8003214 <vTaskStartScheduler+0xc0>)
 8003184:	4824      	ldr	r0, [pc, #144]	; (8003218 <vTaskStartScheduler+0xc4>)
 8003186:	f7ff fe2d 	bl	8002de4 <xTaskCreateStatic>
 800318a:	4603      	mov	r3, r0
 800318c:	4a23      	ldr	r2, [pc, #140]	; (800321c <vTaskStartScheduler+0xc8>)
 800318e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003190:	4b22      	ldr	r3, [pc, #136]	; (800321c <vTaskStartScheduler+0xc8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d002      	beq.n	800319e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003198:	2301      	movs	r3, #1
 800319a:	617b      	str	r3, [r7, #20]
 800319c:	e001      	b.n	80031a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800319e:	2300      	movs	r3, #0
 80031a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d102      	bne.n	80031ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80031a8:	f000 fd10 	bl	8003bcc <xTimerCreateTimerTask>
 80031ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d11b      	bne.n	80031ec <vTaskStartScheduler+0x98>
	__asm volatile
 80031b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b8:	f383 8811 	msr	BASEPRI, r3
 80031bc:	f3bf 8f6f 	isb	sy
 80031c0:	f3bf 8f4f 	dsb	sy
 80031c4:	613b      	str	r3, [r7, #16]
}
 80031c6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80031c8:	4b15      	ldr	r3, [pc, #84]	; (8003220 <vTaskStartScheduler+0xcc>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3354      	adds	r3, #84	; 0x54
 80031ce:	4a15      	ldr	r2, [pc, #84]	; (8003224 <vTaskStartScheduler+0xd0>)
 80031d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80031d2:	4b15      	ldr	r3, [pc, #84]	; (8003228 <vTaskStartScheduler+0xd4>)
 80031d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80031da:	4b14      	ldr	r3, [pc, #80]	; (800322c <vTaskStartScheduler+0xd8>)
 80031dc:	2201      	movs	r2, #1
 80031de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80031e0:	4b13      	ldr	r3, [pc, #76]	; (8003230 <vTaskStartScheduler+0xdc>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80031e6:	f001 f8cb 	bl	8004380 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80031ea:	e00e      	b.n	800320a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031f2:	d10a      	bne.n	800320a <vTaskStartScheduler+0xb6>
	__asm volatile
 80031f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f8:	f383 8811 	msr	BASEPRI, r3
 80031fc:	f3bf 8f6f 	isb	sy
 8003200:	f3bf 8f4f 	dsb	sy
 8003204:	60fb      	str	r3, [r7, #12]
}
 8003206:	bf00      	nop
 8003208:	e7fe      	b.n	8003208 <vTaskStartScheduler+0xb4>
}
 800320a:	bf00      	nop
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	08004d08 	.word	0x08004d08
 8003218:	08003859 	.word	0x08003859
 800321c:	20000da4 	.word	0x20000da4
 8003220:	200008ac 	.word	0x200008ac
 8003224:	2000005c 	.word	0x2000005c
 8003228:	20000da0 	.word	0x20000da0
 800322c:	20000d8c 	.word	0x20000d8c
 8003230:	20000d84 	.word	0x20000d84

08003234 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003238:	4b04      	ldr	r3, [pc, #16]	; (800324c <vTaskSuspendAll+0x18>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	3301      	adds	r3, #1
 800323e:	4a03      	ldr	r2, [pc, #12]	; (800324c <vTaskSuspendAll+0x18>)
 8003240:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003242:	bf00      	nop
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	20000da8 	.word	0x20000da8

08003250 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003256:	2300      	movs	r3, #0
 8003258:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800325a:	2300      	movs	r3, #0
 800325c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800325e:	4b42      	ldr	r3, [pc, #264]	; (8003368 <xTaskResumeAll+0x118>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10a      	bne.n	800327c <xTaskResumeAll+0x2c>
	__asm volatile
 8003266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326a:	f383 8811 	msr	BASEPRI, r3
 800326e:	f3bf 8f6f 	isb	sy
 8003272:	f3bf 8f4f 	dsb	sy
 8003276:	603b      	str	r3, [r7, #0]
}
 8003278:	bf00      	nop
 800327a:	e7fe      	b.n	800327a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800327c:	f001 f922 	bl	80044c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003280:	4b39      	ldr	r3, [pc, #228]	; (8003368 <xTaskResumeAll+0x118>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	3b01      	subs	r3, #1
 8003286:	4a38      	ldr	r2, [pc, #224]	; (8003368 <xTaskResumeAll+0x118>)
 8003288:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800328a:	4b37      	ldr	r3, [pc, #220]	; (8003368 <xTaskResumeAll+0x118>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d162      	bne.n	8003358 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003292:	4b36      	ldr	r3, [pc, #216]	; (800336c <xTaskResumeAll+0x11c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d05e      	beq.n	8003358 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800329a:	e02f      	b.n	80032fc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800329c:	4b34      	ldr	r3, [pc, #208]	; (8003370 <xTaskResumeAll+0x120>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	3318      	adds	r3, #24
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff f885 	bl	80023b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	3304      	adds	r3, #4
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff f880 	bl	80023b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032bc:	4b2d      	ldr	r3, [pc, #180]	; (8003374 <xTaskResumeAll+0x124>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d903      	bls.n	80032cc <xTaskResumeAll+0x7c>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c8:	4a2a      	ldr	r2, [pc, #168]	; (8003374 <xTaskResumeAll+0x124>)
 80032ca:	6013      	str	r3, [r2, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4a27      	ldr	r2, [pc, #156]	; (8003378 <xTaskResumeAll+0x128>)
 80032da:	441a      	add	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	3304      	adds	r3, #4
 80032e0:	4619      	mov	r1, r3
 80032e2:	4610      	mov	r0, r2
 80032e4:	f7ff f80b 	bl	80022fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ec:	4b23      	ldr	r3, [pc, #140]	; (800337c <xTaskResumeAll+0x12c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d302      	bcc.n	80032fc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80032f6:	4b22      	ldr	r3, [pc, #136]	; (8003380 <xTaskResumeAll+0x130>)
 80032f8:	2201      	movs	r2, #1
 80032fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032fc:	4b1c      	ldr	r3, [pc, #112]	; (8003370 <xTaskResumeAll+0x120>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1cb      	bne.n	800329c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800330a:	f000 fb5f 	bl	80039cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800330e:	4b1d      	ldr	r3, [pc, #116]	; (8003384 <xTaskResumeAll+0x134>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d010      	beq.n	800333c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800331a:	f000 f847 	bl	80033ac <xTaskIncrementTick>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d002      	beq.n	800332a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003324:	4b16      	ldr	r3, [pc, #88]	; (8003380 <xTaskResumeAll+0x130>)
 8003326:	2201      	movs	r2, #1
 8003328:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3b01      	subs	r3, #1
 800332e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f1      	bne.n	800331a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003336:	4b13      	ldr	r3, [pc, #76]	; (8003384 <xTaskResumeAll+0x134>)
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800333c:	4b10      	ldr	r3, [pc, #64]	; (8003380 <xTaskResumeAll+0x130>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d009      	beq.n	8003358 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003344:	2301      	movs	r3, #1
 8003346:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003348:	4b0f      	ldr	r3, [pc, #60]	; (8003388 <xTaskResumeAll+0x138>)
 800334a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	f3bf 8f4f 	dsb	sy
 8003354:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003358:	f001 f8e4 	bl	8004524 <vPortExitCritical>

	return xAlreadyYielded;
 800335c:	68bb      	ldr	r3, [r7, #8]
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	20000da8 	.word	0x20000da8
 800336c:	20000d80 	.word	0x20000d80
 8003370:	20000d40 	.word	0x20000d40
 8003374:	20000d88 	.word	0x20000d88
 8003378:	200008b0 	.word	0x200008b0
 800337c:	200008ac 	.word	0x200008ac
 8003380:	20000d94 	.word	0x20000d94
 8003384:	20000d90 	.word	0x20000d90
 8003388:	e000ed04 	.word	0xe000ed04

0800338c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003392:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <xTaskGetTickCount+0x1c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003398:	687b      	ldr	r3, [r7, #4]
}
 800339a:	4618      	mov	r0, r3
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	20000d84 	.word	0x20000d84

080033ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80033b2:	2300      	movs	r3, #0
 80033b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033b6:	4b4f      	ldr	r3, [pc, #316]	; (80034f4 <xTaskIncrementTick+0x148>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f040 808f 	bne.w	80034de <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80033c0:	4b4d      	ldr	r3, [pc, #308]	; (80034f8 <xTaskIncrementTick+0x14c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3301      	adds	r3, #1
 80033c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80033c8:	4a4b      	ldr	r2, [pc, #300]	; (80034f8 <xTaskIncrementTick+0x14c>)
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d120      	bne.n	8003416 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80033d4:	4b49      	ldr	r3, [pc, #292]	; (80034fc <xTaskIncrementTick+0x150>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <xTaskIncrementTick+0x48>
	__asm volatile
 80033de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e2:	f383 8811 	msr	BASEPRI, r3
 80033e6:	f3bf 8f6f 	isb	sy
 80033ea:	f3bf 8f4f 	dsb	sy
 80033ee:	603b      	str	r3, [r7, #0]
}
 80033f0:	bf00      	nop
 80033f2:	e7fe      	b.n	80033f2 <xTaskIncrementTick+0x46>
 80033f4:	4b41      	ldr	r3, [pc, #260]	; (80034fc <xTaskIncrementTick+0x150>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	4b41      	ldr	r3, [pc, #260]	; (8003500 <xTaskIncrementTick+0x154>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a3f      	ldr	r2, [pc, #252]	; (80034fc <xTaskIncrementTick+0x150>)
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	4a3f      	ldr	r2, [pc, #252]	; (8003500 <xTaskIncrementTick+0x154>)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6013      	str	r3, [r2, #0]
 8003408:	4b3e      	ldr	r3, [pc, #248]	; (8003504 <xTaskIncrementTick+0x158>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	3301      	adds	r3, #1
 800340e:	4a3d      	ldr	r2, [pc, #244]	; (8003504 <xTaskIncrementTick+0x158>)
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	f000 fadb 	bl	80039cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003416:	4b3c      	ldr	r3, [pc, #240]	; (8003508 <xTaskIncrementTick+0x15c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	429a      	cmp	r2, r3
 800341e:	d349      	bcc.n	80034b4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003420:	4b36      	ldr	r3, [pc, #216]	; (80034fc <xTaskIncrementTick+0x150>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d104      	bne.n	8003434 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800342a:	4b37      	ldr	r3, [pc, #220]	; (8003508 <xTaskIncrementTick+0x15c>)
 800342c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003430:	601a      	str	r2, [r3, #0]
					break;
 8003432:	e03f      	b.n	80034b4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003434:	4b31      	ldr	r3, [pc, #196]	; (80034fc <xTaskIncrementTick+0x150>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	429a      	cmp	r2, r3
 800344a:	d203      	bcs.n	8003454 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800344c:	4a2e      	ldr	r2, [pc, #184]	; (8003508 <xTaskIncrementTick+0x15c>)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003452:	e02f      	b.n	80034b4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	3304      	adds	r3, #4
 8003458:	4618      	mov	r0, r3
 800345a:	f7fe ffad 	bl	80023b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003462:	2b00      	cmp	r3, #0
 8003464:	d004      	beq.n	8003470 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	3318      	adds	r3, #24
 800346a:	4618      	mov	r0, r3
 800346c:	f7fe ffa4 	bl	80023b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003474:	4b25      	ldr	r3, [pc, #148]	; (800350c <xTaskIncrementTick+0x160>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	429a      	cmp	r2, r3
 800347a:	d903      	bls.n	8003484 <xTaskIncrementTick+0xd8>
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003480:	4a22      	ldr	r2, [pc, #136]	; (800350c <xTaskIncrementTick+0x160>)
 8003482:	6013      	str	r3, [r2, #0]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4a1f      	ldr	r2, [pc, #124]	; (8003510 <xTaskIncrementTick+0x164>)
 8003492:	441a      	add	r2, r3
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	3304      	adds	r3, #4
 8003498:	4619      	mov	r1, r3
 800349a:	4610      	mov	r0, r2
 800349c:	f7fe ff2f 	bl	80022fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a4:	4b1b      	ldr	r3, [pc, #108]	; (8003514 <xTaskIncrementTick+0x168>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d3b8      	bcc.n	8003420 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80034ae:	2301      	movs	r3, #1
 80034b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034b2:	e7b5      	b.n	8003420 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80034b4:	4b17      	ldr	r3, [pc, #92]	; (8003514 <xTaskIncrementTick+0x168>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ba:	4915      	ldr	r1, [pc, #84]	; (8003510 <xTaskIncrementTick+0x164>)
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d901      	bls.n	80034d0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80034cc:	2301      	movs	r3, #1
 80034ce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80034d0:	4b11      	ldr	r3, [pc, #68]	; (8003518 <xTaskIncrementTick+0x16c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d007      	beq.n	80034e8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80034d8:	2301      	movs	r3, #1
 80034da:	617b      	str	r3, [r7, #20]
 80034dc:	e004      	b.n	80034e8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80034de:	4b0f      	ldr	r3, [pc, #60]	; (800351c <xTaskIncrementTick+0x170>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	3301      	adds	r3, #1
 80034e4:	4a0d      	ldr	r2, [pc, #52]	; (800351c <xTaskIncrementTick+0x170>)
 80034e6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80034e8:	697b      	ldr	r3, [r7, #20]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	20000da8 	.word	0x20000da8
 80034f8:	20000d84 	.word	0x20000d84
 80034fc:	20000d38 	.word	0x20000d38
 8003500:	20000d3c 	.word	0x20000d3c
 8003504:	20000d98 	.word	0x20000d98
 8003508:	20000da0 	.word	0x20000da0
 800350c:	20000d88 	.word	0x20000d88
 8003510:	200008b0 	.word	0x200008b0
 8003514:	200008ac 	.word	0x200008ac
 8003518:	20000d94 	.word	0x20000d94
 800351c:	20000d90 	.word	0x20000d90

08003520 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003526:	4b2a      	ldr	r3, [pc, #168]	; (80035d0 <vTaskSwitchContext+0xb0>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800352e:	4b29      	ldr	r3, [pc, #164]	; (80035d4 <vTaskSwitchContext+0xb4>)
 8003530:	2201      	movs	r2, #1
 8003532:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003534:	e046      	b.n	80035c4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003536:	4b27      	ldr	r3, [pc, #156]	; (80035d4 <vTaskSwitchContext+0xb4>)
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800353c:	4b26      	ldr	r3, [pc, #152]	; (80035d8 <vTaskSwitchContext+0xb8>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	e010      	b.n	8003566 <vTaskSwitchContext+0x46>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10a      	bne.n	8003560 <vTaskSwitchContext+0x40>
	__asm volatile
 800354a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354e:	f383 8811 	msr	BASEPRI, r3
 8003552:	f3bf 8f6f 	isb	sy
 8003556:	f3bf 8f4f 	dsb	sy
 800355a:	607b      	str	r3, [r7, #4]
}
 800355c:	bf00      	nop
 800355e:	e7fe      	b.n	800355e <vTaskSwitchContext+0x3e>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	3b01      	subs	r3, #1
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	491d      	ldr	r1, [pc, #116]	; (80035dc <vTaskSwitchContext+0xbc>)
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4613      	mov	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0e4      	beq.n	8003544 <vTaskSwitchContext+0x24>
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4a15      	ldr	r2, [pc, #84]	; (80035dc <vTaskSwitchContext+0xbc>)
 8003586:	4413      	add	r3, r2
 8003588:	60bb      	str	r3, [r7, #8]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	605a      	str	r2, [r3, #4]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	3308      	adds	r3, #8
 800359c:	429a      	cmp	r2, r3
 800359e:	d104      	bne.n	80035aa <vTaskSwitchContext+0x8a>
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	4a0b      	ldr	r2, [pc, #44]	; (80035e0 <vTaskSwitchContext+0xc0>)
 80035b2:	6013      	str	r3, [r2, #0]
 80035b4:	4a08      	ldr	r2, [pc, #32]	; (80035d8 <vTaskSwitchContext+0xb8>)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80035ba:	4b09      	ldr	r3, [pc, #36]	; (80035e0 <vTaskSwitchContext+0xc0>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3354      	adds	r3, #84	; 0x54
 80035c0:	4a08      	ldr	r2, [pc, #32]	; (80035e4 <vTaskSwitchContext+0xc4>)
 80035c2:	6013      	str	r3, [r2, #0]
}
 80035c4:	bf00      	nop
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	20000da8 	.word	0x20000da8
 80035d4:	20000d94 	.word	0x20000d94
 80035d8:	20000d88 	.word	0x20000d88
 80035dc:	200008b0 	.word	0x200008b0
 80035e0:	200008ac 	.word	0x200008ac
 80035e4:	2000005c 	.word	0x2000005c

080035e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10a      	bne.n	800360e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80035f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fc:	f383 8811 	msr	BASEPRI, r3
 8003600:	f3bf 8f6f 	isb	sy
 8003604:	f3bf 8f4f 	dsb	sy
 8003608:	60fb      	str	r3, [r7, #12]
}
 800360a:	bf00      	nop
 800360c:	e7fe      	b.n	800360c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800360e:	4b07      	ldr	r3, [pc, #28]	; (800362c <vTaskPlaceOnEventList+0x44>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	3318      	adds	r3, #24
 8003614:	4619      	mov	r1, r3
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7fe fe95 	bl	8002346 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800361c:	2101      	movs	r1, #1
 800361e:	6838      	ldr	r0, [r7, #0]
 8003620:	f000 fa80 	bl	8003b24 <prvAddCurrentTaskToDelayedList>
}
 8003624:	bf00      	nop
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	200008ac 	.word	0x200008ac

08003630 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10a      	bne.n	8003658 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003646:	f383 8811 	msr	BASEPRI, r3
 800364a:	f3bf 8f6f 	isb	sy
 800364e:	f3bf 8f4f 	dsb	sy
 8003652:	617b      	str	r3, [r7, #20]
}
 8003654:	bf00      	nop
 8003656:	e7fe      	b.n	8003656 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003658:	4b0a      	ldr	r3, [pc, #40]	; (8003684 <vTaskPlaceOnEventListRestricted+0x54>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3318      	adds	r3, #24
 800365e:	4619      	mov	r1, r3
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f7fe fe4c 	bl	80022fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d002      	beq.n	8003672 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800366c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003670:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	68b8      	ldr	r0, [r7, #8]
 8003676:	f000 fa55 	bl	8003b24 <prvAddCurrentTaskToDelayedList>
	}
 800367a:	bf00      	nop
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	200008ac 	.word	0x200008ac

08003688 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10a      	bne.n	80036b4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800369e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a2:	f383 8811 	msr	BASEPRI, r3
 80036a6:	f3bf 8f6f 	isb	sy
 80036aa:	f3bf 8f4f 	dsb	sy
 80036ae:	60fb      	str	r3, [r7, #12]
}
 80036b0:	bf00      	nop
 80036b2:	e7fe      	b.n	80036b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	3318      	adds	r3, #24
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7fe fe7d 	bl	80023b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036be:	4b1e      	ldr	r3, [pc, #120]	; (8003738 <xTaskRemoveFromEventList+0xb0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d11d      	bne.n	8003702 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	3304      	adds	r3, #4
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fe fe74 	bl	80023b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d4:	4b19      	ldr	r3, [pc, #100]	; (800373c <xTaskRemoveFromEventList+0xb4>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d903      	bls.n	80036e4 <xTaskRemoveFromEventList+0x5c>
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e0:	4a16      	ldr	r2, [pc, #88]	; (800373c <xTaskRemoveFromEventList+0xb4>)
 80036e2:	6013      	str	r3, [r2, #0]
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e8:	4613      	mov	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4a13      	ldr	r2, [pc, #76]	; (8003740 <xTaskRemoveFromEventList+0xb8>)
 80036f2:	441a      	add	r2, r3
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	3304      	adds	r3, #4
 80036f8:	4619      	mov	r1, r3
 80036fa:	4610      	mov	r0, r2
 80036fc:	f7fe fdff 	bl	80022fe <vListInsertEnd>
 8003700:	e005      	b.n	800370e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	3318      	adds	r3, #24
 8003706:	4619      	mov	r1, r3
 8003708:	480e      	ldr	r0, [pc, #56]	; (8003744 <xTaskRemoveFromEventList+0xbc>)
 800370a:	f7fe fdf8 	bl	80022fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003712:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <xTaskRemoveFromEventList+0xc0>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	429a      	cmp	r2, r3
 800371a:	d905      	bls.n	8003728 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800371c:	2301      	movs	r3, #1
 800371e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003720:	4b0a      	ldr	r3, [pc, #40]	; (800374c <xTaskRemoveFromEventList+0xc4>)
 8003722:	2201      	movs	r2, #1
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	e001      	b.n	800372c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003728:	2300      	movs	r3, #0
 800372a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800372c:	697b      	ldr	r3, [r7, #20]
}
 800372e:	4618      	mov	r0, r3
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	20000da8 	.word	0x20000da8
 800373c:	20000d88 	.word	0x20000d88
 8003740:	200008b0 	.word	0x200008b0
 8003744:	20000d40 	.word	0x20000d40
 8003748:	200008ac 	.word	0x200008ac
 800374c:	20000d94 	.word	0x20000d94

08003750 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003758:	4b06      	ldr	r3, [pc, #24]	; (8003774 <vTaskInternalSetTimeOutState+0x24>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003760:	4b05      	ldr	r3, [pc, #20]	; (8003778 <vTaskInternalSetTimeOutState+0x28>)
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	605a      	str	r2, [r3, #4]
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	20000d98 	.word	0x20000d98
 8003778:	20000d84 	.word	0x20000d84

0800377c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b088      	sub	sp, #32
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10a      	bne.n	80037a2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800378c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003790:	f383 8811 	msr	BASEPRI, r3
 8003794:	f3bf 8f6f 	isb	sy
 8003798:	f3bf 8f4f 	dsb	sy
 800379c:	613b      	str	r3, [r7, #16]
}
 800379e:	bf00      	nop
 80037a0:	e7fe      	b.n	80037a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10a      	bne.n	80037be <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80037a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ac:	f383 8811 	msr	BASEPRI, r3
 80037b0:	f3bf 8f6f 	isb	sy
 80037b4:	f3bf 8f4f 	dsb	sy
 80037b8:	60fb      	str	r3, [r7, #12]
}
 80037ba:	bf00      	nop
 80037bc:	e7fe      	b.n	80037bc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80037be:	f000 fe81 	bl	80044c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80037c2:	4b1d      	ldr	r3, [pc, #116]	; (8003838 <xTaskCheckForTimeOut+0xbc>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037da:	d102      	bne.n	80037e2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80037dc:	2300      	movs	r3, #0
 80037de:	61fb      	str	r3, [r7, #28]
 80037e0:	e023      	b.n	800382a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	4b15      	ldr	r3, [pc, #84]	; (800383c <xTaskCheckForTimeOut+0xc0>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d007      	beq.n	80037fe <xTaskCheckForTimeOut+0x82>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d302      	bcc.n	80037fe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80037f8:	2301      	movs	r3, #1
 80037fa:	61fb      	str	r3, [r7, #28]
 80037fc:	e015      	b.n	800382a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	429a      	cmp	r2, r3
 8003806:	d20b      	bcs.n	8003820 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	1ad2      	subs	r2, r2, r3
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7ff ff9b 	bl	8003750 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800381a:	2300      	movs	r3, #0
 800381c:	61fb      	str	r3, [r7, #28]
 800381e:	e004      	b.n	800382a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003826:	2301      	movs	r3, #1
 8003828:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800382a:	f000 fe7b 	bl	8004524 <vPortExitCritical>

	return xReturn;
 800382e:	69fb      	ldr	r3, [r7, #28]
}
 8003830:	4618      	mov	r0, r3
 8003832:	3720      	adds	r7, #32
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	20000d84 	.word	0x20000d84
 800383c:	20000d98 	.word	0x20000d98

08003840 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003844:	4b03      	ldr	r3, [pc, #12]	; (8003854 <vTaskMissedYield+0x14>)
 8003846:	2201      	movs	r2, #1
 8003848:	601a      	str	r2, [r3, #0]
}
 800384a:	bf00      	nop
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	20000d94 	.word	0x20000d94

08003858 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003860:	f000 f852 	bl	8003908 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003864:	4b06      	ldr	r3, [pc, #24]	; (8003880 <prvIdleTask+0x28>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d9f9      	bls.n	8003860 <prvIdleTask+0x8>
			{
				taskYIELD();
 800386c:	4b05      	ldr	r3, [pc, #20]	; (8003884 <prvIdleTask+0x2c>)
 800386e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800387c:	e7f0      	b.n	8003860 <prvIdleTask+0x8>
 800387e:	bf00      	nop
 8003880:	200008b0 	.word	0x200008b0
 8003884:	e000ed04 	.word	0xe000ed04

08003888 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800388e:	2300      	movs	r3, #0
 8003890:	607b      	str	r3, [r7, #4]
 8003892:	e00c      	b.n	80038ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	4613      	mov	r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4413      	add	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4a12      	ldr	r2, [pc, #72]	; (80038e8 <prvInitialiseTaskLists+0x60>)
 80038a0:	4413      	add	r3, r2
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fe fcfe 	bl	80022a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3301      	adds	r3, #1
 80038ac:	607b      	str	r3, [r7, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b37      	cmp	r3, #55	; 0x37
 80038b2:	d9ef      	bls.n	8003894 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80038b4:	480d      	ldr	r0, [pc, #52]	; (80038ec <prvInitialiseTaskLists+0x64>)
 80038b6:	f7fe fcf5 	bl	80022a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80038ba:	480d      	ldr	r0, [pc, #52]	; (80038f0 <prvInitialiseTaskLists+0x68>)
 80038bc:	f7fe fcf2 	bl	80022a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80038c0:	480c      	ldr	r0, [pc, #48]	; (80038f4 <prvInitialiseTaskLists+0x6c>)
 80038c2:	f7fe fcef 	bl	80022a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80038c6:	480c      	ldr	r0, [pc, #48]	; (80038f8 <prvInitialiseTaskLists+0x70>)
 80038c8:	f7fe fcec 	bl	80022a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80038cc:	480b      	ldr	r0, [pc, #44]	; (80038fc <prvInitialiseTaskLists+0x74>)
 80038ce:	f7fe fce9 	bl	80022a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80038d2:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <prvInitialiseTaskLists+0x78>)
 80038d4:	4a05      	ldr	r2, [pc, #20]	; (80038ec <prvInitialiseTaskLists+0x64>)
 80038d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80038d8:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <prvInitialiseTaskLists+0x7c>)
 80038da:	4a05      	ldr	r2, [pc, #20]	; (80038f0 <prvInitialiseTaskLists+0x68>)
 80038dc:	601a      	str	r2, [r3, #0]
}
 80038de:	bf00      	nop
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	200008b0 	.word	0x200008b0
 80038ec:	20000d10 	.word	0x20000d10
 80038f0:	20000d24 	.word	0x20000d24
 80038f4:	20000d40 	.word	0x20000d40
 80038f8:	20000d54 	.word	0x20000d54
 80038fc:	20000d6c 	.word	0x20000d6c
 8003900:	20000d38 	.word	0x20000d38
 8003904:	20000d3c 	.word	0x20000d3c

08003908 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800390e:	e019      	b.n	8003944 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003910:	f000 fdd8 	bl	80044c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003914:	4b10      	ldr	r3, [pc, #64]	; (8003958 <prvCheckTasksWaitingTermination+0x50>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3304      	adds	r3, #4
 8003920:	4618      	mov	r0, r3
 8003922:	f7fe fd49 	bl	80023b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003926:	4b0d      	ldr	r3, [pc, #52]	; (800395c <prvCheckTasksWaitingTermination+0x54>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	3b01      	subs	r3, #1
 800392c:	4a0b      	ldr	r2, [pc, #44]	; (800395c <prvCheckTasksWaitingTermination+0x54>)
 800392e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003930:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <prvCheckTasksWaitingTermination+0x58>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3b01      	subs	r3, #1
 8003936:	4a0a      	ldr	r2, [pc, #40]	; (8003960 <prvCheckTasksWaitingTermination+0x58>)
 8003938:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800393a:	f000 fdf3 	bl	8004524 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f810 	bl	8003964 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003944:	4b06      	ldr	r3, [pc, #24]	; (8003960 <prvCheckTasksWaitingTermination+0x58>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1e1      	bne.n	8003910 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800394c:	bf00      	nop
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000d54 	.word	0x20000d54
 800395c:	20000d80 	.word	0x20000d80
 8003960:	20000d68 	.word	0x20000d68

08003964 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3354      	adds	r3, #84	; 0x54
 8003970:	4618      	mov	r0, r3
 8003972:	f001 f8bb 	bl	8004aec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800397c:	2b00      	cmp	r3, #0
 800397e:	d108      	bne.n	8003992 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003984:	4618      	mov	r0, r3
 8003986:	f000 ff8b 	bl	80048a0 <vPortFree>
				vPortFree( pxTCB );
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 ff88 	bl	80048a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003990:	e018      	b.n	80039c4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003998:	2b01      	cmp	r3, #1
 800399a:	d103      	bne.n	80039a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 ff7f 	bl	80048a0 <vPortFree>
	}
 80039a2:	e00f      	b.n	80039c4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d00a      	beq.n	80039c4 <prvDeleteTCB+0x60>
	__asm volatile
 80039ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b2:	f383 8811 	msr	BASEPRI, r3
 80039b6:	f3bf 8f6f 	isb	sy
 80039ba:	f3bf 8f4f 	dsb	sy
 80039be:	60fb      	str	r3, [r7, #12]
}
 80039c0:	bf00      	nop
 80039c2:	e7fe      	b.n	80039c2 <prvDeleteTCB+0x5e>
	}
 80039c4:	bf00      	nop
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039d2:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <prvResetNextTaskUnblockTime+0x38>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d104      	bne.n	80039e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80039dc:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <prvResetNextTaskUnblockTime+0x3c>)
 80039de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80039e4:	e008      	b.n	80039f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039e6:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <prvResetNextTaskUnblockTime+0x38>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	4a04      	ldr	r2, [pc, #16]	; (8003a08 <prvResetNextTaskUnblockTime+0x3c>)
 80039f6:	6013      	str	r3, [r2, #0]
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	20000d38 	.word	0x20000d38
 8003a08:	20000da0 	.word	0x20000da0

08003a0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003a12:	4b0b      	ldr	r3, [pc, #44]	; (8003a40 <xTaskGetSchedulerState+0x34>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d102      	bne.n	8003a20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	607b      	str	r3, [r7, #4]
 8003a1e:	e008      	b.n	8003a32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a20:	4b08      	ldr	r3, [pc, #32]	; (8003a44 <xTaskGetSchedulerState+0x38>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d102      	bne.n	8003a2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	607b      	str	r3, [r7, #4]
 8003a2c:	e001      	b.n	8003a32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003a32:	687b      	ldr	r3, [r7, #4]
	}
 8003a34:	4618      	mov	r0, r3
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	20000d8c 	.word	0x20000d8c
 8003a44:	20000da8 	.word	0x20000da8

08003a48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003a54:	2300      	movs	r3, #0
 8003a56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d056      	beq.n	8003b0c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003a5e:	4b2e      	ldr	r3, [pc, #184]	; (8003b18 <xTaskPriorityDisinherit+0xd0>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d00a      	beq.n	8003a7e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6c:	f383 8811 	msr	BASEPRI, r3
 8003a70:	f3bf 8f6f 	isb	sy
 8003a74:	f3bf 8f4f 	dsb	sy
 8003a78:	60fb      	str	r3, [r7, #12]
}
 8003a7a:	bf00      	nop
 8003a7c:	e7fe      	b.n	8003a7c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10a      	bne.n	8003a9c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8a:	f383 8811 	msr	BASEPRI, r3
 8003a8e:	f3bf 8f6f 	isb	sy
 8003a92:	f3bf 8f4f 	dsb	sy
 8003a96:	60bb      	str	r3, [r7, #8]
}
 8003a98:	bf00      	nop
 8003a9a:	e7fe      	b.n	8003a9a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa0:	1e5a      	subs	r2, r3, #1
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d02c      	beq.n	8003b0c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d128      	bne.n	8003b0c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	3304      	adds	r3, #4
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fe fc7a 	bl	80023b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003adc:	4b0f      	ldr	r3, [pc, #60]	; (8003b1c <xTaskPriorityDisinherit+0xd4>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d903      	bls.n	8003aec <xTaskPriorityDisinherit+0xa4>
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	4a0c      	ldr	r2, [pc, #48]	; (8003b1c <xTaskPriorityDisinherit+0xd4>)
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af0:	4613      	mov	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4a09      	ldr	r2, [pc, #36]	; (8003b20 <xTaskPriorityDisinherit+0xd8>)
 8003afa:	441a      	add	r2, r3
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	3304      	adds	r3, #4
 8003b00:	4619      	mov	r1, r3
 8003b02:	4610      	mov	r0, r2
 8003b04:	f7fe fbfb 	bl	80022fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003b0c:	697b      	ldr	r3, [r7, #20]
	}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	200008ac 	.word	0x200008ac
 8003b1c:	20000d88 	.word	0x20000d88
 8003b20:	200008b0 	.word	0x200008b0

08003b24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003b2e:	4b21      	ldr	r3, [pc, #132]	; (8003bb4 <prvAddCurrentTaskToDelayedList+0x90>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b34:	4b20      	ldr	r3, [pc, #128]	; (8003bb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	3304      	adds	r3, #4
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fe fc3c 	bl	80023b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b46:	d10a      	bne.n	8003b5e <prvAddCurrentTaskToDelayedList+0x3a>
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d007      	beq.n	8003b5e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b4e:	4b1a      	ldr	r3, [pc, #104]	; (8003bb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	3304      	adds	r3, #4
 8003b54:	4619      	mov	r1, r3
 8003b56:	4819      	ldr	r0, [pc, #100]	; (8003bbc <prvAddCurrentTaskToDelayedList+0x98>)
 8003b58:	f7fe fbd1 	bl	80022fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003b5c:	e026      	b.n	8003bac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4413      	add	r3, r2
 8003b64:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b66:	4b14      	ldr	r3, [pc, #80]	; (8003bb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d209      	bcs.n	8003b8a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b76:	4b12      	ldr	r3, [pc, #72]	; (8003bc0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	4b0f      	ldr	r3, [pc, #60]	; (8003bb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	3304      	adds	r3, #4
 8003b80:	4619      	mov	r1, r3
 8003b82:	4610      	mov	r0, r2
 8003b84:	f7fe fbdf 	bl	8002346 <vListInsert>
}
 8003b88:	e010      	b.n	8003bac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b8a:	4b0e      	ldr	r3, [pc, #56]	; (8003bc4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	3304      	adds	r3, #4
 8003b94:	4619      	mov	r1, r3
 8003b96:	4610      	mov	r0, r2
 8003b98:	f7fe fbd5 	bl	8002346 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003b9c:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d202      	bcs.n	8003bac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003ba6:	4a08      	ldr	r2, [pc, #32]	; (8003bc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	6013      	str	r3, [r2, #0]
}
 8003bac:	bf00      	nop
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	20000d84 	.word	0x20000d84
 8003bb8:	200008ac 	.word	0x200008ac
 8003bbc:	20000d6c 	.word	0x20000d6c
 8003bc0:	20000d3c 	.word	0x20000d3c
 8003bc4:	20000d38 	.word	0x20000d38
 8003bc8:	20000da0 	.word	0x20000da0

08003bcc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08a      	sub	sp, #40	; 0x28
 8003bd0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003bd6:	f000 fb07 	bl	80041e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003bda:	4b1c      	ldr	r3, [pc, #112]	; (8003c4c <xTimerCreateTimerTask+0x80>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d021      	beq.n	8003c26 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003bea:	1d3a      	adds	r2, r7, #4
 8003bec:	f107 0108 	add.w	r1, r7, #8
 8003bf0:	f107 030c 	add.w	r3, r7, #12
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7fe fb3b 	bl	8002270 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	9202      	str	r2, [sp, #8]
 8003c02:	9301      	str	r3, [sp, #4]
 8003c04:	2302      	movs	r3, #2
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	2300      	movs	r3, #0
 8003c0a:	460a      	mov	r2, r1
 8003c0c:	4910      	ldr	r1, [pc, #64]	; (8003c50 <xTimerCreateTimerTask+0x84>)
 8003c0e:	4811      	ldr	r0, [pc, #68]	; (8003c54 <xTimerCreateTimerTask+0x88>)
 8003c10:	f7ff f8e8 	bl	8002de4 <xTaskCreateStatic>
 8003c14:	4603      	mov	r3, r0
 8003c16:	4a10      	ldr	r2, [pc, #64]	; (8003c58 <xTimerCreateTimerTask+0x8c>)
 8003c18:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003c1a:	4b0f      	ldr	r3, [pc, #60]	; (8003c58 <xTimerCreateTimerTask+0x8c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003c22:	2301      	movs	r3, #1
 8003c24:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10a      	bne.n	8003c42 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c30:	f383 8811 	msr	BASEPRI, r3
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	613b      	str	r3, [r7, #16]
}
 8003c3e:	bf00      	nop
 8003c40:	e7fe      	b.n	8003c40 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003c42:	697b      	ldr	r3, [r7, #20]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3718      	adds	r7, #24
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	20000ddc 	.word	0x20000ddc
 8003c50:	08004d10 	.word	0x08004d10
 8003c54:	08003d91 	.word	0x08003d91
 8003c58:	20000de0 	.word	0x20000de0

08003c5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b08a      	sub	sp, #40	; 0x28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
 8003c68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10a      	bne.n	8003c8a <xTimerGenericCommand+0x2e>
	__asm volatile
 8003c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	623b      	str	r3, [r7, #32]
}
 8003c86:	bf00      	nop
 8003c88:	e7fe      	b.n	8003c88 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003c8a:	4b1a      	ldr	r3, [pc, #104]	; (8003cf4 <xTimerGenericCommand+0x98>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d02a      	beq.n	8003ce8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	2b05      	cmp	r3, #5
 8003ca2:	dc18      	bgt.n	8003cd6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003ca4:	f7ff feb2 	bl	8003a0c <xTaskGetSchedulerState>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d109      	bne.n	8003cc2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003cae:	4b11      	ldr	r3, [pc, #68]	; (8003cf4 <xTimerGenericCommand+0x98>)
 8003cb0:	6818      	ldr	r0, [r3, #0]
 8003cb2:	f107 0110 	add.w	r1, r7, #16
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cba:	f7fe fcab 	bl	8002614 <xQueueGenericSend>
 8003cbe:	6278      	str	r0, [r7, #36]	; 0x24
 8003cc0:	e012      	b.n	8003ce8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003cc2:	4b0c      	ldr	r3, [pc, #48]	; (8003cf4 <xTimerGenericCommand+0x98>)
 8003cc4:	6818      	ldr	r0, [r3, #0]
 8003cc6:	f107 0110 	add.w	r1, r7, #16
 8003cca:	2300      	movs	r3, #0
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f7fe fca1 	bl	8002614 <xQueueGenericSend>
 8003cd2:	6278      	str	r0, [r7, #36]	; 0x24
 8003cd4:	e008      	b.n	8003ce8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003cd6:	4b07      	ldr	r3, [pc, #28]	; (8003cf4 <xTimerGenericCommand+0x98>)
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	f107 0110 	add.w	r1, r7, #16
 8003cde:	2300      	movs	r3, #0
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	f7fe fd95 	bl	8002810 <xQueueGenericSendFromISR>
 8003ce6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3728      	adds	r7, #40	; 0x28
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000ddc 	.word	0x20000ddc

08003cf8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b088      	sub	sp, #32
 8003cfc:	af02      	add	r7, sp, #8
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d02:	4b22      	ldr	r3, [pc, #136]	; (8003d8c <prvProcessExpiredTimer+0x94>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	3304      	adds	r3, #4
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7fe fb51 	bl	80023b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d022      	beq.n	8003d6a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	699a      	ldr	r2, [r3, #24]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	18d1      	adds	r1, r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	6978      	ldr	r0, [r7, #20]
 8003d32:	f000 f8d1 	bl	8003ed8 <prvInsertTimerInActiveList>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d01f      	beq.n	8003d7c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	2300      	movs	r3, #0
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	2100      	movs	r1, #0
 8003d46:	6978      	ldr	r0, [r7, #20]
 8003d48:	f7ff ff88 	bl	8003c5c <xTimerGenericCommand>
 8003d4c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d113      	bne.n	8003d7c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d58:	f383 8811 	msr	BASEPRI, r3
 8003d5c:	f3bf 8f6f 	isb	sy
 8003d60:	f3bf 8f4f 	dsb	sy
 8003d64:	60fb      	str	r3, [r7, #12]
}
 8003d66:	bf00      	nop
 8003d68:	e7fe      	b.n	8003d68 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d70:	f023 0301 	bic.w	r3, r3, #1
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	6978      	ldr	r0, [r7, #20]
 8003d82:	4798      	blx	r3
}
 8003d84:	bf00      	nop
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	20000dd4 	.word	0x20000dd4

08003d90 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d98:	f107 0308 	add.w	r3, r7, #8
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 f857 	bl	8003e50 <prvGetNextExpireTime>
 8003da2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	4619      	mov	r1, r3
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 f803 	bl	8003db4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003dae:	f000 f8d5 	bl	8003f5c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003db2:	e7f1      	b.n	8003d98 <prvTimerTask+0x8>

08003db4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003dbe:	f7ff fa39 	bl	8003234 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003dc2:	f107 0308 	add.w	r3, r7, #8
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 f866 	bl	8003e98 <prvSampleTimeNow>
 8003dcc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d130      	bne.n	8003e36 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10a      	bne.n	8003df0 <prvProcessTimerOrBlockTask+0x3c>
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d806      	bhi.n	8003df0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003de2:	f7ff fa35 	bl	8003250 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003de6:	68f9      	ldr	r1, [r7, #12]
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f7ff ff85 	bl	8003cf8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003dee:	e024      	b.n	8003e3a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d008      	beq.n	8003e08 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003df6:	4b13      	ldr	r3, [pc, #76]	; (8003e44 <prvProcessTimerOrBlockTask+0x90>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <prvProcessTimerOrBlockTask+0x50>
 8003e00:	2301      	movs	r3, #1
 8003e02:	e000      	b.n	8003e06 <prvProcessTimerOrBlockTask+0x52>
 8003e04:	2300      	movs	r3, #0
 8003e06:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003e08:	4b0f      	ldr	r3, [pc, #60]	; (8003e48 <prvProcessTimerOrBlockTask+0x94>)
 8003e0a:	6818      	ldr	r0, [r3, #0]
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	4619      	mov	r1, r3
 8003e16:	f7fe ffb1 	bl	8002d7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003e1a:	f7ff fa19 	bl	8003250 <xTaskResumeAll>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10a      	bne.n	8003e3a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003e24:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <prvProcessTimerOrBlockTask+0x98>)
 8003e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	f3bf 8f6f 	isb	sy
}
 8003e34:	e001      	b.n	8003e3a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003e36:	f7ff fa0b 	bl	8003250 <xTaskResumeAll>
}
 8003e3a:	bf00      	nop
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20000dd8 	.word	0x20000dd8
 8003e48:	20000ddc 	.word	0x20000ddc
 8003e4c:	e000ed04 	.word	0xe000ed04

08003e50 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003e58:	4b0e      	ldr	r3, [pc, #56]	; (8003e94 <prvGetNextExpireTime+0x44>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <prvGetNextExpireTime+0x16>
 8003e62:	2201      	movs	r2, #1
 8003e64:	e000      	b.n	8003e68 <prvGetNextExpireTime+0x18>
 8003e66:	2200      	movs	r2, #0
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d105      	bne.n	8003e80 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e74:	4b07      	ldr	r3, [pc, #28]	; (8003e94 <prvGetNextExpireTime+0x44>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	e001      	b.n	8003e84 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003e84:	68fb      	ldr	r3, [r7, #12]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	20000dd4 	.word	0x20000dd4

08003e98 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003ea0:	f7ff fa74 	bl	800338c <xTaskGetTickCount>
 8003ea4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003ea6:	4b0b      	ldr	r3, [pc, #44]	; (8003ed4 <prvSampleTimeNow+0x3c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d205      	bcs.n	8003ebc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003eb0:	f000 f936 	bl	8004120 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	e002      	b.n	8003ec2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003ec2:	4a04      	ldr	r2, [pc, #16]	; (8003ed4 <prvSampleTimeNow+0x3c>)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	20000de4 	.word	0x20000de4

08003ed8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
 8003ee4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d812      	bhi.n	8003f24 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	1ad2      	subs	r2, r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d302      	bcc.n	8003f12 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	617b      	str	r3, [r7, #20]
 8003f10:	e01b      	b.n	8003f4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003f12:	4b10      	ldr	r3, [pc, #64]	; (8003f54 <prvInsertTimerInActiveList+0x7c>)
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	3304      	adds	r3, #4
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	f7fe fa12 	bl	8002346 <vListInsert>
 8003f22:	e012      	b.n	8003f4a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d206      	bcs.n	8003f3a <prvInsertTimerInActiveList+0x62>
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d302      	bcc.n	8003f3a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003f34:	2301      	movs	r3, #1
 8003f36:	617b      	str	r3, [r7, #20]
 8003f38:	e007      	b.n	8003f4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f3a:	4b07      	ldr	r3, [pc, #28]	; (8003f58 <prvInsertTimerInActiveList+0x80>)
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	3304      	adds	r3, #4
 8003f42:	4619      	mov	r1, r3
 8003f44:	4610      	mov	r0, r2
 8003f46:	f7fe f9fe 	bl	8002346 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003f4a:	697b      	ldr	r3, [r7, #20]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	20000dd8 	.word	0x20000dd8
 8003f58:	20000dd4 	.word	0x20000dd4

08003f5c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08e      	sub	sp, #56	; 0x38
 8003f60:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f62:	e0ca      	b.n	80040fa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	da18      	bge.n	8003f9c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003f6a:	1d3b      	adds	r3, r7, #4
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10a      	bne.n	8003f8c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7a:	f383 8811 	msr	BASEPRI, r3
 8003f7e:	f3bf 8f6f 	isb	sy
 8003f82:	f3bf 8f4f 	dsb	sy
 8003f86:	61fb      	str	r3, [r7, #28]
}
 8003f88:	bf00      	nop
 8003f8a:	e7fe      	b.n	8003f8a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f92:	6850      	ldr	r0, [r2, #4]
 8003f94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f96:	6892      	ldr	r2, [r2, #8]
 8003f98:	4611      	mov	r1, r2
 8003f9a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f2c0 80ab 	blt.w	80040fa <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d004      	beq.n	8003fba <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7fe f9ff 	bl	80023b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003fba:	463b      	mov	r3, r7
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff ff6b 	bl	8003e98 <prvSampleTimeNow>
 8003fc2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b09      	cmp	r3, #9
 8003fc8:	f200 8096 	bhi.w	80040f8 <prvProcessReceivedCommands+0x19c>
 8003fcc:	a201      	add	r2, pc, #4	; (adr r2, 8003fd4 <prvProcessReceivedCommands+0x78>)
 8003fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd2:	bf00      	nop
 8003fd4:	08003ffd 	.word	0x08003ffd
 8003fd8:	08003ffd 	.word	0x08003ffd
 8003fdc:	08003ffd 	.word	0x08003ffd
 8003fe0:	08004071 	.word	0x08004071
 8003fe4:	08004085 	.word	0x08004085
 8003fe8:	080040cf 	.word	0x080040cf
 8003fec:	08003ffd 	.word	0x08003ffd
 8003ff0:	08003ffd 	.word	0x08003ffd
 8003ff4:	08004071 	.word	0x08004071
 8003ff8:	08004085 	.word	0x08004085
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004002:	f043 0301 	orr.w	r3, r3, #1
 8004006:	b2da      	uxtb	r2, r3
 8004008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	18d1      	adds	r1, r2, r3
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800401a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800401c:	f7ff ff5c 	bl	8003ed8 <prvInsertTimerInActiveList>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d069      	beq.n	80040fa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800402c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800402e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004030:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004034:	f003 0304 	and.w	r3, r3, #4
 8004038:	2b00      	cmp	r3, #0
 800403a:	d05e      	beq.n	80040fa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	441a      	add	r2, r3
 8004044:	2300      	movs	r3, #0
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	2300      	movs	r3, #0
 800404a:	2100      	movs	r1, #0
 800404c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800404e:	f7ff fe05 	bl	8003c5c <xTimerGenericCommand>
 8004052:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d14f      	bne.n	80040fa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800405a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405e:	f383 8811 	msr	BASEPRI, r3
 8004062:	f3bf 8f6f 	isb	sy
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	61bb      	str	r3, [r7, #24]
}
 800406c:	bf00      	nop
 800406e:	e7fe      	b.n	800406e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004072:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004076:	f023 0301 	bic.w	r3, r3, #1
 800407a:	b2da      	uxtb	r2, r3
 800407c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004082:	e03a      	b.n	80040fa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004086:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800408a:	f043 0301 	orr.w	r3, r3, #1
 800408e:	b2da      	uxtb	r2, r3
 8004090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004092:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800409c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10a      	bne.n	80040ba <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80040a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a8:	f383 8811 	msr	BASEPRI, r3
 80040ac:	f3bf 8f6f 	isb	sy
 80040b0:	f3bf 8f4f 	dsb	sy
 80040b4:	617b      	str	r3, [r7, #20]
}
 80040b6:	bf00      	nop
 80040b8:	e7fe      	b.n	80040b8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80040ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040bc:	699a      	ldr	r2, [r3, #24]
 80040be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c0:	18d1      	adds	r1, r2, r3
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040c8:	f7ff ff06 	bl	8003ed8 <prvInsertTimerInActiveList>
					break;
 80040cc:	e015      	b.n	80040fa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80040ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d103      	bne.n	80040e4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80040dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040de:	f000 fbdf 	bl	80048a0 <vPortFree>
 80040e2:	e00a      	b.n	80040fa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80040e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040ea:	f023 0301 	bic.w	r3, r3, #1
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80040f6:	e000      	b.n	80040fa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80040f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040fa:	4b08      	ldr	r3, [pc, #32]	; (800411c <prvProcessReceivedCommands+0x1c0>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	1d39      	adds	r1, r7, #4
 8004100:	2200      	movs	r2, #0
 8004102:	4618      	mov	r0, r3
 8004104:	f7fe fc20 	bl	8002948 <xQueueReceive>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	f47f af2a 	bne.w	8003f64 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004110:	bf00      	nop
 8004112:	bf00      	nop
 8004114:	3730      	adds	r7, #48	; 0x30
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	20000ddc 	.word	0x20000ddc

08004120 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b088      	sub	sp, #32
 8004124:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004126:	e048      	b.n	80041ba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004128:	4b2d      	ldr	r3, [pc, #180]	; (80041e0 <prvSwitchTimerLists+0xc0>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004132:	4b2b      	ldr	r3, [pc, #172]	; (80041e0 <prvSwitchTimerLists+0xc0>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	3304      	adds	r3, #4
 8004140:	4618      	mov	r0, r3
 8004142:	f7fe f939 	bl	80023b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b00      	cmp	r3, #0
 800415a:	d02e      	beq.n	80041ba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	4413      	add	r3, r2
 8004164:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	429a      	cmp	r2, r3
 800416c:	d90e      	bls.n	800418c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800417a:	4b19      	ldr	r3, [pc, #100]	; (80041e0 <prvSwitchTimerLists+0xc0>)
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	3304      	adds	r3, #4
 8004182:	4619      	mov	r1, r3
 8004184:	4610      	mov	r0, r2
 8004186:	f7fe f8de 	bl	8002346 <vListInsert>
 800418a:	e016      	b.n	80041ba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800418c:	2300      	movs	r3, #0
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	2300      	movs	r3, #0
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	2100      	movs	r1, #0
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f7ff fd60 	bl	8003c5c <xTimerGenericCommand>
 800419c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10a      	bne.n	80041ba <prvSwitchTimerLists+0x9a>
	__asm volatile
 80041a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	603b      	str	r3, [r7, #0]
}
 80041b6:	bf00      	nop
 80041b8:	e7fe      	b.n	80041b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80041ba:	4b09      	ldr	r3, [pc, #36]	; (80041e0 <prvSwitchTimerLists+0xc0>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1b1      	bne.n	8004128 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80041c4:	4b06      	ldr	r3, [pc, #24]	; (80041e0 <prvSwitchTimerLists+0xc0>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80041ca:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <prvSwitchTimerLists+0xc4>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a04      	ldr	r2, [pc, #16]	; (80041e0 <prvSwitchTimerLists+0xc0>)
 80041d0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80041d2:	4a04      	ldr	r2, [pc, #16]	; (80041e4 <prvSwitchTimerLists+0xc4>)
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	6013      	str	r3, [r2, #0]
}
 80041d8:	bf00      	nop
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	20000dd4 	.word	0x20000dd4
 80041e4:	20000dd8 	.word	0x20000dd8

080041e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80041ee:	f000 f969 	bl	80044c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80041f2:	4b15      	ldr	r3, [pc, #84]	; (8004248 <prvCheckForValidListAndQueue+0x60>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d120      	bne.n	800423c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80041fa:	4814      	ldr	r0, [pc, #80]	; (800424c <prvCheckForValidListAndQueue+0x64>)
 80041fc:	f7fe f852 	bl	80022a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004200:	4813      	ldr	r0, [pc, #76]	; (8004250 <prvCheckForValidListAndQueue+0x68>)
 8004202:	f7fe f84f 	bl	80022a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004206:	4b13      	ldr	r3, [pc, #76]	; (8004254 <prvCheckForValidListAndQueue+0x6c>)
 8004208:	4a10      	ldr	r2, [pc, #64]	; (800424c <prvCheckForValidListAndQueue+0x64>)
 800420a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800420c:	4b12      	ldr	r3, [pc, #72]	; (8004258 <prvCheckForValidListAndQueue+0x70>)
 800420e:	4a10      	ldr	r2, [pc, #64]	; (8004250 <prvCheckForValidListAndQueue+0x68>)
 8004210:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004212:	2300      	movs	r3, #0
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	4b11      	ldr	r3, [pc, #68]	; (800425c <prvCheckForValidListAndQueue+0x74>)
 8004218:	4a11      	ldr	r2, [pc, #68]	; (8004260 <prvCheckForValidListAndQueue+0x78>)
 800421a:	2110      	movs	r1, #16
 800421c:	200a      	movs	r0, #10
 800421e:	f7fe f95d 	bl	80024dc <xQueueGenericCreateStatic>
 8004222:	4603      	mov	r3, r0
 8004224:	4a08      	ldr	r2, [pc, #32]	; (8004248 <prvCheckForValidListAndQueue+0x60>)
 8004226:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004228:	4b07      	ldr	r3, [pc, #28]	; (8004248 <prvCheckForValidListAndQueue+0x60>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d005      	beq.n	800423c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004230:	4b05      	ldr	r3, [pc, #20]	; (8004248 <prvCheckForValidListAndQueue+0x60>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	490b      	ldr	r1, [pc, #44]	; (8004264 <prvCheckForValidListAndQueue+0x7c>)
 8004236:	4618      	mov	r0, r3
 8004238:	f7fe fd76 	bl	8002d28 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800423c:	f000 f972 	bl	8004524 <vPortExitCritical>
}
 8004240:	bf00      	nop
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	20000ddc 	.word	0x20000ddc
 800424c:	20000dac 	.word	0x20000dac
 8004250:	20000dc0 	.word	0x20000dc0
 8004254:	20000dd4 	.word	0x20000dd4
 8004258:	20000dd8 	.word	0x20000dd8
 800425c:	20000e88 	.word	0x20000e88
 8004260:	20000de8 	.word	0x20000de8
 8004264:	08004d18 	.word	0x08004d18

08004268 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	3b04      	subs	r3, #4
 8004278:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004280:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	3b04      	subs	r3, #4
 8004286:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f023 0201 	bic.w	r2, r3, #1
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	3b04      	subs	r3, #4
 8004296:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004298:	4a0c      	ldr	r2, [pc, #48]	; (80042cc <pxPortInitialiseStack+0x64>)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	3b14      	subs	r3, #20
 80042a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	3b04      	subs	r3, #4
 80042ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f06f 0202 	mvn.w	r2, #2
 80042b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	3b20      	subs	r3, #32
 80042bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80042be:	68fb      	ldr	r3, [r7, #12]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3714      	adds	r7, #20
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	080042d1 	.word	0x080042d1

080042d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80042d6:	2300      	movs	r3, #0
 80042d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80042da:	4b12      	ldr	r3, [pc, #72]	; (8004324 <prvTaskExitError+0x54>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042e2:	d00a      	beq.n	80042fa <prvTaskExitError+0x2a>
	__asm volatile
 80042e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e8:	f383 8811 	msr	BASEPRI, r3
 80042ec:	f3bf 8f6f 	isb	sy
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	60fb      	str	r3, [r7, #12]
}
 80042f6:	bf00      	nop
 80042f8:	e7fe      	b.n	80042f8 <prvTaskExitError+0x28>
	__asm volatile
 80042fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fe:	f383 8811 	msr	BASEPRI, r3
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	60bb      	str	r3, [r7, #8]
}
 800430c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800430e:	bf00      	nop
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0fc      	beq.n	8004310 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004316:	bf00      	nop
 8004318:	bf00      	nop
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	2000000c 	.word	0x2000000c
	...

08004330 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004330:	4b07      	ldr	r3, [pc, #28]	; (8004350 <pxCurrentTCBConst2>)
 8004332:	6819      	ldr	r1, [r3, #0]
 8004334:	6808      	ldr	r0, [r1, #0]
 8004336:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800433a:	f380 8809 	msr	PSP, r0
 800433e:	f3bf 8f6f 	isb	sy
 8004342:	f04f 0000 	mov.w	r0, #0
 8004346:	f380 8811 	msr	BASEPRI, r0
 800434a:	4770      	bx	lr
 800434c:	f3af 8000 	nop.w

08004350 <pxCurrentTCBConst2>:
 8004350:	200008ac 	.word	0x200008ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004354:	bf00      	nop
 8004356:	bf00      	nop

08004358 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004358:	4808      	ldr	r0, [pc, #32]	; (800437c <prvPortStartFirstTask+0x24>)
 800435a:	6800      	ldr	r0, [r0, #0]
 800435c:	6800      	ldr	r0, [r0, #0]
 800435e:	f380 8808 	msr	MSP, r0
 8004362:	f04f 0000 	mov.w	r0, #0
 8004366:	f380 8814 	msr	CONTROL, r0
 800436a:	b662      	cpsie	i
 800436c:	b661      	cpsie	f
 800436e:	f3bf 8f4f 	dsb	sy
 8004372:	f3bf 8f6f 	isb	sy
 8004376:	df00      	svc	0
 8004378:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800437a:	bf00      	nop
 800437c:	e000ed08 	.word	0xe000ed08

08004380 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004386:	4b46      	ldr	r3, [pc, #280]	; (80044a0 <xPortStartScheduler+0x120>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a46      	ldr	r2, [pc, #280]	; (80044a4 <xPortStartScheduler+0x124>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d10a      	bne.n	80043a6 <xPortStartScheduler+0x26>
	__asm volatile
 8004390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004394:	f383 8811 	msr	BASEPRI, r3
 8004398:	f3bf 8f6f 	isb	sy
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	613b      	str	r3, [r7, #16]
}
 80043a2:	bf00      	nop
 80043a4:	e7fe      	b.n	80043a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80043a6:	4b3e      	ldr	r3, [pc, #248]	; (80044a0 <xPortStartScheduler+0x120>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a3f      	ldr	r2, [pc, #252]	; (80044a8 <xPortStartScheduler+0x128>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d10a      	bne.n	80043c6 <xPortStartScheduler+0x46>
	__asm volatile
 80043b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b4:	f383 8811 	msr	BASEPRI, r3
 80043b8:	f3bf 8f6f 	isb	sy
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	60fb      	str	r3, [r7, #12]
}
 80043c2:	bf00      	nop
 80043c4:	e7fe      	b.n	80043c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80043c6:	4b39      	ldr	r3, [pc, #228]	; (80044ac <xPortStartScheduler+0x12c>)
 80043c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	22ff      	movs	r2, #255	; 0xff
 80043d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80043e0:	78fb      	ldrb	r3, [r7, #3]
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	4b31      	ldr	r3, [pc, #196]	; (80044b0 <xPortStartScheduler+0x130>)
 80043ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80043ee:	4b31      	ldr	r3, [pc, #196]	; (80044b4 <xPortStartScheduler+0x134>)
 80043f0:	2207      	movs	r2, #7
 80043f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043f4:	e009      	b.n	800440a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80043f6:	4b2f      	ldr	r3, [pc, #188]	; (80044b4 <xPortStartScheduler+0x134>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	3b01      	subs	r3, #1
 80043fc:	4a2d      	ldr	r2, [pc, #180]	; (80044b4 <xPortStartScheduler+0x134>)
 80043fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004400:	78fb      	ldrb	r3, [r7, #3]
 8004402:	b2db      	uxtb	r3, r3
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	b2db      	uxtb	r3, r3
 8004408:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800440a:	78fb      	ldrb	r3, [r7, #3]
 800440c:	b2db      	uxtb	r3, r3
 800440e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004412:	2b80      	cmp	r3, #128	; 0x80
 8004414:	d0ef      	beq.n	80043f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004416:	4b27      	ldr	r3, [pc, #156]	; (80044b4 <xPortStartScheduler+0x134>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f1c3 0307 	rsb	r3, r3, #7
 800441e:	2b04      	cmp	r3, #4
 8004420:	d00a      	beq.n	8004438 <xPortStartScheduler+0xb8>
	__asm volatile
 8004422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004426:	f383 8811 	msr	BASEPRI, r3
 800442a:	f3bf 8f6f 	isb	sy
 800442e:	f3bf 8f4f 	dsb	sy
 8004432:	60bb      	str	r3, [r7, #8]
}
 8004434:	bf00      	nop
 8004436:	e7fe      	b.n	8004436 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004438:	4b1e      	ldr	r3, [pc, #120]	; (80044b4 <xPortStartScheduler+0x134>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	021b      	lsls	r3, r3, #8
 800443e:	4a1d      	ldr	r2, [pc, #116]	; (80044b4 <xPortStartScheduler+0x134>)
 8004440:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004442:	4b1c      	ldr	r3, [pc, #112]	; (80044b4 <xPortStartScheduler+0x134>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800444a:	4a1a      	ldr	r2, [pc, #104]	; (80044b4 <xPortStartScheduler+0x134>)
 800444c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	b2da      	uxtb	r2, r3
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004456:	4b18      	ldr	r3, [pc, #96]	; (80044b8 <xPortStartScheduler+0x138>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a17      	ldr	r2, [pc, #92]	; (80044b8 <xPortStartScheduler+0x138>)
 800445c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004460:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004462:	4b15      	ldr	r3, [pc, #84]	; (80044b8 <xPortStartScheduler+0x138>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a14      	ldr	r2, [pc, #80]	; (80044b8 <xPortStartScheduler+0x138>)
 8004468:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800446c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800446e:	f000 f8dd 	bl	800462c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004472:	4b12      	ldr	r3, [pc, #72]	; (80044bc <xPortStartScheduler+0x13c>)
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004478:	f000 f8fc 	bl	8004674 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800447c:	4b10      	ldr	r3, [pc, #64]	; (80044c0 <xPortStartScheduler+0x140>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a0f      	ldr	r2, [pc, #60]	; (80044c0 <xPortStartScheduler+0x140>)
 8004482:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004486:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004488:	f7ff ff66 	bl	8004358 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800448c:	f7ff f848 	bl	8003520 <vTaskSwitchContext>
	prvTaskExitError();
 8004490:	f7ff ff1e 	bl	80042d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	e000ed00 	.word	0xe000ed00
 80044a4:	410fc271 	.word	0x410fc271
 80044a8:	410fc270 	.word	0x410fc270
 80044ac:	e000e400 	.word	0xe000e400
 80044b0:	20000ed8 	.word	0x20000ed8
 80044b4:	20000edc 	.word	0x20000edc
 80044b8:	e000ed20 	.word	0xe000ed20
 80044bc:	2000000c 	.word	0x2000000c
 80044c0:	e000ef34 	.word	0xe000ef34

080044c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
	__asm volatile
 80044ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ce:	f383 8811 	msr	BASEPRI, r3
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	607b      	str	r3, [r7, #4]
}
 80044dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80044de:	4b0f      	ldr	r3, [pc, #60]	; (800451c <vPortEnterCritical+0x58>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3301      	adds	r3, #1
 80044e4:	4a0d      	ldr	r2, [pc, #52]	; (800451c <vPortEnterCritical+0x58>)
 80044e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80044e8:	4b0c      	ldr	r3, [pc, #48]	; (800451c <vPortEnterCritical+0x58>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d10f      	bne.n	8004510 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80044f0:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <vPortEnterCritical+0x5c>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00a      	beq.n	8004510 <vPortEnterCritical+0x4c>
	__asm volatile
 80044fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fe:	f383 8811 	msr	BASEPRI, r3
 8004502:	f3bf 8f6f 	isb	sy
 8004506:	f3bf 8f4f 	dsb	sy
 800450a:	603b      	str	r3, [r7, #0]
}
 800450c:	bf00      	nop
 800450e:	e7fe      	b.n	800450e <vPortEnterCritical+0x4a>
	}
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	2000000c 	.word	0x2000000c
 8004520:	e000ed04 	.word	0xe000ed04

08004524 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800452a:	4b12      	ldr	r3, [pc, #72]	; (8004574 <vPortExitCritical+0x50>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10a      	bne.n	8004548 <vPortExitCritical+0x24>
	__asm volatile
 8004532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	607b      	str	r3, [r7, #4]
}
 8004544:	bf00      	nop
 8004546:	e7fe      	b.n	8004546 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004548:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <vPortExitCritical+0x50>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3b01      	subs	r3, #1
 800454e:	4a09      	ldr	r2, [pc, #36]	; (8004574 <vPortExitCritical+0x50>)
 8004550:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004552:	4b08      	ldr	r3, [pc, #32]	; (8004574 <vPortExitCritical+0x50>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d105      	bne.n	8004566 <vPortExitCritical+0x42>
 800455a:	2300      	movs	r3, #0
 800455c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	f383 8811 	msr	BASEPRI, r3
}
 8004564:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	2000000c 	.word	0x2000000c
	...

08004580 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004580:	f3ef 8009 	mrs	r0, PSP
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	4b15      	ldr	r3, [pc, #84]	; (80045e0 <pxCurrentTCBConst>)
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	f01e 0f10 	tst.w	lr, #16
 8004590:	bf08      	it	eq
 8004592:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004596:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800459a:	6010      	str	r0, [r2, #0]
 800459c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80045a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80045a4:	f380 8811 	msr	BASEPRI, r0
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f7fe ffb6 	bl	8003520 <vTaskSwitchContext>
 80045b4:	f04f 0000 	mov.w	r0, #0
 80045b8:	f380 8811 	msr	BASEPRI, r0
 80045bc:	bc09      	pop	{r0, r3}
 80045be:	6819      	ldr	r1, [r3, #0]
 80045c0:	6808      	ldr	r0, [r1, #0]
 80045c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045c6:	f01e 0f10 	tst.w	lr, #16
 80045ca:	bf08      	it	eq
 80045cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80045d0:	f380 8809 	msr	PSP, r0
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	f3af 8000 	nop.w

080045e0 <pxCurrentTCBConst>:
 80045e0:	200008ac 	.word	0x200008ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80045e4:	bf00      	nop
 80045e6:	bf00      	nop

080045e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
	__asm volatile
 80045ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	607b      	str	r3, [r7, #4]
}
 8004600:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004602:	f7fe fed3 	bl	80033ac <xTaskIncrementTick>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d003      	beq.n	8004614 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800460c:	4b06      	ldr	r3, [pc, #24]	; (8004628 <xPortSysTickHandler+0x40>)
 800460e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004612:	601a      	str	r2, [r3, #0]
 8004614:	2300      	movs	r3, #0
 8004616:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	f383 8811 	msr	BASEPRI, r3
}
 800461e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004620:	bf00      	nop
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	e000ed04 	.word	0xe000ed04

0800462c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800462c:	b480      	push	{r7}
 800462e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004630:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <vPortSetupTimerInterrupt+0x34>)
 8004632:	2200      	movs	r2, #0
 8004634:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004636:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <vPortSetupTimerInterrupt+0x38>)
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800463c:	4b0a      	ldr	r3, [pc, #40]	; (8004668 <vPortSetupTimerInterrupt+0x3c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a0a      	ldr	r2, [pc, #40]	; (800466c <vPortSetupTimerInterrupt+0x40>)
 8004642:	fba2 2303 	umull	r2, r3, r2, r3
 8004646:	099b      	lsrs	r3, r3, #6
 8004648:	4a09      	ldr	r2, [pc, #36]	; (8004670 <vPortSetupTimerInterrupt+0x44>)
 800464a:	3b01      	subs	r3, #1
 800464c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800464e:	4b04      	ldr	r3, [pc, #16]	; (8004660 <vPortSetupTimerInterrupt+0x34>)
 8004650:	2207      	movs	r2, #7
 8004652:	601a      	str	r2, [r3, #0]
}
 8004654:	bf00      	nop
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	e000e010 	.word	0xe000e010
 8004664:	e000e018 	.word	0xe000e018
 8004668:	20000000 	.word	0x20000000
 800466c:	10624dd3 	.word	0x10624dd3
 8004670:	e000e014 	.word	0xe000e014

08004674 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004674:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004684 <vPortEnableVFP+0x10>
 8004678:	6801      	ldr	r1, [r0, #0]
 800467a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800467e:	6001      	str	r1, [r0, #0]
 8004680:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004682:	bf00      	nop
 8004684:	e000ed88 	.word	0xe000ed88

08004688 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800468e:	f3ef 8305 	mrs	r3, IPSR
 8004692:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b0f      	cmp	r3, #15
 8004698:	d914      	bls.n	80046c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800469a:	4a17      	ldr	r2, [pc, #92]	; (80046f8 <vPortValidateInterruptPriority+0x70>)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4413      	add	r3, r2
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80046a4:	4b15      	ldr	r3, [pc, #84]	; (80046fc <vPortValidateInterruptPriority+0x74>)
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	7afa      	ldrb	r2, [r7, #11]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d20a      	bcs.n	80046c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80046ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b2:	f383 8811 	msr	BASEPRI, r3
 80046b6:	f3bf 8f6f 	isb	sy
 80046ba:	f3bf 8f4f 	dsb	sy
 80046be:	607b      	str	r3, [r7, #4]
}
 80046c0:	bf00      	nop
 80046c2:	e7fe      	b.n	80046c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80046c4:	4b0e      	ldr	r3, [pc, #56]	; (8004700 <vPortValidateInterruptPriority+0x78>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80046cc:	4b0d      	ldr	r3, [pc, #52]	; (8004704 <vPortValidateInterruptPriority+0x7c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d90a      	bls.n	80046ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80046d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d8:	f383 8811 	msr	BASEPRI, r3
 80046dc:	f3bf 8f6f 	isb	sy
 80046e0:	f3bf 8f4f 	dsb	sy
 80046e4:	603b      	str	r3, [r7, #0]
}
 80046e6:	bf00      	nop
 80046e8:	e7fe      	b.n	80046e8 <vPortValidateInterruptPriority+0x60>
	}
 80046ea:	bf00      	nop
 80046ec:	3714      	adds	r7, #20
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	e000e3f0 	.word	0xe000e3f0
 80046fc:	20000ed8 	.word	0x20000ed8
 8004700:	e000ed0c 	.word	0xe000ed0c
 8004704:	20000edc 	.word	0x20000edc

08004708 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b08a      	sub	sp, #40	; 0x28
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004710:	2300      	movs	r3, #0
 8004712:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004714:	f7fe fd8e 	bl	8003234 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004718:	4b5b      	ldr	r3, [pc, #364]	; (8004888 <pvPortMalloc+0x180>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004720:	f000 f920 	bl	8004964 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004724:	4b59      	ldr	r3, [pc, #356]	; (800488c <pvPortMalloc+0x184>)
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4013      	ands	r3, r2
 800472c:	2b00      	cmp	r3, #0
 800472e:	f040 8093 	bne.w	8004858 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d01d      	beq.n	8004774 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004738:	2208      	movs	r2, #8
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4413      	add	r3, r2
 800473e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f003 0307 	and.w	r3, r3, #7
 8004746:	2b00      	cmp	r3, #0
 8004748:	d014      	beq.n	8004774 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f023 0307 	bic.w	r3, r3, #7
 8004750:	3308      	adds	r3, #8
 8004752:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00a      	beq.n	8004774 <pvPortMalloc+0x6c>
	__asm volatile
 800475e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	617b      	str	r3, [r7, #20]
}
 8004770:	bf00      	nop
 8004772:	e7fe      	b.n	8004772 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d06e      	beq.n	8004858 <pvPortMalloc+0x150>
 800477a:	4b45      	ldr	r3, [pc, #276]	; (8004890 <pvPortMalloc+0x188>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	429a      	cmp	r2, r3
 8004782:	d869      	bhi.n	8004858 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004784:	4b43      	ldr	r3, [pc, #268]	; (8004894 <pvPortMalloc+0x18c>)
 8004786:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004788:	4b42      	ldr	r3, [pc, #264]	; (8004894 <pvPortMalloc+0x18c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800478e:	e004      	b.n	800479a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d903      	bls.n	80047ac <pvPortMalloc+0xa4>
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1f1      	bne.n	8004790 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80047ac:	4b36      	ldr	r3, [pc, #216]	; (8004888 <pvPortMalloc+0x180>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d050      	beq.n	8004858 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80047b6:	6a3b      	ldr	r3, [r7, #32]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2208      	movs	r2, #8
 80047bc:	4413      	add	r3, r2
 80047be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	1ad2      	subs	r2, r2, r3
 80047d0:	2308      	movs	r3, #8
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d91f      	bls.n	8004818 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80047d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4413      	add	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <pvPortMalloc+0xf8>
	__asm volatile
 80047ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ee:	f383 8811 	msr	BASEPRI, r3
 80047f2:	f3bf 8f6f 	isb	sy
 80047f6:	f3bf 8f4f 	dsb	sy
 80047fa:	613b      	str	r3, [r7, #16]
}
 80047fc:	bf00      	nop
 80047fe:	e7fe      	b.n	80047fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	1ad2      	subs	r2, r2, r3
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004812:	69b8      	ldr	r0, [r7, #24]
 8004814:	f000 f908 	bl	8004a28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004818:	4b1d      	ldr	r3, [pc, #116]	; (8004890 <pvPortMalloc+0x188>)
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	4a1b      	ldr	r2, [pc, #108]	; (8004890 <pvPortMalloc+0x188>)
 8004824:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004826:	4b1a      	ldr	r3, [pc, #104]	; (8004890 <pvPortMalloc+0x188>)
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	4b1b      	ldr	r3, [pc, #108]	; (8004898 <pvPortMalloc+0x190>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d203      	bcs.n	800483a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004832:	4b17      	ldr	r3, [pc, #92]	; (8004890 <pvPortMalloc+0x188>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a18      	ldr	r2, [pc, #96]	; (8004898 <pvPortMalloc+0x190>)
 8004838:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	4b13      	ldr	r3, [pc, #76]	; (800488c <pvPortMalloc+0x184>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	431a      	orrs	r2, r3
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484a:	2200      	movs	r2, #0
 800484c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800484e:	4b13      	ldr	r3, [pc, #76]	; (800489c <pvPortMalloc+0x194>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	3301      	adds	r3, #1
 8004854:	4a11      	ldr	r2, [pc, #68]	; (800489c <pvPortMalloc+0x194>)
 8004856:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004858:	f7fe fcfa 	bl	8003250 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <pvPortMalloc+0x174>
	__asm volatile
 8004866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486a:	f383 8811 	msr	BASEPRI, r3
 800486e:	f3bf 8f6f 	isb	sy
 8004872:	f3bf 8f4f 	dsb	sy
 8004876:	60fb      	str	r3, [r7, #12]
}
 8004878:	bf00      	nop
 800487a:	e7fe      	b.n	800487a <pvPortMalloc+0x172>
	return pvReturn;
 800487c:	69fb      	ldr	r3, [r7, #28]
}
 800487e:	4618      	mov	r0, r3
 8004880:	3728      	adds	r7, #40	; 0x28
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20004ae8 	.word	0x20004ae8
 800488c:	20004afc 	.word	0x20004afc
 8004890:	20004aec 	.word	0x20004aec
 8004894:	20004ae0 	.word	0x20004ae0
 8004898:	20004af0 	.word	0x20004af0
 800489c:	20004af4 	.word	0x20004af4

080048a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d04d      	beq.n	800494e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80048b2:	2308      	movs	r3, #8
 80048b4:	425b      	negs	r3, r3
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	4413      	add	r3, r2
 80048ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	4b24      	ldr	r3, [pc, #144]	; (8004958 <vPortFree+0xb8>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4013      	ands	r3, r2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10a      	bne.n	80048e4 <vPortFree+0x44>
	__asm volatile
 80048ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d2:	f383 8811 	msr	BASEPRI, r3
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	60fb      	str	r3, [r7, #12]
}
 80048e0:	bf00      	nop
 80048e2:	e7fe      	b.n	80048e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00a      	beq.n	8004902 <vPortFree+0x62>
	__asm volatile
 80048ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f0:	f383 8811 	msr	BASEPRI, r3
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	60bb      	str	r3, [r7, #8]
}
 80048fe:	bf00      	nop
 8004900:	e7fe      	b.n	8004900 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	4b14      	ldr	r3, [pc, #80]	; (8004958 <vPortFree+0xb8>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4013      	ands	r3, r2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d01e      	beq.n	800494e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d11a      	bne.n	800494e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	4b0e      	ldr	r3, [pc, #56]	; (8004958 <vPortFree+0xb8>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	43db      	mvns	r3, r3
 8004922:	401a      	ands	r2, r3
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004928:	f7fe fc84 	bl	8003234 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	4b0a      	ldr	r3, [pc, #40]	; (800495c <vPortFree+0xbc>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4413      	add	r3, r2
 8004936:	4a09      	ldr	r2, [pc, #36]	; (800495c <vPortFree+0xbc>)
 8004938:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800493a:	6938      	ldr	r0, [r7, #16]
 800493c:	f000 f874 	bl	8004a28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004940:	4b07      	ldr	r3, [pc, #28]	; (8004960 <vPortFree+0xc0>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	3301      	adds	r3, #1
 8004946:	4a06      	ldr	r2, [pc, #24]	; (8004960 <vPortFree+0xc0>)
 8004948:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800494a:	f7fe fc81 	bl	8003250 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800494e:	bf00      	nop
 8004950:	3718      	adds	r7, #24
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	20004afc 	.word	0x20004afc
 800495c:	20004aec 	.word	0x20004aec
 8004960:	20004af8 	.word	0x20004af8

08004964 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800496a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800496e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004970:	4b27      	ldr	r3, [pc, #156]	; (8004a10 <prvHeapInit+0xac>)
 8004972:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00c      	beq.n	8004998 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	3307      	adds	r3, #7
 8004982:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f023 0307 	bic.w	r3, r3, #7
 800498a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	4a1f      	ldr	r2, [pc, #124]	; (8004a10 <prvHeapInit+0xac>)
 8004994:	4413      	add	r3, r2
 8004996:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800499c:	4a1d      	ldr	r2, [pc, #116]	; (8004a14 <prvHeapInit+0xb0>)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80049a2:	4b1c      	ldr	r3, [pc, #112]	; (8004a14 <prvHeapInit+0xb0>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	4413      	add	r3, r2
 80049ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80049b0:	2208      	movs	r2, #8
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	1a9b      	subs	r3, r3, r2
 80049b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f023 0307 	bic.w	r3, r3, #7
 80049be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4a15      	ldr	r2, [pc, #84]	; (8004a18 <prvHeapInit+0xb4>)
 80049c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80049c6:	4b14      	ldr	r3, [pc, #80]	; (8004a18 <prvHeapInit+0xb4>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2200      	movs	r2, #0
 80049cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80049ce:	4b12      	ldr	r3, [pc, #72]	; (8004a18 <prvHeapInit+0xb4>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	1ad2      	subs	r2, r2, r3
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80049e4:	4b0c      	ldr	r3, [pc, #48]	; (8004a18 <prvHeapInit+0xb4>)
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	4a0a      	ldr	r2, [pc, #40]	; (8004a1c <prvHeapInit+0xb8>)
 80049f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	4a09      	ldr	r2, [pc, #36]	; (8004a20 <prvHeapInit+0xbc>)
 80049fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80049fc:	4b09      	ldr	r3, [pc, #36]	; (8004a24 <prvHeapInit+0xc0>)
 80049fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004a02:	601a      	str	r2, [r3, #0]
}
 8004a04:	bf00      	nop
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	20000ee0 	.word	0x20000ee0
 8004a14:	20004ae0 	.word	0x20004ae0
 8004a18:	20004ae8 	.word	0x20004ae8
 8004a1c:	20004af0 	.word	0x20004af0
 8004a20:	20004aec 	.word	0x20004aec
 8004a24:	20004afc 	.word	0x20004afc

08004a28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a30:	4b28      	ldr	r3, [pc, #160]	; (8004ad4 <prvInsertBlockIntoFreeList+0xac>)
 8004a32:	60fb      	str	r3, [r7, #12]
 8004a34:	e002      	b.n	8004a3c <prvInsertBlockIntoFreeList+0x14>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d8f7      	bhi.n	8004a36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	4413      	add	r3, r2
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d108      	bne.n	8004a6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	441a      	add	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	441a      	add	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d118      	bne.n	8004ab0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	4b15      	ldr	r3, [pc, #84]	; (8004ad8 <prvInsertBlockIntoFreeList+0xb0>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d00d      	beq.n	8004aa6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	441a      	add	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	e008      	b.n	8004ab8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004aa6:	4b0c      	ldr	r3, [pc, #48]	; (8004ad8 <prvInsertBlockIntoFreeList+0xb0>)
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	601a      	str	r2, [r3, #0]
 8004aae:	e003      	b.n	8004ab8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d002      	beq.n	8004ac6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ac6:	bf00      	nop
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	20004ae0 	.word	0x20004ae0
 8004ad8:	20004ae8 	.word	0x20004ae8

08004adc <memset>:
 8004adc:	4402      	add	r2, r0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d100      	bne.n	8004ae6 <memset+0xa>
 8004ae4:	4770      	bx	lr
 8004ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8004aea:	e7f9      	b.n	8004ae0 <memset+0x4>

08004aec <_reclaim_reent>:
 8004aec:	4b29      	ldr	r3, [pc, #164]	; (8004b94 <_reclaim_reent+0xa8>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4283      	cmp	r3, r0
 8004af2:	b570      	push	{r4, r5, r6, lr}
 8004af4:	4604      	mov	r4, r0
 8004af6:	d04b      	beq.n	8004b90 <_reclaim_reent+0xa4>
 8004af8:	69c3      	ldr	r3, [r0, #28]
 8004afa:	b143      	cbz	r3, 8004b0e <_reclaim_reent+0x22>
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d144      	bne.n	8004b8c <_reclaim_reent+0xa0>
 8004b02:	69e3      	ldr	r3, [r4, #28]
 8004b04:	6819      	ldr	r1, [r3, #0]
 8004b06:	b111      	cbz	r1, 8004b0e <_reclaim_reent+0x22>
 8004b08:	4620      	mov	r0, r4
 8004b0a:	f000 f879 	bl	8004c00 <_free_r>
 8004b0e:	6961      	ldr	r1, [r4, #20]
 8004b10:	b111      	cbz	r1, 8004b18 <_reclaim_reent+0x2c>
 8004b12:	4620      	mov	r0, r4
 8004b14:	f000 f874 	bl	8004c00 <_free_r>
 8004b18:	69e1      	ldr	r1, [r4, #28]
 8004b1a:	b111      	cbz	r1, 8004b22 <_reclaim_reent+0x36>
 8004b1c:	4620      	mov	r0, r4
 8004b1e:	f000 f86f 	bl	8004c00 <_free_r>
 8004b22:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004b24:	b111      	cbz	r1, 8004b2c <_reclaim_reent+0x40>
 8004b26:	4620      	mov	r0, r4
 8004b28:	f000 f86a 	bl	8004c00 <_free_r>
 8004b2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b2e:	b111      	cbz	r1, 8004b36 <_reclaim_reent+0x4a>
 8004b30:	4620      	mov	r0, r4
 8004b32:	f000 f865 	bl	8004c00 <_free_r>
 8004b36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004b38:	b111      	cbz	r1, 8004b40 <_reclaim_reent+0x54>
 8004b3a:	4620      	mov	r0, r4
 8004b3c:	f000 f860 	bl	8004c00 <_free_r>
 8004b40:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004b42:	b111      	cbz	r1, 8004b4a <_reclaim_reent+0x5e>
 8004b44:	4620      	mov	r0, r4
 8004b46:	f000 f85b 	bl	8004c00 <_free_r>
 8004b4a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004b4c:	b111      	cbz	r1, 8004b54 <_reclaim_reent+0x68>
 8004b4e:	4620      	mov	r0, r4
 8004b50:	f000 f856 	bl	8004c00 <_free_r>
 8004b54:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004b56:	b111      	cbz	r1, 8004b5e <_reclaim_reent+0x72>
 8004b58:	4620      	mov	r0, r4
 8004b5a:	f000 f851 	bl	8004c00 <_free_r>
 8004b5e:	6a23      	ldr	r3, [r4, #32]
 8004b60:	b1b3      	cbz	r3, 8004b90 <_reclaim_reent+0xa4>
 8004b62:	4620      	mov	r0, r4
 8004b64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004b68:	4718      	bx	r3
 8004b6a:	5949      	ldr	r1, [r1, r5]
 8004b6c:	b941      	cbnz	r1, 8004b80 <_reclaim_reent+0x94>
 8004b6e:	3504      	adds	r5, #4
 8004b70:	69e3      	ldr	r3, [r4, #28]
 8004b72:	2d80      	cmp	r5, #128	; 0x80
 8004b74:	68d9      	ldr	r1, [r3, #12]
 8004b76:	d1f8      	bne.n	8004b6a <_reclaim_reent+0x7e>
 8004b78:	4620      	mov	r0, r4
 8004b7a:	f000 f841 	bl	8004c00 <_free_r>
 8004b7e:	e7c0      	b.n	8004b02 <_reclaim_reent+0x16>
 8004b80:	680e      	ldr	r6, [r1, #0]
 8004b82:	4620      	mov	r0, r4
 8004b84:	f000 f83c 	bl	8004c00 <_free_r>
 8004b88:	4631      	mov	r1, r6
 8004b8a:	e7ef      	b.n	8004b6c <_reclaim_reent+0x80>
 8004b8c:	2500      	movs	r5, #0
 8004b8e:	e7ef      	b.n	8004b70 <_reclaim_reent+0x84>
 8004b90:	bd70      	pop	{r4, r5, r6, pc}
 8004b92:	bf00      	nop
 8004b94:	2000005c 	.word	0x2000005c

08004b98 <__libc_init_array>:
 8004b98:	b570      	push	{r4, r5, r6, lr}
 8004b9a:	4d0d      	ldr	r5, [pc, #52]	; (8004bd0 <__libc_init_array+0x38>)
 8004b9c:	4c0d      	ldr	r4, [pc, #52]	; (8004bd4 <__libc_init_array+0x3c>)
 8004b9e:	1b64      	subs	r4, r4, r5
 8004ba0:	10a4      	asrs	r4, r4, #2
 8004ba2:	2600      	movs	r6, #0
 8004ba4:	42a6      	cmp	r6, r4
 8004ba6:	d109      	bne.n	8004bbc <__libc_init_array+0x24>
 8004ba8:	4d0b      	ldr	r5, [pc, #44]	; (8004bd8 <__libc_init_array+0x40>)
 8004baa:	4c0c      	ldr	r4, [pc, #48]	; (8004bdc <__libc_init_array+0x44>)
 8004bac:	f000 f880 	bl	8004cb0 <_init>
 8004bb0:	1b64      	subs	r4, r4, r5
 8004bb2:	10a4      	asrs	r4, r4, #2
 8004bb4:	2600      	movs	r6, #0
 8004bb6:	42a6      	cmp	r6, r4
 8004bb8:	d105      	bne.n	8004bc6 <__libc_init_array+0x2e>
 8004bba:	bd70      	pop	{r4, r5, r6, pc}
 8004bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bc0:	4798      	blx	r3
 8004bc2:	3601      	adds	r6, #1
 8004bc4:	e7ee      	b.n	8004ba4 <__libc_init_array+0xc>
 8004bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bca:	4798      	blx	r3
 8004bcc:	3601      	adds	r6, #1
 8004bce:	e7f2      	b.n	8004bb6 <__libc_init_array+0x1e>
 8004bd0:	08004d40 	.word	0x08004d40
 8004bd4:	08004d40 	.word	0x08004d40
 8004bd8:	08004d40 	.word	0x08004d40
 8004bdc:	08004d44 	.word	0x08004d44

08004be0 <__retarget_lock_acquire_recursive>:
 8004be0:	4770      	bx	lr

08004be2 <__retarget_lock_release_recursive>:
 8004be2:	4770      	bx	lr

08004be4 <memcpy>:
 8004be4:	440a      	add	r2, r1
 8004be6:	4291      	cmp	r1, r2
 8004be8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004bec:	d100      	bne.n	8004bf0 <memcpy+0xc>
 8004bee:	4770      	bx	lr
 8004bf0:	b510      	push	{r4, lr}
 8004bf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bfa:	4291      	cmp	r1, r2
 8004bfc:	d1f9      	bne.n	8004bf2 <memcpy+0xe>
 8004bfe:	bd10      	pop	{r4, pc}

08004c00 <_free_r>:
 8004c00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c02:	2900      	cmp	r1, #0
 8004c04:	d044      	beq.n	8004c90 <_free_r+0x90>
 8004c06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c0a:	9001      	str	r0, [sp, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f1a1 0404 	sub.w	r4, r1, #4
 8004c12:	bfb8      	it	lt
 8004c14:	18e4      	addlt	r4, r4, r3
 8004c16:	f000 f83f 	bl	8004c98 <__malloc_lock>
 8004c1a:	4a1e      	ldr	r2, [pc, #120]	; (8004c94 <_free_r+0x94>)
 8004c1c:	9801      	ldr	r0, [sp, #4]
 8004c1e:	6813      	ldr	r3, [r2, #0]
 8004c20:	b933      	cbnz	r3, 8004c30 <_free_r+0x30>
 8004c22:	6063      	str	r3, [r4, #4]
 8004c24:	6014      	str	r4, [r2, #0]
 8004c26:	b003      	add	sp, #12
 8004c28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c2c:	f000 b83a 	b.w	8004ca4 <__malloc_unlock>
 8004c30:	42a3      	cmp	r3, r4
 8004c32:	d908      	bls.n	8004c46 <_free_r+0x46>
 8004c34:	6825      	ldr	r5, [r4, #0]
 8004c36:	1961      	adds	r1, r4, r5
 8004c38:	428b      	cmp	r3, r1
 8004c3a:	bf01      	itttt	eq
 8004c3c:	6819      	ldreq	r1, [r3, #0]
 8004c3e:	685b      	ldreq	r3, [r3, #4]
 8004c40:	1949      	addeq	r1, r1, r5
 8004c42:	6021      	streq	r1, [r4, #0]
 8004c44:	e7ed      	b.n	8004c22 <_free_r+0x22>
 8004c46:	461a      	mov	r2, r3
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	b10b      	cbz	r3, 8004c50 <_free_r+0x50>
 8004c4c:	42a3      	cmp	r3, r4
 8004c4e:	d9fa      	bls.n	8004c46 <_free_r+0x46>
 8004c50:	6811      	ldr	r1, [r2, #0]
 8004c52:	1855      	adds	r5, r2, r1
 8004c54:	42a5      	cmp	r5, r4
 8004c56:	d10b      	bne.n	8004c70 <_free_r+0x70>
 8004c58:	6824      	ldr	r4, [r4, #0]
 8004c5a:	4421      	add	r1, r4
 8004c5c:	1854      	adds	r4, r2, r1
 8004c5e:	42a3      	cmp	r3, r4
 8004c60:	6011      	str	r1, [r2, #0]
 8004c62:	d1e0      	bne.n	8004c26 <_free_r+0x26>
 8004c64:	681c      	ldr	r4, [r3, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	6053      	str	r3, [r2, #4]
 8004c6a:	440c      	add	r4, r1
 8004c6c:	6014      	str	r4, [r2, #0]
 8004c6e:	e7da      	b.n	8004c26 <_free_r+0x26>
 8004c70:	d902      	bls.n	8004c78 <_free_r+0x78>
 8004c72:	230c      	movs	r3, #12
 8004c74:	6003      	str	r3, [r0, #0]
 8004c76:	e7d6      	b.n	8004c26 <_free_r+0x26>
 8004c78:	6825      	ldr	r5, [r4, #0]
 8004c7a:	1961      	adds	r1, r4, r5
 8004c7c:	428b      	cmp	r3, r1
 8004c7e:	bf04      	itt	eq
 8004c80:	6819      	ldreq	r1, [r3, #0]
 8004c82:	685b      	ldreq	r3, [r3, #4]
 8004c84:	6063      	str	r3, [r4, #4]
 8004c86:	bf04      	itt	eq
 8004c88:	1949      	addeq	r1, r1, r5
 8004c8a:	6021      	streq	r1, [r4, #0]
 8004c8c:	6054      	str	r4, [r2, #4]
 8004c8e:	e7ca      	b.n	8004c26 <_free_r+0x26>
 8004c90:	b003      	add	sp, #12
 8004c92:	bd30      	pop	{r4, r5, pc}
 8004c94:	20004c3c 	.word	0x20004c3c

08004c98 <__malloc_lock>:
 8004c98:	4801      	ldr	r0, [pc, #4]	; (8004ca0 <__malloc_lock+0x8>)
 8004c9a:	f7ff bfa1 	b.w	8004be0 <__retarget_lock_acquire_recursive>
 8004c9e:	bf00      	nop
 8004ca0:	20004c38 	.word	0x20004c38

08004ca4 <__malloc_unlock>:
 8004ca4:	4801      	ldr	r0, [pc, #4]	; (8004cac <__malloc_unlock+0x8>)
 8004ca6:	f7ff bf9c 	b.w	8004be2 <__retarget_lock_release_recursive>
 8004caa:	bf00      	nop
 8004cac:	20004c38 	.word	0x20004c38

08004cb0 <_init>:
 8004cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cb2:	bf00      	nop
 8004cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cb6:	bc08      	pop	{r3}
 8004cb8:	469e      	mov	lr, r3
 8004cba:	4770      	bx	lr

08004cbc <_fini>:
 8004cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cbe:	bf00      	nop
 8004cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cc2:	bc08      	pop	{r3}
 8004cc4:	469e      	mov	lr, r3
 8004cc6:	4770      	bx	lr
