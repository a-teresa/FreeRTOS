
1_task_creation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003730  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003900  08003900  00013900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003960  08003960  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003960  08003960  00013960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003968  08003968  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003968  08003968  00013968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800396c  0800396c  0001396c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003970  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000068c  20000068  080039d8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006f4  080039d8  000206f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014044  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c67  00000000  00000000  0003411f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001210  00000000  00000000  00036d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e07  00000000  00000000  00037f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003f66  00000000  00000000  00038d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000138fa  00000000  00000000  0003cd05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a89f  00000000  00000000  000505ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005334  00000000  00000000  000daea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000e01d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080038e8 	.word	0x080038e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	080038e8 	.word	0x080038e8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
int __io_putchar(int ch);



int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0

  HAL_Init();
 80005b0:	f000 fabe 	bl	8000b30 <HAL_Init>


  SystemClock_Config();
 80005b4:	f000 f81c 	bl	80005f0 <SystemClock_Config>


  MX_GPIO_Init();
 80005b8:	f000 f8a2 	bl	8000700 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005bc:	f000 f876 	bl	80006ac <MX_USART2_UART_Init>



  while (1)
  {
	  printf("Hello from stm32 \n\r");
 80005c0:	4801      	ldr	r0, [pc, #4]	; (80005c8 <main+0x1c>)
 80005c2:	f002 fb1d 	bl	8002c00 <iprintf>
 80005c6:	e7fb      	b.n	80005c0 <main+0x14>
 80005c8:	08003900 	.word	0x08003900

080005cc <__io_putchar>:
  }

}

int __io_putchar(int ch)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t *)&ch,1,0xFFFF);
 80005d4:	1d39      	adds	r1, r7, #4
 80005d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005da:	2201      	movs	r2, #1
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <__io_putchar+0x20>)
 80005de:	f001 fc63 	bl	8001ea8 <HAL_UART_Transmit>
	return ch;
 80005e2:	687b      	ldr	r3, [r7, #4]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000084 	.word	0x20000084

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	; 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	2234      	movs	r2, #52	; 0x34
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f002 fb10 	bl	8002c24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 0308 	add.w	r3, r7, #8
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <SystemClock_Config+0xb4>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	4a21      	ldr	r2, [pc, #132]	; (80006a4 <SystemClock_Config+0xb4>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	; 0x40
 8000624:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <SystemClock_Config+0xb4>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000630:	2300      	movs	r3, #0
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <SystemClock_Config+0xb8>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a1b      	ldr	r2, [pc, #108]	; (80006a8 <SystemClock_Config+0xb8>)
 800063a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <SystemClock_Config+0xb8>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064c:	2302      	movs	r3, #2
 800064e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000654:	2310      	movs	r3, #16
 8000656:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000658:	2300      	movs	r3, #0
 800065a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 031c 	add.w	r3, r7, #28
 8000660:	4618      	mov	r0, r3
 8000662:	f000 ff0f 	bl	8001484 <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800066c:	f000 f874 	bl	8000758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000670:	230f      	movs	r3, #15
 8000672:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000674:	2300      	movs	r3, #0
 8000676:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000684:	f107 0308 	add.w	r3, r7, #8
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f000 fce8 	bl	8001060 <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000696:	f000 f85f 	bl	8000758 <Error_Handler>
  }
}
 800069a:	bf00      	nop
 800069c:	3750      	adds	r7, #80	; 0x50
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006b2:	4a12      	ldr	r2, [pc, #72]	; (80006fc <MX_USART2_UART_Init+0x50>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006e4:	f001 fb90 	bl	8001e08 <HAL_UART_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ee:	f000 f833 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000084 	.word	0x20000084
 80006fc:	40004400 	.word	0x40004400

08000700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_GPIO_Init+0x30>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a08      	ldr	r2, [pc, #32]	; (8000730 <MX_GPIO_Init+0x30>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_GPIO_Init+0x30>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800

08000734 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a04      	ldr	r2, [pc, #16]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d101      	bne.n	800074a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000746:	f000 fa15 	bl	8000b74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40010000 	.word	0x40010000

08000758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800075c:	b672      	cpsid	i
}
 800075e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000760:	e7fe      	b.n	8000760 <Error_Handler+0x8>
	...

08000764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <HAL_MspInit+0x54>)
 8000770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000772:	4a11      	ldr	r2, [pc, #68]	; (80007b8 <HAL_MspInit+0x54>)
 8000774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000778:	6453      	str	r3, [r2, #68]	; 0x44
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <HAL_MspInit+0x54>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	603b      	str	r3, [r7, #0]
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <HAL_MspInit+0x54>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078e:	4a0a      	ldr	r2, [pc, #40]	; (80007b8 <HAL_MspInit+0x54>)
 8000790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000794:	6413      	str	r3, [r2, #64]	; 0x40
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <HAL_MspInit+0x54>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	210f      	movs	r1, #15
 80007a6:	f06f 0001 	mvn.w	r0, #1
 80007aa:	f000 fabb 	bl	8000d24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800

080007bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a19      	ldr	r2, [pc, #100]	; (8000840 <HAL_UART_MspInit+0x84>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d12b      	bne.n	8000836 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <HAL_UART_MspInit+0x88>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e6:	4a17      	ldr	r2, [pc, #92]	; (8000844 <HAL_UART_MspInit+0x88>)
 80007e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ec:	6413      	str	r3, [r2, #64]	; 0x40
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <HAL_UART_MspInit+0x88>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <HAL_UART_MspInit+0x88>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a10      	ldr	r2, [pc, #64]	; (8000844 <HAL_UART_MspInit+0x88>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <HAL_UART_MspInit+0x88>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000816:	230c      	movs	r3, #12
 8000818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081a:	2302      	movs	r3, #2
 800081c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000822:	2303      	movs	r3, #3
 8000824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000826:	2307      	movs	r3, #7
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	4805      	ldr	r0, [pc, #20]	; (8000848 <HAL_UART_MspInit+0x8c>)
 8000832:	f000 faa1 	bl	8000d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000836:	bf00      	nop
 8000838:	3728      	adds	r7, #40	; 0x28
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40004400 	.word	0x40004400
 8000844:	40023800 	.word	0x40023800
 8000848:	40020000 	.word	0x40020000

0800084c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08c      	sub	sp, #48	; 0x30
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000854:	2300      	movs	r3, #0
 8000856:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800085c:	2300      	movs	r3, #0
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	4b2e      	ldr	r3, [pc, #184]	; (800091c <HAL_InitTick+0xd0>)
 8000862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000864:	4a2d      	ldr	r2, [pc, #180]	; (800091c <HAL_InitTick+0xd0>)
 8000866:	f043 0301 	orr.w	r3, r3, #1
 800086a:	6453      	str	r3, [r2, #68]	; 0x44
 800086c:	4b2b      	ldr	r3, [pc, #172]	; (800091c <HAL_InitTick+0xd0>)
 800086e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000870:	f003 0301 	and.w	r3, r3, #1
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000878:	f107 020c 	add.w	r2, r7, #12
 800087c:	f107 0310 	add.w	r3, r7, #16
 8000880:	4611      	mov	r1, r2
 8000882:	4618      	mov	r0, r3
 8000884:	f000 fdcc 	bl	8001420 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000888:	f000 fdb6 	bl	80013f8 <HAL_RCC_GetPCLK2Freq>
 800088c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800088e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000890:	4a23      	ldr	r2, [pc, #140]	; (8000920 <HAL_InitTick+0xd4>)
 8000892:	fba2 2303 	umull	r2, r3, r2, r3
 8000896:	0c9b      	lsrs	r3, r3, #18
 8000898:	3b01      	subs	r3, #1
 800089a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800089c:	4b21      	ldr	r3, [pc, #132]	; (8000924 <HAL_InitTick+0xd8>)
 800089e:	4a22      	ldr	r2, [pc, #136]	; (8000928 <HAL_InitTick+0xdc>)
 80008a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008a2:	4b20      	ldr	r3, [pc, #128]	; (8000924 <HAL_InitTick+0xd8>)
 80008a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008a8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008aa:	4a1e      	ldr	r2, [pc, #120]	; (8000924 <HAL_InitTick+0xd8>)
 80008ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ae:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008b0:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <HAL_InitTick+0xd8>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b6:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <HAL_InitTick+0xd8>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008bc:	4b19      	ldr	r3, [pc, #100]	; (8000924 <HAL_InitTick+0xd8>)
 80008be:	2200      	movs	r2, #0
 80008c0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80008c2:	4818      	ldr	r0, [pc, #96]	; (8000924 <HAL_InitTick+0xd8>)
 80008c4:	f001 f862 	bl	800198c <HAL_TIM_Base_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80008ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d11b      	bne.n	800090e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80008d6:	4813      	ldr	r0, [pc, #76]	; (8000924 <HAL_InitTick+0xd8>)
 80008d8:	f001 f8b2 	bl	8001a40 <HAL_TIM_Base_Start_IT>
 80008dc:	4603      	mov	r3, r0
 80008de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80008e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d111      	bne.n	800090e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80008ea:	2019      	movs	r0, #25
 80008ec:	f000 fa36 	bl	8000d5c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2b0f      	cmp	r3, #15
 80008f4:	d808      	bhi.n	8000908 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80008f6:	2200      	movs	r2, #0
 80008f8:	6879      	ldr	r1, [r7, #4]
 80008fa:	2019      	movs	r0, #25
 80008fc:	f000 fa12 	bl	8000d24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000900:	4a0a      	ldr	r2, [pc, #40]	; (800092c <HAL_InitTick+0xe0>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6013      	str	r3, [r2, #0]
 8000906:	e002      	b.n	800090e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000908:	2301      	movs	r3, #1
 800090a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800090e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000912:	4618      	mov	r0, r3
 8000914:	3730      	adds	r7, #48	; 0x30
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800
 8000920:	431bde83 	.word	0x431bde83
 8000924:	200000cc 	.word	0x200000cc
 8000928:	40010000 	.word	0x40010000
 800092c:	20000004 	.word	0x20000004

08000930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000934:	e7fe      	b.n	8000934 <NMI_Handler+0x4>

08000936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <HardFault_Handler+0x4>

0800093c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <MemManage_Handler+0x4>

08000942 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094c:	e7fe      	b.n	800094c <UsageFault_Handler+0x4>

0800094e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000960:	4802      	ldr	r0, [pc, #8]	; (800096c <TIM1_UP_IRQHandler+0x10>)
 8000962:	f001 f8bb 	bl	8001adc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200000cc 	.word	0x200000cc

08000970 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	e00a      	b.n	8000998 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000982:	f3af 8000 	nop.w
 8000986:	4601      	mov	r1, r0
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	60ba      	str	r2, [r7, #8]
 800098e:	b2ca      	uxtb	r2, r1
 8000990:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	3301      	adds	r3, #1
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	697a      	ldr	r2, [r7, #20]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	429a      	cmp	r2, r3
 800099e:	dbf0      	blt.n	8000982 <_read+0x12>
  }

  return len;
 80009a0:	687b      	ldr	r3, [r7, #4]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b086      	sub	sp, #24
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	60f8      	str	r0, [r7, #12]
 80009b2:	60b9      	str	r1, [r7, #8]
 80009b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
 80009ba:	e009      	b.n	80009d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	1c5a      	adds	r2, r3, #1
 80009c0:	60ba      	str	r2, [r7, #8]
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fe01 	bl	80005cc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	3301      	adds	r3, #1
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697a      	ldr	r2, [r7, #20]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	dbf1      	blt.n	80009bc <_write+0x12>
  }
  return len;
 80009d8:	687b      	ldr	r3, [r7, #4]
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <_close>:

int _close(int file)
{
 80009e2:	b480      	push	{r7}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009fa:	b480      	push	{r7}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
 8000a02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a0a:	605a      	str	r2, [r3, #4]
  return 0;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <_isatty>:

int _isatty(int file)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b083      	sub	sp, #12
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a22:	2301      	movs	r3, #1
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3714      	adds	r7, #20
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
	...

08000a4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a54:	4a14      	ldr	r2, [pc, #80]	; (8000aa8 <_sbrk+0x5c>)
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <_sbrk+0x60>)
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <_sbrk+0x64>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d102      	bne.n	8000a6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <_sbrk+0x64>)
 8000a6a:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <_sbrk+0x68>)
 8000a6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <_sbrk+0x64>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4413      	add	r3, r2
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d207      	bcs.n	8000a8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a7c:	f002 f8da 	bl	8002c34 <__errno>
 8000a80:	4603      	mov	r3, r0
 8000a82:	220c      	movs	r2, #12
 8000a84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a8a:	e009      	b.n	8000aa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <_sbrk+0x64>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a92:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <_sbrk+0x64>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	4a05      	ldr	r2, [pc, #20]	; (8000ab0 <_sbrk+0x64>)
 8000a9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20008000 	.word	0x20008000
 8000aac:	00000400 	.word	0x00000400
 8000ab0:	20000114 	.word	0x20000114
 8000ab4:	200006f8 	.word	0x200006f8

08000ab8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <SystemInit+0x20>)
 8000abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ac2:	4a05      	ldr	r2, [pc, #20]	; (8000ad8 <SystemInit+0x20>)
 8000ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000adc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b14 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ae0:	f7ff ffea 	bl	8000ab8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ae4:	480c      	ldr	r0, [pc, #48]	; (8000b18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ae6:	490d      	ldr	r1, [pc, #52]	; (8000b1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ae8:	4a0d      	ldr	r2, [pc, #52]	; (8000b20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aec:	e002      	b.n	8000af4 <LoopCopyDataInit>

08000aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000af2:	3304      	adds	r3, #4

08000af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af8:	d3f9      	bcc.n	8000aee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000afa:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000afc:	4c0a      	ldr	r4, [pc, #40]	; (8000b28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b00:	e001      	b.n	8000b06 <LoopFillZerobss>

08000b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b04:	3204      	adds	r2, #4

08000b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b08:	d3fb      	bcc.n	8000b02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b0a:	f002 f899 	bl	8002c40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b0e:	f7ff fd4d 	bl	80005ac <main>
  bx  lr    
 8000b12:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000b14:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b1c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b20:	08003970 	.word	0x08003970
  ldr r2, =_sbss
 8000b24:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b28:	200006f4 	.word	0x200006f4

08000b2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b2c:	e7fe      	b.n	8000b2c <ADC_IRQHandler>
	...

08000b30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b34:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <HAL_Init+0x40>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a0d      	ldr	r2, [pc, #52]	; (8000b70 <HAL_Init+0x40>)
 8000b3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <HAL_Init+0x40>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <HAL_Init+0x40>)
 8000b46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <HAL_Init+0x40>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a07      	ldr	r2, [pc, #28]	; (8000b70 <HAL_Init+0x40>)
 8000b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b58:	2003      	movs	r0, #3
 8000b5a:	f000 f8d8 	bl	8000d0e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b5e:	200f      	movs	r0, #15
 8000b60:	f7ff fe74 	bl	800084c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b64:	f7ff fdfe 	bl	8000764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40023c00 	.word	0x40023c00

08000b74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_IncTick+0x20>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_IncTick+0x24>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4413      	add	r3, r2
 8000b84:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <HAL_IncTick+0x24>)
 8000b86:	6013      	str	r3, [r2, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	20000008 	.word	0x20000008
 8000b98:	20000118 	.word	0x20000118

08000b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <HAL_GetTick+0x14>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20000118 	.word	0x20000118

08000bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bca:	68ba      	ldr	r2, [r7, #8]
 8000bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be6:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	60d3      	str	r3, [r2, #12]
}
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c00:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <__NVIC_GetPriorityGrouping+0x18>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	0a1b      	lsrs	r3, r3, #8
 8000c06:	f003 0307 	and.w	r3, r3, #7
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	db0b      	blt.n	8000c42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	f003 021f 	and.w	r2, r3, #31
 8000c30:	4907      	ldr	r1, [pc, #28]	; (8000c50 <__NVIC_EnableIRQ+0x38>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	095b      	lsrs	r3, r3, #5
 8000c38:	2001      	movs	r0, #1
 8000c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000e100 	.word	0xe000e100

08000c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	db0a      	blt.n	8000c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	490c      	ldr	r1, [pc, #48]	; (8000ca0 <__NVIC_SetPriority+0x4c>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	0112      	lsls	r2, r2, #4
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	440b      	add	r3, r1
 8000c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c7c:	e00a      	b.n	8000c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4908      	ldr	r1, [pc, #32]	; (8000ca4 <__NVIC_SetPriority+0x50>)
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	f003 030f 	and.w	r3, r3, #15
 8000c8a:	3b04      	subs	r3, #4
 8000c8c:	0112      	lsls	r2, r2, #4
 8000c8e:	b2d2      	uxtb	r2, r2
 8000c90:	440b      	add	r3, r1
 8000c92:	761a      	strb	r2, [r3, #24]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000e100 	.word	0xe000e100
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b089      	sub	sp, #36	; 0x24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	f1c3 0307 	rsb	r3, r3, #7
 8000cc2:	2b04      	cmp	r3, #4
 8000cc4:	bf28      	it	cs
 8000cc6:	2304      	movcs	r3, #4
 8000cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	2b06      	cmp	r3, #6
 8000cd0:	d902      	bls.n	8000cd8 <NVIC_EncodePriority+0x30>
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3b03      	subs	r3, #3
 8000cd6:	e000      	b.n	8000cda <NVIC_EncodePriority+0x32>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43da      	mvns	r2, r3
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	401a      	ands	r2, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfa:	43d9      	mvns	r1, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	4313      	orrs	r3, r2
         );
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3724      	adds	r7, #36	; 0x24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ff4c 	bl	8000bb4 <__NVIC_SetPriorityGrouping>
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
 8000d30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d36:	f7ff ff61 	bl	8000bfc <__NVIC_GetPriorityGrouping>
 8000d3a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	68b9      	ldr	r1, [r7, #8]
 8000d40:	6978      	ldr	r0, [r7, #20]
 8000d42:	f7ff ffb1 	bl	8000ca8 <NVIC_EncodePriority>
 8000d46:	4602      	mov	r2, r0
 8000d48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff ff80 	bl	8000c54 <__NVIC_SetPriority>
}
 8000d54:	bf00      	nop
 8000d56:	3718      	adds	r7, #24
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff ff54 	bl	8000c18 <__NVIC_EnableIRQ>
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	; 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
 8000d92:	e14d      	b.n	8001030 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d94:	2201      	movs	r2, #1
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	697a      	ldr	r2, [r7, #20]
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f040 813c 	bne.w	800102a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 0303 	and.w	r3, r3, #3
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d005      	beq.n	8000dca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d130      	bne.n	8000e2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4013      	ands	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	68da      	ldr	r2, [r3, #12]
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e00:	2201      	movs	r2, #1
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	091b      	lsrs	r3, r3, #4
 8000e16:	f003 0201 	and.w	r2, r3, #1
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b03      	cmp	r3, #3
 8000e36:	d017      	beq.n	8000e68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	2203      	movs	r2, #3
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 0303 	and.w	r3, r3, #3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d123      	bne.n	8000ebc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	08da      	lsrs	r2, r3, #3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3208      	adds	r2, #8
 8000e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	f003 0307 	and.w	r3, r3, #7
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	220f      	movs	r2, #15
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	691a      	ldr	r2, [r3, #16]
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	08da      	lsrs	r2, r3, #3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3208      	adds	r2, #8
 8000eb6:	69b9      	ldr	r1, [r7, #24]
 8000eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 0203 	and.w	r2, r3, #3
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f000 8096 	beq.w	800102a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b51      	ldr	r3, [pc, #324]	; (8001048 <HAL_GPIO_Init+0x2d0>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	4a50      	ldr	r2, [pc, #320]	; (8001048 <HAL_GPIO_Init+0x2d0>)
 8000f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0e:	4b4e      	ldr	r3, [pc, #312]	; (8001048 <HAL_GPIO_Init+0x2d0>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f1a:	4a4c      	ldr	r2, [pc, #304]	; (800104c <HAL_GPIO_Init+0x2d4>)
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	089b      	lsrs	r3, r3, #2
 8000f20:	3302      	adds	r3, #2
 8000f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	220f      	movs	r2, #15
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a43      	ldr	r2, [pc, #268]	; (8001050 <HAL_GPIO_Init+0x2d8>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d00d      	beq.n	8000f62 <HAL_GPIO_Init+0x1ea>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a42      	ldr	r2, [pc, #264]	; (8001054 <HAL_GPIO_Init+0x2dc>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d007      	beq.n	8000f5e <HAL_GPIO_Init+0x1e6>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a41      	ldr	r2, [pc, #260]	; (8001058 <HAL_GPIO_Init+0x2e0>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d101      	bne.n	8000f5a <HAL_GPIO_Init+0x1e2>
 8000f56:	2302      	movs	r3, #2
 8000f58:	e004      	b.n	8000f64 <HAL_GPIO_Init+0x1ec>
 8000f5a:	2307      	movs	r3, #7
 8000f5c:	e002      	b.n	8000f64 <HAL_GPIO_Init+0x1ec>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e000      	b.n	8000f64 <HAL_GPIO_Init+0x1ec>
 8000f62:	2300      	movs	r3, #0
 8000f64:	69fa      	ldr	r2, [r7, #28]
 8000f66:	f002 0203 	and.w	r2, r2, #3
 8000f6a:	0092      	lsls	r2, r2, #2
 8000f6c:	4093      	lsls	r3, r2
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f74:	4935      	ldr	r1, [pc, #212]	; (800104c <HAL_GPIO_Init+0x2d4>)
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	089b      	lsrs	r3, r3, #2
 8000f7a:	3302      	adds	r3, #2
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f82:	4b36      	ldr	r3, [pc, #216]	; (800105c <HAL_GPIO_Init+0x2e4>)
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fa6:	4a2d      	ldr	r2, [pc, #180]	; (800105c <HAL_GPIO_Init+0x2e4>)
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fac:	4b2b      	ldr	r3, [pc, #172]	; (800105c <HAL_GPIO_Init+0x2e4>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fd0:	4a22      	ldr	r2, [pc, #136]	; (800105c <HAL_GPIO_Init+0x2e4>)
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fd6:	4b21      	ldr	r3, [pc, #132]	; (800105c <HAL_GPIO_Init+0x2e4>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ffa:	4a18      	ldr	r2, [pc, #96]	; (800105c <HAL_GPIO_Init+0x2e4>)
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001000:	4b16      	ldr	r3, [pc, #88]	; (800105c <HAL_GPIO_Init+0x2e4>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001024:	4a0d      	ldr	r2, [pc, #52]	; (800105c <HAL_GPIO_Init+0x2e4>)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3301      	adds	r3, #1
 800102e:	61fb      	str	r3, [r7, #28]
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	2b0f      	cmp	r3, #15
 8001034:	f67f aeae 	bls.w	8000d94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	3724      	adds	r7, #36	; 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800
 800104c:	40013800 	.word	0x40013800
 8001050:	40020000 	.word	0x40020000
 8001054:	40020400 	.word	0x40020400
 8001058:	40020800 	.word	0x40020800
 800105c:	40013c00 	.word	0x40013c00

08001060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d101      	bne.n	8001074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e0cc      	b.n	800120e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001074:	4b68      	ldr	r3, [pc, #416]	; (8001218 <HAL_RCC_ClockConfig+0x1b8>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0307 	and.w	r3, r3, #7
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	429a      	cmp	r2, r3
 8001080:	d90c      	bls.n	800109c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001082:	4b65      	ldr	r3, [pc, #404]	; (8001218 <HAL_RCC_ClockConfig+0x1b8>)
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800108a:	4b63      	ldr	r3, [pc, #396]	; (8001218 <HAL_RCC_ClockConfig+0x1b8>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	429a      	cmp	r2, r3
 8001096:	d001      	beq.n	800109c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e0b8      	b.n	800120e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d020      	beq.n	80010ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0304 	and.w	r3, r3, #4
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d005      	beq.n	80010c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010b4:	4b59      	ldr	r3, [pc, #356]	; (800121c <HAL_RCC_ClockConfig+0x1bc>)
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	4a58      	ldr	r2, [pc, #352]	; (800121c <HAL_RCC_ClockConfig+0x1bc>)
 80010ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0308 	and.w	r3, r3, #8
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d005      	beq.n	80010d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010cc:	4b53      	ldr	r3, [pc, #332]	; (800121c <HAL_RCC_ClockConfig+0x1bc>)
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	4a52      	ldr	r2, [pc, #328]	; (800121c <HAL_RCC_ClockConfig+0x1bc>)
 80010d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010d8:	4b50      	ldr	r3, [pc, #320]	; (800121c <HAL_RCC_ClockConfig+0x1bc>)
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	494d      	ldr	r1, [pc, #308]	; (800121c <HAL_RCC_ClockConfig+0x1bc>)
 80010e6:	4313      	orrs	r3, r2
 80010e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d044      	beq.n	8001180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d107      	bne.n	800110e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fe:	4b47      	ldr	r3, [pc, #284]	; (800121c <HAL_RCC_ClockConfig+0x1bc>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d119      	bne.n	800113e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e07f      	b.n	800120e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2b02      	cmp	r3, #2
 8001114:	d003      	beq.n	800111e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800111a:	2b03      	cmp	r3, #3
 800111c:	d107      	bne.n	800112e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800111e:	4b3f      	ldr	r3, [pc, #252]	; (800121c <HAL_RCC_ClockConfig+0x1bc>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d109      	bne.n	800113e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e06f      	b.n	800120e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800112e:	4b3b      	ldr	r3, [pc, #236]	; (800121c <HAL_RCC_ClockConfig+0x1bc>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e067      	b.n	800120e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800113e:	4b37      	ldr	r3, [pc, #220]	; (800121c <HAL_RCC_ClockConfig+0x1bc>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	f023 0203 	bic.w	r2, r3, #3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	4934      	ldr	r1, [pc, #208]	; (800121c <HAL_RCC_ClockConfig+0x1bc>)
 800114c:	4313      	orrs	r3, r2
 800114e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001150:	f7ff fd24 	bl	8000b9c <HAL_GetTick>
 8001154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001156:	e00a      	b.n	800116e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001158:	f7ff fd20 	bl	8000b9c <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	f241 3288 	movw	r2, #5000	; 0x1388
 8001166:	4293      	cmp	r3, r2
 8001168:	d901      	bls.n	800116e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e04f      	b.n	800120e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800116e:	4b2b      	ldr	r3, [pc, #172]	; (800121c <HAL_RCC_ClockConfig+0x1bc>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f003 020c 	and.w	r2, r3, #12
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	429a      	cmp	r2, r3
 800117e:	d1eb      	bne.n	8001158 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001180:	4b25      	ldr	r3, [pc, #148]	; (8001218 <HAL_RCC_ClockConfig+0x1b8>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0307 	and.w	r3, r3, #7
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	429a      	cmp	r2, r3
 800118c:	d20c      	bcs.n	80011a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800118e:	4b22      	ldr	r3, [pc, #136]	; (8001218 <HAL_RCC_ClockConfig+0x1b8>)
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001196:	4b20      	ldr	r3, [pc, #128]	; (8001218 <HAL_RCC_ClockConfig+0x1b8>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d001      	beq.n	80011a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e032      	b.n	800120e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d008      	beq.n	80011c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011b4:	4b19      	ldr	r3, [pc, #100]	; (800121c <HAL_RCC_ClockConfig+0x1bc>)
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	4916      	ldr	r1, [pc, #88]	; (800121c <HAL_RCC_ClockConfig+0x1bc>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d009      	beq.n	80011e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011d2:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_RCC_ClockConfig+0x1bc>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	490e      	ldr	r1, [pc, #56]	; (800121c <HAL_RCC_ClockConfig+0x1bc>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011e6:	f000 f821 	bl	800122c <HAL_RCC_GetSysClockFreq>
 80011ea:	4602      	mov	r2, r0
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <HAL_RCC_ClockConfig+0x1bc>)
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	091b      	lsrs	r3, r3, #4
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	490a      	ldr	r1, [pc, #40]	; (8001220 <HAL_RCC_ClockConfig+0x1c0>)
 80011f8:	5ccb      	ldrb	r3, [r1, r3]
 80011fa:	fa22 f303 	lsr.w	r3, r2, r3
 80011fe:	4a09      	ldr	r2, [pc, #36]	; (8001224 <HAL_RCC_ClockConfig+0x1c4>)
 8001200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <HAL_RCC_ClockConfig+0x1c8>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fb20 	bl	800084c <HAL_InitTick>

  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40023c00 	.word	0x40023c00
 800121c:	40023800 	.word	0x40023800
 8001220:	08003914 	.word	0x08003914
 8001224:	20000000 	.word	0x20000000
 8001228:	20000004 	.word	0x20000004

0800122c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800122c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001230:	b090      	sub	sp, #64	; 0x40
 8001232:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001234:	2300      	movs	r3, #0
 8001236:	637b      	str	r3, [r7, #52]	; 0x34
 8001238:	2300      	movs	r3, #0
 800123a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800123c:	2300      	movs	r3, #0
 800123e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001240:	2300      	movs	r3, #0
 8001242:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001244:	4b59      	ldr	r3, [pc, #356]	; (80013ac <HAL_RCC_GetSysClockFreq+0x180>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f003 030c 	and.w	r3, r3, #12
 800124c:	2b08      	cmp	r3, #8
 800124e:	d00d      	beq.n	800126c <HAL_RCC_GetSysClockFreq+0x40>
 8001250:	2b08      	cmp	r3, #8
 8001252:	f200 80a1 	bhi.w	8001398 <HAL_RCC_GetSysClockFreq+0x16c>
 8001256:	2b00      	cmp	r3, #0
 8001258:	d002      	beq.n	8001260 <HAL_RCC_GetSysClockFreq+0x34>
 800125a:	2b04      	cmp	r3, #4
 800125c:	d003      	beq.n	8001266 <HAL_RCC_GetSysClockFreq+0x3a>
 800125e:	e09b      	b.n	8001398 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001260:	4b53      	ldr	r3, [pc, #332]	; (80013b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001262:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001264:	e09b      	b.n	800139e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001266:	4b53      	ldr	r3, [pc, #332]	; (80013b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001268:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800126a:	e098      	b.n	800139e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800126c:	4b4f      	ldr	r3, [pc, #316]	; (80013ac <HAL_RCC_GetSysClockFreq+0x180>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001274:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001276:	4b4d      	ldr	r3, [pc, #308]	; (80013ac <HAL_RCC_GetSysClockFreq+0x180>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d028      	beq.n	80012d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001282:	4b4a      	ldr	r3, [pc, #296]	; (80013ac <HAL_RCC_GetSysClockFreq+0x180>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	099b      	lsrs	r3, r3, #6
 8001288:	2200      	movs	r2, #0
 800128a:	623b      	str	r3, [r7, #32]
 800128c:	627a      	str	r2, [r7, #36]	; 0x24
 800128e:	6a3b      	ldr	r3, [r7, #32]
 8001290:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001294:	2100      	movs	r1, #0
 8001296:	4b47      	ldr	r3, [pc, #284]	; (80013b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001298:	fb03 f201 	mul.w	r2, r3, r1
 800129c:	2300      	movs	r3, #0
 800129e:	fb00 f303 	mul.w	r3, r0, r3
 80012a2:	4413      	add	r3, r2
 80012a4:	4a43      	ldr	r2, [pc, #268]	; (80013b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80012a6:	fba0 1202 	umull	r1, r2, r0, r2
 80012aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80012ac:	460a      	mov	r2, r1
 80012ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80012b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012b2:	4413      	add	r3, r2
 80012b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012b8:	2200      	movs	r2, #0
 80012ba:	61bb      	str	r3, [r7, #24]
 80012bc:	61fa      	str	r2, [r7, #28]
 80012be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012c6:	f7fe fff3 	bl	80002b0 <__aeabi_uldivmod>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4613      	mov	r3, r2
 80012d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012d2:	e053      	b.n	800137c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012d4:	4b35      	ldr	r3, [pc, #212]	; (80013ac <HAL_RCC_GetSysClockFreq+0x180>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	099b      	lsrs	r3, r3, #6
 80012da:	2200      	movs	r2, #0
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	617a      	str	r2, [r7, #20]
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80012e6:	f04f 0b00 	mov.w	fp, #0
 80012ea:	4652      	mov	r2, sl
 80012ec:	465b      	mov	r3, fp
 80012ee:	f04f 0000 	mov.w	r0, #0
 80012f2:	f04f 0100 	mov.w	r1, #0
 80012f6:	0159      	lsls	r1, r3, #5
 80012f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80012fc:	0150      	lsls	r0, r2, #5
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	ebb2 080a 	subs.w	r8, r2, sl
 8001306:	eb63 090b 	sbc.w	r9, r3, fp
 800130a:	f04f 0200 	mov.w	r2, #0
 800130e:	f04f 0300 	mov.w	r3, #0
 8001312:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001316:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800131a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800131e:	ebb2 0408 	subs.w	r4, r2, r8
 8001322:	eb63 0509 	sbc.w	r5, r3, r9
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	f04f 0300 	mov.w	r3, #0
 800132e:	00eb      	lsls	r3, r5, #3
 8001330:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001334:	00e2      	lsls	r2, r4, #3
 8001336:	4614      	mov	r4, r2
 8001338:	461d      	mov	r5, r3
 800133a:	eb14 030a 	adds.w	r3, r4, sl
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	eb45 030b 	adc.w	r3, r5, fp
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	f04f 0300 	mov.w	r3, #0
 800134e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001352:	4629      	mov	r1, r5
 8001354:	028b      	lsls	r3, r1, #10
 8001356:	4621      	mov	r1, r4
 8001358:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800135c:	4621      	mov	r1, r4
 800135e:	028a      	lsls	r2, r1, #10
 8001360:	4610      	mov	r0, r2
 8001362:	4619      	mov	r1, r3
 8001364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001366:	2200      	movs	r2, #0
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	60fa      	str	r2, [r7, #12]
 800136c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001370:	f7fe ff9e 	bl	80002b0 <__aeabi_uldivmod>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4613      	mov	r3, r2
 800137a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <HAL_RCC_GetSysClockFreq+0x180>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	0c1b      	lsrs	r3, r3, #16
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	3301      	adds	r3, #1
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800138c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800138e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001390:	fbb2 f3f3 	udiv	r3, r2, r3
 8001394:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001396:	e002      	b.n	800139e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800139a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800139c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800139e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3740      	adds	r7, #64	; 0x40
 80013a4:	46bd      	mov	sp, r7
 80013a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800
 80013b0:	00f42400 	.word	0x00f42400
 80013b4:	017d7840 	.word	0x017d7840

080013b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013bc:	4b03      	ldr	r3, [pc, #12]	; (80013cc <HAL_RCC_GetHCLKFreq+0x14>)
 80013be:	681b      	ldr	r3, [r3, #0]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000000 	.word	0x20000000

080013d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013d4:	f7ff fff0 	bl	80013b8 <HAL_RCC_GetHCLKFreq>
 80013d8:	4602      	mov	r2, r0
 80013da:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	0a9b      	lsrs	r3, r3, #10
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	4903      	ldr	r1, [pc, #12]	; (80013f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013e6:	5ccb      	ldrb	r3, [r1, r3]
 80013e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40023800 	.word	0x40023800
 80013f4:	08003924 	.word	0x08003924

080013f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80013fc:	f7ff ffdc 	bl	80013b8 <HAL_RCC_GetHCLKFreq>
 8001400:	4602      	mov	r2, r0
 8001402:	4b05      	ldr	r3, [pc, #20]	; (8001418 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	0b5b      	lsrs	r3, r3, #13
 8001408:	f003 0307 	and.w	r3, r3, #7
 800140c:	4903      	ldr	r1, [pc, #12]	; (800141c <HAL_RCC_GetPCLK2Freq+0x24>)
 800140e:	5ccb      	ldrb	r3, [r1, r3]
 8001410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001414:	4618      	mov	r0, r3
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40023800 	.word	0x40023800
 800141c:	08003924 	.word	0x08003924

08001420 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	220f      	movs	r2, #15
 800142e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <HAL_RCC_GetClockConfig+0x5c>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f003 0203 	and.w	r2, r3, #3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <HAL_RCC_GetClockConfig+0x5c>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <HAL_RCC_GetClockConfig+0x5c>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_RCC_GetClockConfig+0x5c>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	08db      	lsrs	r3, r3, #3
 800145a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001462:	4b07      	ldr	r3, [pc, #28]	; (8001480 <HAL_RCC_GetClockConfig+0x60>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0207 	and.w	r2, r3, #7
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	601a      	str	r2, [r3, #0]
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800
 8001480:	40023c00 	.word	0x40023c00

08001484 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e273      	b.n	800197e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d075      	beq.n	800158e <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80014a2:	4b88      	ldr	r3, [pc, #544]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 030c 	and.w	r3, r3, #12
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	d00c      	beq.n	80014c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ae:	4b85      	ldr	r3, [pc, #532]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80014b6:	2b08      	cmp	r3, #8
 80014b8:	d112      	bne.n	80014e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ba:	4b82      	ldr	r3, [pc, #520]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014c6:	d10b      	bne.n	80014e0 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c8:	4b7e      	ldr	r3, [pc, #504]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d05b      	beq.n	800158c <HAL_RCC_OscConfig+0x108>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d157      	bne.n	800158c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e24e      	b.n	800197e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e8:	d106      	bne.n	80014f8 <HAL_RCC_OscConfig+0x74>
 80014ea:	4b76      	ldr	r3, [pc, #472]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a75      	ldr	r2, [pc, #468]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 80014f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e01d      	b.n	8001534 <HAL_RCC_OscConfig+0xb0>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001500:	d10c      	bne.n	800151c <HAL_RCC_OscConfig+0x98>
 8001502:	4b70      	ldr	r3, [pc, #448]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a6f      	ldr	r2, [pc, #444]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 8001508:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	4b6d      	ldr	r3, [pc, #436]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a6c      	ldr	r2, [pc, #432]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 8001514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	e00b      	b.n	8001534 <HAL_RCC_OscConfig+0xb0>
 800151c:	4b69      	ldr	r3, [pc, #420]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a68      	ldr	r2, [pc, #416]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 8001522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	4b66      	ldr	r3, [pc, #408]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a65      	ldr	r2, [pc, #404]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 800152e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001532:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d013      	beq.n	8001564 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153c:	f7ff fb2e 	bl	8000b9c <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001544:	f7ff fb2a 	bl	8000b9c <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b64      	cmp	r3, #100	; 0x64
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e213      	b.n	800197e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001556:	4b5b      	ldr	r3, [pc, #364]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f0      	beq.n	8001544 <HAL_RCC_OscConfig+0xc0>
 8001562:	e014      	b.n	800158e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001564:	f7ff fb1a 	bl	8000b9c <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800156c:	f7ff fb16 	bl	8000b9c <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b64      	cmp	r3, #100	; 0x64
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e1ff      	b.n	800197e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800157e:	4b51      	ldr	r3, [pc, #324]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f0      	bne.n	800156c <HAL_RCC_OscConfig+0xe8>
 800158a:	e000      	b.n	800158e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800158c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d063      	beq.n	8001662 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800159a:	4b4a      	ldr	r3, [pc, #296]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 030c 	and.w	r3, r3, #12
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d00b      	beq.n	80015be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015a6:	4b47      	ldr	r3, [pc, #284]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80015ae:	2b08      	cmp	r3, #8
 80015b0:	d11c      	bne.n	80015ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015b2:	4b44      	ldr	r3, [pc, #272]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d116      	bne.n	80015ec <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015be:	4b41      	ldr	r3, [pc, #260]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d005      	beq.n	80015d6 <HAL_RCC_OscConfig+0x152>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d001      	beq.n	80015d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e1d3      	b.n	800197e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d6:	4b3b      	ldr	r3, [pc, #236]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	4937      	ldr	r1, [pc, #220]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ea:	e03a      	b.n	8001662 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d020      	beq.n	8001636 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015f4:	4b34      	ldr	r3, [pc, #208]	; (80016c8 <HAL_RCC_OscConfig+0x244>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fa:	f7ff facf 	bl	8000b9c <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001602:	f7ff facb 	bl	8000b9c <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e1b4      	b.n	800197e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001614:	4b2b      	ldr	r3, [pc, #172]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0f0      	beq.n	8001602 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001620:	4b28      	ldr	r3, [pc, #160]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	4925      	ldr	r1, [pc, #148]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 8001630:	4313      	orrs	r3, r2
 8001632:	600b      	str	r3, [r1, #0]
 8001634:	e015      	b.n	8001662 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001636:	4b24      	ldr	r3, [pc, #144]	; (80016c8 <HAL_RCC_OscConfig+0x244>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163c:	f7ff faae 	bl	8000b9c <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001644:	f7ff faaa 	bl	8000b9c <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e193      	b.n	800197e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001656:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	2b00      	cmp	r3, #0
 800166c:	d036      	beq.n	80016dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d016      	beq.n	80016a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <HAL_RCC_OscConfig+0x248>)
 8001678:	2201      	movs	r2, #1
 800167a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800167c:	f7ff fa8e 	bl	8000b9c <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001684:	f7ff fa8a 	bl	8000b9c <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e173      	b.n	800197e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 8001698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0f0      	beq.n	8001684 <HAL_RCC_OscConfig+0x200>
 80016a2:	e01b      	b.n	80016dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016a4:	4b09      	ldr	r3, [pc, #36]	; (80016cc <HAL_RCC_OscConfig+0x248>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016aa:	f7ff fa77 	bl	8000b9c <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b0:	e00e      	b.n	80016d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b2:	f7ff fa73 	bl	8000b9c <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d907      	bls.n	80016d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e15c      	b.n	800197e <HAL_RCC_OscConfig+0x4fa>
 80016c4:	40023800 	.word	0x40023800
 80016c8:	42470000 	.word	0x42470000
 80016cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d0:	4b8a      	ldr	r3, [pc, #552]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 80016d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1ea      	bne.n	80016b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 8097 	beq.w	8001818 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ea:	2300      	movs	r3, #0
 80016ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ee:	4b83      	ldr	r3, [pc, #524]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d10f      	bne.n	800171a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	4b7f      	ldr	r3, [pc, #508]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	4a7e      	ldr	r2, [pc, #504]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 8001704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001708:	6413      	str	r3, [r2, #64]	; 0x40
 800170a:	4b7c      	ldr	r3, [pc, #496]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001716:	2301      	movs	r3, #1
 8001718:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171a:	4b79      	ldr	r3, [pc, #484]	; (8001900 <HAL_RCC_OscConfig+0x47c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001722:	2b00      	cmp	r3, #0
 8001724:	d118      	bne.n	8001758 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001726:	4b76      	ldr	r3, [pc, #472]	; (8001900 <HAL_RCC_OscConfig+0x47c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a75      	ldr	r2, [pc, #468]	; (8001900 <HAL_RCC_OscConfig+0x47c>)
 800172c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001730:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001732:	f7ff fa33 	bl	8000b9c <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800173a:	f7ff fa2f 	bl	8000b9c <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e118      	b.n	800197e <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174c:	4b6c      	ldr	r3, [pc, #432]	; (8001900 <HAL_RCC_OscConfig+0x47c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0f0      	beq.n	800173a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d106      	bne.n	800176e <HAL_RCC_OscConfig+0x2ea>
 8001760:	4b66      	ldr	r3, [pc, #408]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 8001762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001764:	4a65      	ldr	r2, [pc, #404]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	6713      	str	r3, [r2, #112]	; 0x70
 800176c:	e01c      	b.n	80017a8 <HAL_RCC_OscConfig+0x324>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	2b05      	cmp	r3, #5
 8001774:	d10c      	bne.n	8001790 <HAL_RCC_OscConfig+0x30c>
 8001776:	4b61      	ldr	r3, [pc, #388]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 8001778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177a:	4a60      	ldr	r2, [pc, #384]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 800177c:	f043 0304 	orr.w	r3, r3, #4
 8001780:	6713      	str	r3, [r2, #112]	; 0x70
 8001782:	4b5e      	ldr	r3, [pc, #376]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 8001784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001786:	4a5d      	ldr	r2, [pc, #372]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6713      	str	r3, [r2, #112]	; 0x70
 800178e:	e00b      	b.n	80017a8 <HAL_RCC_OscConfig+0x324>
 8001790:	4b5a      	ldr	r3, [pc, #360]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 8001792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001794:	4a59      	ldr	r2, [pc, #356]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 8001796:	f023 0301 	bic.w	r3, r3, #1
 800179a:	6713      	str	r3, [r2, #112]	; 0x70
 800179c:	4b57      	ldr	r3, [pc, #348]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 800179e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a0:	4a56      	ldr	r2, [pc, #344]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 80017a2:	f023 0304 	bic.w	r3, r3, #4
 80017a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d015      	beq.n	80017dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b0:	f7ff f9f4 	bl	8000b9c <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b6:	e00a      	b.n	80017ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017b8:	f7ff f9f0 	bl	8000b9c <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e0d7      	b.n	800197e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ce:	4b4b      	ldr	r3, [pc, #300]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 80017d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0ee      	beq.n	80017b8 <HAL_RCC_OscConfig+0x334>
 80017da:	e014      	b.n	8001806 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017dc:	f7ff f9de 	bl	8000b9c <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e2:	e00a      	b.n	80017fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017e4:	f7ff f9da 	bl	8000b9c <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e0c1      	b.n	800197e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017fa:	4b40      	ldr	r3, [pc, #256]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 80017fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1ee      	bne.n	80017e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001806:	7dfb      	ldrb	r3, [r7, #23]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d105      	bne.n	8001818 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800180c:	4b3b      	ldr	r3, [pc, #236]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	4a3a      	ldr	r2, [pc, #232]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 8001812:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001816:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 80ad 	beq.w	800197c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001822:	4b36      	ldr	r3, [pc, #216]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 030c 	and.w	r3, r3, #12
 800182a:	2b08      	cmp	r3, #8
 800182c:	d060      	beq.n	80018f0 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	2b02      	cmp	r3, #2
 8001834:	d145      	bne.n	80018c2 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001836:	4b33      	ldr	r3, [pc, #204]	; (8001904 <HAL_RCC_OscConfig+0x480>)
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183c:	f7ff f9ae 	bl	8000b9c <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001844:	f7ff f9aa 	bl	8000b9c <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e093      	b.n	800197e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001856:	4b29      	ldr	r3, [pc, #164]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	69da      	ldr	r2, [r3, #28]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001870:	019b      	lsls	r3, r3, #6
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001878:	085b      	lsrs	r3, r3, #1
 800187a:	3b01      	subs	r3, #1
 800187c:	041b      	lsls	r3, r3, #16
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001884:	061b      	lsls	r3, r3, #24
 8001886:	431a      	orrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188c:	071b      	lsls	r3, r3, #28
 800188e:	491b      	ldr	r1, [pc, #108]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 8001890:	4313      	orrs	r3, r2
 8001892:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001894:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <HAL_RCC_OscConfig+0x480>)
 8001896:	2201      	movs	r2, #1
 8001898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189a:	f7ff f97f 	bl	8000b9c <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018a2:	f7ff f97b 	bl	8000b9c <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e064      	b.n	800197e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0f0      	beq.n	80018a2 <HAL_RCC_OscConfig+0x41e>
 80018c0:	e05c      	b.n	800197c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <HAL_RCC_OscConfig+0x480>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c8:	f7ff f968 	bl	8000b9c <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d0:	f7ff f964 	bl	8000b9c <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e04d      	b.n	800197e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f0      	bne.n	80018d0 <HAL_RCC_OscConfig+0x44c>
 80018ee:	e045      	b.n	800197c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d107      	bne.n	8001908 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e040      	b.n	800197e <HAL_RCC_OscConfig+0x4fa>
 80018fc:	40023800 	.word	0x40023800
 8001900:	40007000 	.word	0x40007000
 8001904:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001908:	4b1f      	ldr	r3, [pc, #124]	; (8001988 <HAL_RCC_OscConfig+0x504>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d030      	beq.n	8001978 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001920:	429a      	cmp	r2, r3
 8001922:	d129      	bne.n	8001978 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192e:	429a      	cmp	r2, r3
 8001930:	d122      	bne.n	8001978 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001938:	4013      	ands	r3, r2
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800193e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001940:	4293      	cmp	r3, r2
 8001942:	d119      	bne.n	8001978 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194e:	085b      	lsrs	r3, r3, #1
 8001950:	3b01      	subs	r3, #1
 8001952:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001954:	429a      	cmp	r2, r3
 8001956:	d10f      	bne.n	8001978 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001962:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001964:	429a      	cmp	r2, r3
 8001966:	d107      	bne.n	8001978 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001974:	429a      	cmp	r2, r3
 8001976:	d001      	beq.n	800197c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e000      	b.n	800197e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3718      	adds	r7, #24
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800

0800198c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e041      	b.n	8001a22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d106      	bne.n	80019b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 f839 	bl	8001a2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2202      	movs	r2, #2
 80019bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3304      	adds	r3, #4
 80019c8:	4619      	mov	r1, r3
 80019ca:	4610      	mov	r0, r2
 80019cc:	f000 f99e 	bl	8001d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
	...

08001a40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d001      	beq.n	8001a58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e035      	b.n	8001ac4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68da      	ldr	r2, [r3, #12]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0201 	orr.w	r2, r2, #1
 8001a6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a16      	ldr	r2, [pc, #88]	; (8001ad0 <HAL_TIM_Base_Start_IT+0x90>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d009      	beq.n	8001a8e <HAL_TIM_Base_Start_IT+0x4e>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a15      	ldr	r2, [pc, #84]	; (8001ad4 <HAL_TIM_Base_Start_IT+0x94>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d004      	beq.n	8001a8e <HAL_TIM_Base_Start_IT+0x4e>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a13      	ldr	r2, [pc, #76]	; (8001ad8 <HAL_TIM_Base_Start_IT+0x98>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d111      	bne.n	8001ab2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2b06      	cmp	r3, #6
 8001a9e:	d010      	beq.n	8001ac2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0201 	orr.w	r2, r2, #1
 8001aae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ab0:	e007      	b.n	8001ac2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f042 0201 	orr.w	r2, r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	40010000 	.word	0x40010000
 8001ad4:	40000c00 	.word	0x40000c00
 8001ad8:	40014000 	.word	0x40014000

08001adc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d020      	beq.n	8001b40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d01b      	beq.n	8001b40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f06f 0202 	mvn.w	r2, #2
 8001b10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f8d2 	bl	8001cd0 <HAL_TIM_IC_CaptureCallback>
 8001b2c:	e005      	b.n	8001b3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 f8c4 	bl	8001cbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 f8d5 	bl	8001ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d020      	beq.n	8001b8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d01b      	beq.n	8001b8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f06f 0204 	mvn.w	r2, #4
 8001b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2202      	movs	r2, #2
 8001b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f8ac 	bl	8001cd0 <HAL_TIM_IC_CaptureCallback>
 8001b78:	e005      	b.n	8001b86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f89e 	bl	8001cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 f8af 	bl	8001ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	f003 0308 	and.w	r3, r3, #8
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d020      	beq.n	8001bd8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d01b      	beq.n	8001bd8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f06f 0208 	mvn.w	r2, #8
 8001ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2204      	movs	r2, #4
 8001bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f886 	bl	8001cd0 <HAL_TIM_IC_CaptureCallback>
 8001bc4:	e005      	b.n	8001bd2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f878 	bl	8001cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 f889 	bl	8001ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	f003 0310 	and.w	r3, r3, #16
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d020      	beq.n	8001c24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f003 0310 	and.w	r3, r3, #16
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d01b      	beq.n	8001c24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f06f 0210 	mvn.w	r2, #16
 8001bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2208      	movs	r2, #8
 8001bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f860 	bl	8001cd0 <HAL_TIM_IC_CaptureCallback>
 8001c10:	e005      	b.n	8001c1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f852 	bl	8001cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 f863 	bl	8001ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00c      	beq.n	8001c48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d007      	beq.n	8001c48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f06f 0201 	mvn.w	r2, #1
 8001c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7fe fd76 	bl	8000734 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00c      	beq.n	8001c6c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d007      	beq.n	8001c6c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f8c4 	bl	8001df4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00c      	beq.n	8001c90 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d007      	beq.n	8001c90 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f834 	bl	8001cf8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	f003 0320 	and.w	r3, r3, #32
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00c      	beq.n	8001cb4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f003 0320 	and.w	r3, r3, #32
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d007      	beq.n	8001cb4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f06f 0220 	mvn.w	r2, #32
 8001cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f896 	bl	8001de0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a2c      	ldr	r2, [pc, #176]	; (8001dd0 <TIM_Base_SetConfig+0xc4>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d003      	beq.n	8001d2c <TIM_Base_SetConfig+0x20>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a2b      	ldr	r2, [pc, #172]	; (8001dd4 <TIM_Base_SetConfig+0xc8>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d108      	bne.n	8001d3e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a23      	ldr	r2, [pc, #140]	; (8001dd0 <TIM_Base_SetConfig+0xc4>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d00b      	beq.n	8001d5e <TIM_Base_SetConfig+0x52>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a22      	ldr	r2, [pc, #136]	; (8001dd4 <TIM_Base_SetConfig+0xc8>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d007      	beq.n	8001d5e <TIM_Base_SetConfig+0x52>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a21      	ldr	r2, [pc, #132]	; (8001dd8 <TIM_Base_SetConfig+0xcc>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d003      	beq.n	8001d5e <TIM_Base_SetConfig+0x52>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a20      	ldr	r2, [pc, #128]	; (8001ddc <TIM_Base_SetConfig+0xd0>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d108      	bne.n	8001d70 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a0e      	ldr	r2, [pc, #56]	; (8001dd0 <TIM_Base_SetConfig+0xc4>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d103      	bne.n	8001da4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	691a      	ldr	r2, [r3, #16]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d105      	bne.n	8001dc2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	f023 0201 	bic.w	r2, r3, #1
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	611a      	str	r2, [r3, #16]
  }
}
 8001dc2:	bf00      	nop
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40010000 	.word	0x40010000
 8001dd4:	40000c00 	.word	0x40000c00
 8001dd8:	40014000 	.word	0x40014000
 8001ddc:	40014800 	.word	0x40014800

08001de0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e042      	b.n	8001ea0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d106      	bne.n	8001e34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7fe fcc4 	bl	80007bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2224      	movs	r2, #36	; 0x24
 8001e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 f973 	bl	8002138 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	691a      	ldr	r2, [r3, #16]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	695a      	ldr	r2, [r3, #20]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2220      	movs	r2, #32
 8001e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08a      	sub	sp, #40	; 0x28
 8001eac:	af02      	add	r7, sp, #8
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	603b      	str	r3, [r7, #0]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b20      	cmp	r3, #32
 8001ec6:	d175      	bne.n	8001fb4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d002      	beq.n	8001ed4 <HAL_UART_Transmit+0x2c>
 8001ece:	88fb      	ldrh	r3, [r7, #6]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e06e      	b.n	8001fb6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2221      	movs	r2, #33	; 0x21
 8001ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ee6:	f7fe fe59 	bl	8000b9c <HAL_GetTick>
 8001eea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	88fa      	ldrh	r2, [r7, #6]
 8001ef0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	88fa      	ldrh	r2, [r7, #6]
 8001ef6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f00:	d108      	bne.n	8001f14 <HAL_UART_Transmit+0x6c>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d104      	bne.n	8001f14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	61bb      	str	r3, [r7, #24]
 8001f12:	e003      	b.n	8001f1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001f1c:	e02e      	b.n	8001f7c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	2200      	movs	r2, #0
 8001f26:	2180      	movs	r1, #128	; 0x80
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f000 f848 	bl	8001fbe <UART_WaitOnFlagUntilTimeout>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d005      	beq.n	8001f40 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2220      	movs	r2, #32
 8001f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e03a      	b.n	8001fb6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10b      	bne.n	8001f5e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	3302      	adds	r3, #2
 8001f5a:	61bb      	str	r3, [r7, #24]
 8001f5c:	e007      	b.n	8001f6e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	781a      	ldrb	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	3b01      	subs	r3, #1
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1cb      	bne.n	8001f1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2140      	movs	r1, #64	; 0x40
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f000 f814 	bl	8001fbe <UART_WaitOnFlagUntilTimeout>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e006      	b.n	8001fb6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2220      	movs	r2, #32
 8001fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	e000      	b.n	8001fb6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001fb4:	2302      	movs	r3, #2
  }
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3720      	adds	r7, #32
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b086      	sub	sp, #24
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	60f8      	str	r0, [r7, #12]
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	603b      	str	r3, [r7, #0]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fce:	e03b      	b.n	8002048 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fd0:	6a3b      	ldr	r3, [r7, #32]
 8001fd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fd6:	d037      	beq.n	8002048 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fd8:	f7fe fde0 	bl	8000b9c <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	6a3a      	ldr	r2, [r7, #32]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d302      	bcc.n	8001fee <UART_WaitOnFlagUntilTimeout+0x30>
 8001fe8:	6a3b      	ldr	r3, [r7, #32]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e03a      	b.n	8002068 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d023      	beq.n	8002048 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	2b80      	cmp	r3, #128	; 0x80
 8002004:	d020      	beq.n	8002048 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	2b40      	cmp	r3, #64	; 0x40
 800200a:	d01d      	beq.n	8002048 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b08      	cmp	r3, #8
 8002018:	d116      	bne.n	8002048 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	617b      	str	r3, [r7, #20]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 f81d 	bl	8002070 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2208      	movs	r2, #8
 800203a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e00f      	b.n	8002068 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	4013      	ands	r3, r2
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	429a      	cmp	r2, r3
 8002056:	bf0c      	ite	eq
 8002058:	2301      	moveq	r3, #1
 800205a:	2300      	movne	r3, #0
 800205c:	b2db      	uxtb	r3, r3
 800205e:	461a      	mov	r2, r3
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	429a      	cmp	r2, r3
 8002064:	d0b4      	beq.n	8001fd0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002070:	b480      	push	{r7}
 8002072:	b095      	sub	sp, #84	; 0x54
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	330c      	adds	r3, #12
 800207e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002082:	e853 3f00 	ldrex	r3, [r3]
 8002086:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800208a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800208e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	330c      	adds	r3, #12
 8002096:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002098:	643a      	str	r2, [r7, #64]	; 0x40
 800209a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800209c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800209e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020a0:	e841 2300 	strex	r3, r2, [r1]
 80020a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80020a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1e5      	bne.n	8002078 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	3314      	adds	r3, #20
 80020b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	e853 3f00 	ldrex	r3, [r3]
 80020ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f023 0301 	bic.w	r3, r3, #1
 80020c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	3314      	adds	r3, #20
 80020ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80020cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020d4:	e841 2300 	strex	r3, r2, [r1]
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1e5      	bne.n	80020ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d119      	bne.n	800211c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	330c      	adds	r3, #12
 80020ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	e853 3f00 	ldrex	r3, [r3]
 80020f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	f023 0310 	bic.w	r3, r3, #16
 80020fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	330c      	adds	r3, #12
 8002106:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002108:	61ba      	str	r2, [r7, #24]
 800210a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800210c:	6979      	ldr	r1, [r7, #20]
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	e841 2300 	strex	r3, r2, [r1]
 8002114:	613b      	str	r3, [r7, #16]
   return(result);
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1e5      	bne.n	80020e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2220      	movs	r2, #32
 8002120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	631a      	str	r2, [r3, #48]	; 0x30
}
 800212a:	bf00      	nop
 800212c:	3754      	adds	r7, #84	; 0x54
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
	...

08002138 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800213c:	b0c0      	sub	sp, #256	; 0x100
 800213e:	af00      	add	r7, sp, #0
 8002140:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002154:	68d9      	ldr	r1, [r3, #12]
 8002156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	ea40 0301 	orr.w	r3, r0, r1
 8002160:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	431a      	orrs	r2, r3
 8002170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	431a      	orrs	r2, r3
 8002178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	4313      	orrs	r3, r2
 8002180:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002190:	f021 010c 	bic.w	r1, r1, #12
 8002194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800219e:	430b      	orrs	r3, r1
 80021a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80021ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021b2:	6999      	ldr	r1, [r3, #24]
 80021b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	ea40 0301 	orr.w	r3, r0, r1
 80021be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	4b8f      	ldr	r3, [pc, #572]	; (8002404 <UART_SetConfig+0x2cc>)
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d005      	beq.n	80021d8 <UART_SetConfig+0xa0>
 80021cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	4b8d      	ldr	r3, [pc, #564]	; (8002408 <UART_SetConfig+0x2d0>)
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d104      	bne.n	80021e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80021d8:	f7ff f90e 	bl	80013f8 <HAL_RCC_GetPCLK2Freq>
 80021dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80021e0:	e003      	b.n	80021ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80021e2:	f7ff f8f5 	bl	80013d0 <HAL_RCC_GetPCLK1Freq>
 80021e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021f4:	f040 810c 	bne.w	8002410 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021fc:	2200      	movs	r2, #0
 80021fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002202:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002206:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800220a:	4622      	mov	r2, r4
 800220c:	462b      	mov	r3, r5
 800220e:	1891      	adds	r1, r2, r2
 8002210:	65b9      	str	r1, [r7, #88]	; 0x58
 8002212:	415b      	adcs	r3, r3
 8002214:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002216:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800221a:	4621      	mov	r1, r4
 800221c:	eb12 0801 	adds.w	r8, r2, r1
 8002220:	4629      	mov	r1, r5
 8002222:	eb43 0901 	adc.w	r9, r3, r1
 8002226:	f04f 0200 	mov.w	r2, #0
 800222a:	f04f 0300 	mov.w	r3, #0
 800222e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002232:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002236:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800223a:	4690      	mov	r8, r2
 800223c:	4699      	mov	r9, r3
 800223e:	4623      	mov	r3, r4
 8002240:	eb18 0303 	adds.w	r3, r8, r3
 8002244:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002248:	462b      	mov	r3, r5
 800224a:	eb49 0303 	adc.w	r3, r9, r3
 800224e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800225e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002262:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002266:	460b      	mov	r3, r1
 8002268:	18db      	adds	r3, r3, r3
 800226a:	653b      	str	r3, [r7, #80]	; 0x50
 800226c:	4613      	mov	r3, r2
 800226e:	eb42 0303 	adc.w	r3, r2, r3
 8002272:	657b      	str	r3, [r7, #84]	; 0x54
 8002274:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002278:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800227c:	f7fe f818 	bl	80002b0 <__aeabi_uldivmod>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4b61      	ldr	r3, [pc, #388]	; (800240c <UART_SetConfig+0x2d4>)
 8002286:	fba3 2302 	umull	r2, r3, r3, r2
 800228a:	095b      	lsrs	r3, r3, #5
 800228c:	011c      	lsls	r4, r3, #4
 800228e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002292:	2200      	movs	r2, #0
 8002294:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002298:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800229c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80022a0:	4642      	mov	r2, r8
 80022a2:	464b      	mov	r3, r9
 80022a4:	1891      	adds	r1, r2, r2
 80022a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80022a8:	415b      	adcs	r3, r3
 80022aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80022b0:	4641      	mov	r1, r8
 80022b2:	eb12 0a01 	adds.w	sl, r2, r1
 80022b6:	4649      	mov	r1, r9
 80022b8:	eb43 0b01 	adc.w	fp, r3, r1
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	f04f 0300 	mov.w	r3, #0
 80022c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80022c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80022cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022d0:	4692      	mov	sl, r2
 80022d2:	469b      	mov	fp, r3
 80022d4:	4643      	mov	r3, r8
 80022d6:	eb1a 0303 	adds.w	r3, sl, r3
 80022da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80022de:	464b      	mov	r3, r9
 80022e0:	eb4b 0303 	adc.w	r3, fp, r3
 80022e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80022e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80022f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80022f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80022fc:	460b      	mov	r3, r1
 80022fe:	18db      	adds	r3, r3, r3
 8002300:	643b      	str	r3, [r7, #64]	; 0x40
 8002302:	4613      	mov	r3, r2
 8002304:	eb42 0303 	adc.w	r3, r2, r3
 8002308:	647b      	str	r3, [r7, #68]	; 0x44
 800230a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800230e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002312:	f7fd ffcd 	bl	80002b0 <__aeabi_uldivmod>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	4611      	mov	r1, r2
 800231c:	4b3b      	ldr	r3, [pc, #236]	; (800240c <UART_SetConfig+0x2d4>)
 800231e:	fba3 2301 	umull	r2, r3, r3, r1
 8002322:	095b      	lsrs	r3, r3, #5
 8002324:	2264      	movs	r2, #100	; 0x64
 8002326:	fb02 f303 	mul.w	r3, r2, r3
 800232a:	1acb      	subs	r3, r1, r3
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002332:	4b36      	ldr	r3, [pc, #216]	; (800240c <UART_SetConfig+0x2d4>)
 8002334:	fba3 2302 	umull	r2, r3, r3, r2
 8002338:	095b      	lsrs	r3, r3, #5
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002340:	441c      	add	r4, r3
 8002342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002346:	2200      	movs	r2, #0
 8002348:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800234c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002350:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002354:	4642      	mov	r2, r8
 8002356:	464b      	mov	r3, r9
 8002358:	1891      	adds	r1, r2, r2
 800235a:	63b9      	str	r1, [r7, #56]	; 0x38
 800235c:	415b      	adcs	r3, r3
 800235e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002360:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002364:	4641      	mov	r1, r8
 8002366:	1851      	adds	r1, r2, r1
 8002368:	6339      	str	r1, [r7, #48]	; 0x30
 800236a:	4649      	mov	r1, r9
 800236c:	414b      	adcs	r3, r1
 800236e:	637b      	str	r3, [r7, #52]	; 0x34
 8002370:	f04f 0200 	mov.w	r2, #0
 8002374:	f04f 0300 	mov.w	r3, #0
 8002378:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800237c:	4659      	mov	r1, fp
 800237e:	00cb      	lsls	r3, r1, #3
 8002380:	4651      	mov	r1, sl
 8002382:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002386:	4651      	mov	r1, sl
 8002388:	00ca      	lsls	r2, r1, #3
 800238a:	4610      	mov	r0, r2
 800238c:	4619      	mov	r1, r3
 800238e:	4603      	mov	r3, r0
 8002390:	4642      	mov	r2, r8
 8002392:	189b      	adds	r3, r3, r2
 8002394:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002398:	464b      	mov	r3, r9
 800239a:	460a      	mov	r2, r1
 800239c:	eb42 0303 	adc.w	r3, r2, r3
 80023a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80023a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80023b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80023b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80023b8:	460b      	mov	r3, r1
 80023ba:	18db      	adds	r3, r3, r3
 80023bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80023be:	4613      	mov	r3, r2
 80023c0:	eb42 0303 	adc.w	r3, r2, r3
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80023ce:	f7fd ff6f 	bl	80002b0 <__aeabi_uldivmod>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	4b0d      	ldr	r3, [pc, #52]	; (800240c <UART_SetConfig+0x2d4>)
 80023d8:	fba3 1302 	umull	r1, r3, r3, r2
 80023dc:	095b      	lsrs	r3, r3, #5
 80023de:	2164      	movs	r1, #100	; 0x64
 80023e0:	fb01 f303 	mul.w	r3, r1, r3
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	3332      	adds	r3, #50	; 0x32
 80023ea:	4a08      	ldr	r2, [pc, #32]	; (800240c <UART_SetConfig+0x2d4>)
 80023ec:	fba2 2303 	umull	r2, r3, r2, r3
 80023f0:	095b      	lsrs	r3, r3, #5
 80023f2:	f003 0207 	and.w	r2, r3, #7
 80023f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4422      	add	r2, r4
 80023fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002400:	e106      	b.n	8002610 <UART_SetConfig+0x4d8>
 8002402:	bf00      	nop
 8002404:	40011000 	.word	0x40011000
 8002408:	40011400 	.word	0x40011400
 800240c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002414:	2200      	movs	r2, #0
 8002416:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800241a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800241e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002422:	4642      	mov	r2, r8
 8002424:	464b      	mov	r3, r9
 8002426:	1891      	adds	r1, r2, r2
 8002428:	6239      	str	r1, [r7, #32]
 800242a:	415b      	adcs	r3, r3
 800242c:	627b      	str	r3, [r7, #36]	; 0x24
 800242e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002432:	4641      	mov	r1, r8
 8002434:	1854      	adds	r4, r2, r1
 8002436:	4649      	mov	r1, r9
 8002438:	eb43 0501 	adc.w	r5, r3, r1
 800243c:	f04f 0200 	mov.w	r2, #0
 8002440:	f04f 0300 	mov.w	r3, #0
 8002444:	00eb      	lsls	r3, r5, #3
 8002446:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800244a:	00e2      	lsls	r2, r4, #3
 800244c:	4614      	mov	r4, r2
 800244e:	461d      	mov	r5, r3
 8002450:	4643      	mov	r3, r8
 8002452:	18e3      	adds	r3, r4, r3
 8002454:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002458:	464b      	mov	r3, r9
 800245a:	eb45 0303 	adc.w	r3, r5, r3
 800245e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800246e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	f04f 0300 	mov.w	r3, #0
 800247a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800247e:	4629      	mov	r1, r5
 8002480:	008b      	lsls	r3, r1, #2
 8002482:	4621      	mov	r1, r4
 8002484:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002488:	4621      	mov	r1, r4
 800248a:	008a      	lsls	r2, r1, #2
 800248c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002490:	f7fd ff0e 	bl	80002b0 <__aeabi_uldivmod>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4b60      	ldr	r3, [pc, #384]	; (800261c <UART_SetConfig+0x4e4>)
 800249a:	fba3 2302 	umull	r2, r3, r3, r2
 800249e:	095b      	lsrs	r3, r3, #5
 80024a0:	011c      	lsls	r4, r3, #4
 80024a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024a6:	2200      	movs	r2, #0
 80024a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80024ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80024b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80024b4:	4642      	mov	r2, r8
 80024b6:	464b      	mov	r3, r9
 80024b8:	1891      	adds	r1, r2, r2
 80024ba:	61b9      	str	r1, [r7, #24]
 80024bc:	415b      	adcs	r3, r3
 80024be:	61fb      	str	r3, [r7, #28]
 80024c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024c4:	4641      	mov	r1, r8
 80024c6:	1851      	adds	r1, r2, r1
 80024c8:	6139      	str	r1, [r7, #16]
 80024ca:	4649      	mov	r1, r9
 80024cc:	414b      	adcs	r3, r1
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	f04f 0200 	mov.w	r2, #0
 80024d4:	f04f 0300 	mov.w	r3, #0
 80024d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024dc:	4659      	mov	r1, fp
 80024de:	00cb      	lsls	r3, r1, #3
 80024e0:	4651      	mov	r1, sl
 80024e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024e6:	4651      	mov	r1, sl
 80024e8:	00ca      	lsls	r2, r1, #3
 80024ea:	4610      	mov	r0, r2
 80024ec:	4619      	mov	r1, r3
 80024ee:	4603      	mov	r3, r0
 80024f0:	4642      	mov	r2, r8
 80024f2:	189b      	adds	r3, r3, r2
 80024f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80024f8:	464b      	mov	r3, r9
 80024fa:	460a      	mov	r2, r1
 80024fc:	eb42 0303 	adc.w	r3, r2, r3
 8002500:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	67bb      	str	r3, [r7, #120]	; 0x78
 800250e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002510:	f04f 0200 	mov.w	r2, #0
 8002514:	f04f 0300 	mov.w	r3, #0
 8002518:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800251c:	4649      	mov	r1, r9
 800251e:	008b      	lsls	r3, r1, #2
 8002520:	4641      	mov	r1, r8
 8002522:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002526:	4641      	mov	r1, r8
 8002528:	008a      	lsls	r2, r1, #2
 800252a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800252e:	f7fd febf 	bl	80002b0 <__aeabi_uldivmod>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4611      	mov	r1, r2
 8002538:	4b38      	ldr	r3, [pc, #224]	; (800261c <UART_SetConfig+0x4e4>)
 800253a:	fba3 2301 	umull	r2, r3, r3, r1
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	2264      	movs	r2, #100	; 0x64
 8002542:	fb02 f303 	mul.w	r3, r2, r3
 8002546:	1acb      	subs	r3, r1, r3
 8002548:	011b      	lsls	r3, r3, #4
 800254a:	3332      	adds	r3, #50	; 0x32
 800254c:	4a33      	ldr	r2, [pc, #204]	; (800261c <UART_SetConfig+0x4e4>)
 800254e:	fba2 2303 	umull	r2, r3, r2, r3
 8002552:	095b      	lsrs	r3, r3, #5
 8002554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002558:	441c      	add	r4, r3
 800255a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800255e:	2200      	movs	r2, #0
 8002560:	673b      	str	r3, [r7, #112]	; 0x70
 8002562:	677a      	str	r2, [r7, #116]	; 0x74
 8002564:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002568:	4642      	mov	r2, r8
 800256a:	464b      	mov	r3, r9
 800256c:	1891      	adds	r1, r2, r2
 800256e:	60b9      	str	r1, [r7, #8]
 8002570:	415b      	adcs	r3, r3
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002578:	4641      	mov	r1, r8
 800257a:	1851      	adds	r1, r2, r1
 800257c:	6039      	str	r1, [r7, #0]
 800257e:	4649      	mov	r1, r9
 8002580:	414b      	adcs	r3, r1
 8002582:	607b      	str	r3, [r7, #4]
 8002584:	f04f 0200 	mov.w	r2, #0
 8002588:	f04f 0300 	mov.w	r3, #0
 800258c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002590:	4659      	mov	r1, fp
 8002592:	00cb      	lsls	r3, r1, #3
 8002594:	4651      	mov	r1, sl
 8002596:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800259a:	4651      	mov	r1, sl
 800259c:	00ca      	lsls	r2, r1, #3
 800259e:	4610      	mov	r0, r2
 80025a0:	4619      	mov	r1, r3
 80025a2:	4603      	mov	r3, r0
 80025a4:	4642      	mov	r2, r8
 80025a6:	189b      	adds	r3, r3, r2
 80025a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80025aa:	464b      	mov	r3, r9
 80025ac:	460a      	mov	r2, r1
 80025ae:	eb42 0303 	adc.w	r3, r2, r3
 80025b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	663b      	str	r3, [r7, #96]	; 0x60
 80025be:	667a      	str	r2, [r7, #100]	; 0x64
 80025c0:	f04f 0200 	mov.w	r2, #0
 80025c4:	f04f 0300 	mov.w	r3, #0
 80025c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80025cc:	4649      	mov	r1, r9
 80025ce:	008b      	lsls	r3, r1, #2
 80025d0:	4641      	mov	r1, r8
 80025d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025d6:	4641      	mov	r1, r8
 80025d8:	008a      	lsls	r2, r1, #2
 80025da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80025de:	f7fd fe67 	bl	80002b0 <__aeabi_uldivmod>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4b0d      	ldr	r3, [pc, #52]	; (800261c <UART_SetConfig+0x4e4>)
 80025e8:	fba3 1302 	umull	r1, r3, r3, r2
 80025ec:	095b      	lsrs	r3, r3, #5
 80025ee:	2164      	movs	r1, #100	; 0x64
 80025f0:	fb01 f303 	mul.w	r3, r1, r3
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	3332      	adds	r3, #50	; 0x32
 80025fa:	4a08      	ldr	r2, [pc, #32]	; (800261c <UART_SetConfig+0x4e4>)
 80025fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002600:	095b      	lsrs	r3, r3, #5
 8002602:	f003 020f 	and.w	r2, r3, #15
 8002606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4422      	add	r2, r4
 800260e:	609a      	str	r2, [r3, #8]
}
 8002610:	bf00      	nop
 8002612:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002616:	46bd      	mov	sp, r7
 8002618:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800261c:	51eb851f 	.word	0x51eb851f

08002620 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002624:	4b05      	ldr	r3, [pc, #20]	; (800263c <SysTick_Handler+0x1c>)
 8002626:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002628:	f000 f996 	bl	8002958 <xTaskGetSchedulerState>
 800262c:	4603      	mov	r3, r0
 800262e:	2b01      	cmp	r3, #1
 8002630:	d001      	beq.n	8002636 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002632:	f000 fa01 	bl	8002a38 <xPortSysTickHandler>
  }
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	e000e010 	.word	0xe000e010

08002640 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	1c5a      	adds	r2, r3, #1
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	601a      	str	r2, [r3, #0]
}
 800267c:	bf00      	nop
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6892      	ldr	r2, [r2, #8]
 800269e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6852      	ldr	r2, [r2, #4]
 80026a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d103      	bne.n	80026bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	1e5a      	subs	r2, r3, #1
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026e6:	4b4f      	ldr	r3, [pc, #316]	; (8002824 <xTaskIncrementTick+0x148>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f040 808f 	bne.w	800280e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80026f0:	4b4d      	ldr	r3, [pc, #308]	; (8002828 <xTaskIncrementTick+0x14c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	3301      	adds	r3, #1
 80026f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80026f8:	4a4b      	ldr	r2, [pc, #300]	; (8002828 <xTaskIncrementTick+0x14c>)
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d120      	bne.n	8002746 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002704:	4b49      	ldr	r3, [pc, #292]	; (800282c <xTaskIncrementTick+0x150>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00a      	beq.n	8002724 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800270e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002712:	f383 8811 	msr	BASEPRI, r3
 8002716:	f3bf 8f6f 	isb	sy
 800271a:	f3bf 8f4f 	dsb	sy
 800271e:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002720:	bf00      	nop
 8002722:	e7fe      	b.n	8002722 <xTaskIncrementTick+0x46>
 8002724:	4b41      	ldr	r3, [pc, #260]	; (800282c <xTaskIncrementTick+0x150>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	4b41      	ldr	r3, [pc, #260]	; (8002830 <xTaskIncrementTick+0x154>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a3f      	ldr	r2, [pc, #252]	; (800282c <xTaskIncrementTick+0x150>)
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	4a3f      	ldr	r2, [pc, #252]	; (8002830 <xTaskIncrementTick+0x154>)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6013      	str	r3, [r2, #0]
 8002738:	4b3e      	ldr	r3, [pc, #248]	; (8002834 <xTaskIncrementTick+0x158>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	3301      	adds	r3, #1
 800273e:	4a3d      	ldr	r2, [pc, #244]	; (8002834 <xTaskIncrementTick+0x158>)
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	f000 f8e9 	bl	8002918 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002746:	4b3c      	ldr	r3, [pc, #240]	; (8002838 <xTaskIncrementTick+0x15c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	429a      	cmp	r2, r3
 800274e:	d349      	bcc.n	80027e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002750:	4b36      	ldr	r3, [pc, #216]	; (800282c <xTaskIncrementTick+0x150>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d104      	bne.n	8002764 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800275a:	4b37      	ldr	r3, [pc, #220]	; (8002838 <xTaskIncrementTick+0x15c>)
 800275c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002760:	601a      	str	r2, [r3, #0]
					break;
 8002762:	e03f      	b.n	80027e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002764:	4b31      	ldr	r3, [pc, #196]	; (800282c <xTaskIncrementTick+0x150>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	429a      	cmp	r2, r3
 800277a:	d203      	bcs.n	8002784 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800277c:	4a2e      	ldr	r2, [pc, #184]	; (8002838 <xTaskIncrementTick+0x15c>)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002782:	e02f      	b.n	80027e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	3304      	adds	r3, #4
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff ff7d 	bl	8002688 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002792:	2b00      	cmp	r3, #0
 8002794:	d004      	beq.n	80027a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	3318      	adds	r3, #24
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff ff74 	bl	8002688 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a4:	4b25      	ldr	r3, [pc, #148]	; (800283c <xTaskIncrementTick+0x160>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d903      	bls.n	80027b4 <xTaskIncrementTick+0xd8>
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b0:	4a22      	ldr	r2, [pc, #136]	; (800283c <xTaskIncrementTick+0x160>)
 80027b2:	6013      	str	r3, [r2, #0]
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b8:	4613      	mov	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4a1f      	ldr	r2, [pc, #124]	; (8002840 <xTaskIncrementTick+0x164>)
 80027c2:	441a      	add	r2, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	3304      	adds	r3, #4
 80027c8:	4619      	mov	r1, r3
 80027ca:	4610      	mov	r0, r2
 80027cc:	f7ff ff38 	bl	8002640 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d4:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <xTaskIncrementTick+0x168>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027da:	429a      	cmp	r2, r3
 80027dc:	d3b8      	bcc.n	8002750 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80027de:	2301      	movs	r3, #1
 80027e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027e2:	e7b5      	b.n	8002750 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80027e4:	4b17      	ldr	r3, [pc, #92]	; (8002844 <xTaskIncrementTick+0x168>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ea:	4915      	ldr	r1, [pc, #84]	; (8002840 <xTaskIncrementTick+0x164>)
 80027ec:	4613      	mov	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d901      	bls.n	8002800 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80027fc:	2301      	movs	r3, #1
 80027fe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002800:	4b11      	ldr	r3, [pc, #68]	; (8002848 <xTaskIncrementTick+0x16c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d007      	beq.n	8002818 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002808:	2301      	movs	r3, #1
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	e004      	b.n	8002818 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800280e:	4b0f      	ldr	r3, [pc, #60]	; (800284c <xTaskIncrementTick+0x170>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	3301      	adds	r3, #1
 8002814:	4a0d      	ldr	r2, [pc, #52]	; (800284c <xTaskIncrementTick+0x170>)
 8002816:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002818:	697b      	ldr	r3, [r7, #20]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	200005a4 	.word	0x200005a4
 8002828:	20000588 	.word	0x20000588
 800282c:	20000580 	.word	0x20000580
 8002830:	20000584 	.word	0x20000584
 8002834:	2000059c 	.word	0x2000059c
 8002838:	200005a0 	.word	0x200005a0
 800283c:	2000058c 	.word	0x2000058c
 8002840:	20000120 	.word	0x20000120
 8002844:	2000011c 	.word	0x2000011c
 8002848:	20000598 	.word	0x20000598
 800284c:	20000594 	.word	0x20000594

08002850 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002856:	4b2a      	ldr	r3, [pc, #168]	; (8002900 <vTaskSwitchContext+0xb0>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800285e:	4b29      	ldr	r3, [pc, #164]	; (8002904 <vTaskSwitchContext+0xb4>)
 8002860:	2201      	movs	r2, #1
 8002862:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002864:	e046      	b.n	80028f4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8002866:	4b27      	ldr	r3, [pc, #156]	; (8002904 <vTaskSwitchContext+0xb4>)
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800286c:	4b26      	ldr	r3, [pc, #152]	; (8002908 <vTaskSwitchContext+0xb8>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	e010      	b.n	8002896 <vTaskSwitchContext+0x46>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10a      	bne.n	8002890 <vTaskSwitchContext+0x40>
	__asm volatile
 800287a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800287e:	f383 8811 	msr	BASEPRI, r3
 8002882:	f3bf 8f6f 	isb	sy
 8002886:	f3bf 8f4f 	dsb	sy
 800288a:	607b      	str	r3, [r7, #4]
}
 800288c:	bf00      	nop
 800288e:	e7fe      	b.n	800288e <vTaskSwitchContext+0x3e>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	3b01      	subs	r3, #1
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	491d      	ldr	r1, [pc, #116]	; (800290c <vTaskSwitchContext+0xbc>)
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	440b      	add	r3, r1
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0e4      	beq.n	8002874 <vTaskSwitchContext+0x24>
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	4613      	mov	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4a15      	ldr	r2, [pc, #84]	; (800290c <vTaskSwitchContext+0xbc>)
 80028b6:	4413      	add	r3, r2
 80028b8:	60bb      	str	r3, [r7, #8]
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	605a      	str	r2, [r3, #4]
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	3308      	adds	r3, #8
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d104      	bne.n	80028da <vTaskSwitchContext+0x8a>
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	4a0b      	ldr	r2, [pc, #44]	; (8002910 <vTaskSwitchContext+0xc0>)
 80028e2:	6013      	str	r3, [r2, #0]
 80028e4:	4a08      	ldr	r2, [pc, #32]	; (8002908 <vTaskSwitchContext+0xb8>)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80028ea:	4b09      	ldr	r3, [pc, #36]	; (8002910 <vTaskSwitchContext+0xc0>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	3354      	adds	r3, #84	; 0x54
 80028f0:	4a08      	ldr	r2, [pc, #32]	; (8002914 <vTaskSwitchContext+0xc4>)
 80028f2:	6013      	str	r3, [r2, #0]
}
 80028f4:	bf00      	nop
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	200005a4 	.word	0x200005a4
 8002904:	20000598 	.word	0x20000598
 8002908:	2000058c 	.word	0x2000058c
 800290c:	20000120 	.word	0x20000120
 8002910:	2000011c 	.word	0x2000011c
 8002914:	20000064 	.word	0x20000064

08002918 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800291e:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <prvResetNextTaskUnblockTime+0x38>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d104      	bne.n	8002932 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002928:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <prvResetNextTaskUnblockTime+0x3c>)
 800292a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800292e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002930:	e008      	b.n	8002944 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002932:	4b07      	ldr	r3, [pc, #28]	; (8002950 <prvResetNextTaskUnblockTime+0x38>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	4a04      	ldr	r2, [pc, #16]	; (8002954 <prvResetNextTaskUnblockTime+0x3c>)
 8002942:	6013      	str	r3, [r2, #0]
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	20000580 	.word	0x20000580
 8002954:	200005a0 	.word	0x200005a0

08002958 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800295e:	4b0b      	ldr	r3, [pc, #44]	; (800298c <xTaskGetSchedulerState+0x34>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d102      	bne.n	800296c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002966:	2301      	movs	r3, #1
 8002968:	607b      	str	r3, [r7, #4]
 800296a:	e008      	b.n	800297e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800296c:	4b08      	ldr	r3, [pc, #32]	; (8002990 <xTaskGetSchedulerState+0x38>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d102      	bne.n	800297a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002974:	2302      	movs	r3, #2
 8002976:	607b      	str	r3, [r7, #4]
 8002978:	e001      	b.n	800297e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800297a:	2300      	movs	r3, #0
 800297c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800297e:	687b      	ldr	r3, [r7, #4]
	}
 8002980:	4618      	mov	r0, r3
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	20000590 	.word	0x20000590
 8002990:	200005a4 	.word	0x200005a4
	...

080029a0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80029a0:	4b07      	ldr	r3, [pc, #28]	; (80029c0 <pxCurrentTCBConst2>)
 80029a2:	6819      	ldr	r1, [r3, #0]
 80029a4:	6808      	ldr	r0, [r1, #0]
 80029a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029aa:	f380 8809 	msr	PSP, r0
 80029ae:	f3bf 8f6f 	isb	sy
 80029b2:	f04f 0000 	mov.w	r0, #0
 80029b6:	f380 8811 	msr	BASEPRI, r0
 80029ba:	4770      	bx	lr
 80029bc:	f3af 8000 	nop.w

080029c0 <pxCurrentTCBConst2>:
 80029c0:	2000011c 	.word	0x2000011c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80029c4:	bf00      	nop
 80029c6:	bf00      	nop
	...

080029d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80029d0:	f3ef 8009 	mrs	r0, PSP
 80029d4:	f3bf 8f6f 	isb	sy
 80029d8:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <pxCurrentTCBConst>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	f01e 0f10 	tst.w	lr, #16
 80029e0:	bf08      	it	eq
 80029e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80029e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029ea:	6010      	str	r0, [r2, #0]
 80029ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80029f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80029f4:	f380 8811 	msr	BASEPRI, r0
 80029f8:	f3bf 8f4f 	dsb	sy
 80029fc:	f3bf 8f6f 	isb	sy
 8002a00:	f7ff ff26 	bl	8002850 <vTaskSwitchContext>
 8002a04:	f04f 0000 	mov.w	r0, #0
 8002a08:	f380 8811 	msr	BASEPRI, r0
 8002a0c:	bc09      	pop	{r0, r3}
 8002a0e:	6819      	ldr	r1, [r3, #0]
 8002a10:	6808      	ldr	r0, [r1, #0]
 8002a12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a16:	f01e 0f10 	tst.w	lr, #16
 8002a1a:	bf08      	it	eq
 8002a1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002a20:	f380 8809 	msr	PSP, r0
 8002a24:	f3bf 8f6f 	isb	sy
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	f3af 8000 	nop.w

08002a30 <pxCurrentTCBConst>:
 8002a30:	2000011c 	.word	0x2000011c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002a34:	bf00      	nop
 8002a36:	bf00      	nop

08002a38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8002a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a42:	f383 8811 	msr	BASEPRI, r3
 8002a46:	f3bf 8f6f 	isb	sy
 8002a4a:	f3bf 8f4f 	dsb	sy
 8002a4e:	607b      	str	r3, [r7, #4]
}
 8002a50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002a52:	f7ff fe43 	bl	80026dc <xTaskIncrementTick>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002a5c:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <xPortSysTickHandler+0x40>)
 8002a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	2300      	movs	r3, #0
 8002a66:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002a6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002a70:	bf00      	nop
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	e000ed04 	.word	0xe000ed04

08002a7c <std>:
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	b510      	push	{r4, lr}
 8002a80:	4604      	mov	r4, r0
 8002a82:	e9c0 3300 	strd	r3, r3, [r0]
 8002a86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a8a:	6083      	str	r3, [r0, #8]
 8002a8c:	8181      	strh	r1, [r0, #12]
 8002a8e:	6643      	str	r3, [r0, #100]	; 0x64
 8002a90:	81c2      	strh	r2, [r0, #14]
 8002a92:	6183      	str	r3, [r0, #24]
 8002a94:	4619      	mov	r1, r3
 8002a96:	2208      	movs	r2, #8
 8002a98:	305c      	adds	r0, #92	; 0x5c
 8002a9a:	f000 f8c3 	bl	8002c24 <memset>
 8002a9e:	4b0d      	ldr	r3, [pc, #52]	; (8002ad4 <std+0x58>)
 8002aa0:	6263      	str	r3, [r4, #36]	; 0x24
 8002aa2:	4b0d      	ldr	r3, [pc, #52]	; (8002ad8 <std+0x5c>)
 8002aa4:	62a3      	str	r3, [r4, #40]	; 0x28
 8002aa6:	4b0d      	ldr	r3, [pc, #52]	; (8002adc <std+0x60>)
 8002aa8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002aaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ae0 <std+0x64>)
 8002aac:	6323      	str	r3, [r4, #48]	; 0x30
 8002aae:	4b0d      	ldr	r3, [pc, #52]	; (8002ae4 <std+0x68>)
 8002ab0:	6224      	str	r4, [r4, #32]
 8002ab2:	429c      	cmp	r4, r3
 8002ab4:	d006      	beq.n	8002ac4 <std+0x48>
 8002ab6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002aba:	4294      	cmp	r4, r2
 8002abc:	d002      	beq.n	8002ac4 <std+0x48>
 8002abe:	33d0      	adds	r3, #208	; 0xd0
 8002ac0:	429c      	cmp	r4, r3
 8002ac2:	d105      	bne.n	8002ad0 <std+0x54>
 8002ac4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002acc:	f000 b8dc 	b.w	8002c88 <__retarget_lock_init_recursive>
 8002ad0:	bd10      	pop	{r4, pc}
 8002ad2:	bf00      	nop
 8002ad4:	08003585 	.word	0x08003585
 8002ad8:	080035a7 	.word	0x080035a7
 8002adc:	080035df 	.word	0x080035df
 8002ae0:	08003603 	.word	0x08003603
 8002ae4:	200005a8 	.word	0x200005a8

08002ae8 <stdio_exit_handler>:
 8002ae8:	4a02      	ldr	r2, [pc, #8]	; (8002af4 <stdio_exit_handler+0xc>)
 8002aea:	4903      	ldr	r1, [pc, #12]	; (8002af8 <stdio_exit_handler+0x10>)
 8002aec:	4803      	ldr	r0, [pc, #12]	; (8002afc <stdio_exit_handler+0x14>)
 8002aee:	f000 b869 	b.w	8002bc4 <_fwalk_sglue>
 8002af2:	bf00      	nop
 8002af4:	2000000c 	.word	0x2000000c
 8002af8:	0800351d 	.word	0x0800351d
 8002afc:	20000018 	.word	0x20000018

08002b00 <cleanup_stdio>:
 8002b00:	6841      	ldr	r1, [r0, #4]
 8002b02:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <cleanup_stdio+0x34>)
 8002b04:	4299      	cmp	r1, r3
 8002b06:	b510      	push	{r4, lr}
 8002b08:	4604      	mov	r4, r0
 8002b0a:	d001      	beq.n	8002b10 <cleanup_stdio+0x10>
 8002b0c:	f000 fd06 	bl	800351c <_fflush_r>
 8002b10:	68a1      	ldr	r1, [r4, #8]
 8002b12:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <cleanup_stdio+0x38>)
 8002b14:	4299      	cmp	r1, r3
 8002b16:	d002      	beq.n	8002b1e <cleanup_stdio+0x1e>
 8002b18:	4620      	mov	r0, r4
 8002b1a:	f000 fcff 	bl	800351c <_fflush_r>
 8002b1e:	68e1      	ldr	r1, [r4, #12]
 8002b20:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <cleanup_stdio+0x3c>)
 8002b22:	4299      	cmp	r1, r3
 8002b24:	d004      	beq.n	8002b30 <cleanup_stdio+0x30>
 8002b26:	4620      	mov	r0, r4
 8002b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b2c:	f000 bcf6 	b.w	800351c <_fflush_r>
 8002b30:	bd10      	pop	{r4, pc}
 8002b32:	bf00      	nop
 8002b34:	200005a8 	.word	0x200005a8
 8002b38:	20000610 	.word	0x20000610
 8002b3c:	20000678 	.word	0x20000678

08002b40 <global_stdio_init.part.0>:
 8002b40:	b510      	push	{r4, lr}
 8002b42:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <global_stdio_init.part.0+0x30>)
 8002b44:	4c0b      	ldr	r4, [pc, #44]	; (8002b74 <global_stdio_init.part.0+0x34>)
 8002b46:	4a0c      	ldr	r2, [pc, #48]	; (8002b78 <global_stdio_init.part.0+0x38>)
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	2104      	movs	r1, #4
 8002b50:	f7ff ff94 	bl	8002a7c <std>
 8002b54:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002b58:	2201      	movs	r2, #1
 8002b5a:	2109      	movs	r1, #9
 8002b5c:	f7ff ff8e 	bl	8002a7c <std>
 8002b60:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002b64:	2202      	movs	r2, #2
 8002b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b6a:	2112      	movs	r1, #18
 8002b6c:	f7ff bf86 	b.w	8002a7c <std>
 8002b70:	200006e0 	.word	0x200006e0
 8002b74:	200005a8 	.word	0x200005a8
 8002b78:	08002ae9 	.word	0x08002ae9

08002b7c <__sfp_lock_acquire>:
 8002b7c:	4801      	ldr	r0, [pc, #4]	; (8002b84 <__sfp_lock_acquire+0x8>)
 8002b7e:	f000 b884 	b.w	8002c8a <__retarget_lock_acquire_recursive>
 8002b82:	bf00      	nop
 8002b84:	200006e9 	.word	0x200006e9

08002b88 <__sfp_lock_release>:
 8002b88:	4801      	ldr	r0, [pc, #4]	; (8002b90 <__sfp_lock_release+0x8>)
 8002b8a:	f000 b87f 	b.w	8002c8c <__retarget_lock_release_recursive>
 8002b8e:	bf00      	nop
 8002b90:	200006e9 	.word	0x200006e9

08002b94 <__sinit>:
 8002b94:	b510      	push	{r4, lr}
 8002b96:	4604      	mov	r4, r0
 8002b98:	f7ff fff0 	bl	8002b7c <__sfp_lock_acquire>
 8002b9c:	6a23      	ldr	r3, [r4, #32]
 8002b9e:	b11b      	cbz	r3, 8002ba8 <__sinit+0x14>
 8002ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ba4:	f7ff bff0 	b.w	8002b88 <__sfp_lock_release>
 8002ba8:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <__sinit+0x28>)
 8002baa:	6223      	str	r3, [r4, #32]
 8002bac:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <__sinit+0x2c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1f5      	bne.n	8002ba0 <__sinit+0xc>
 8002bb4:	f7ff ffc4 	bl	8002b40 <global_stdio_init.part.0>
 8002bb8:	e7f2      	b.n	8002ba0 <__sinit+0xc>
 8002bba:	bf00      	nop
 8002bbc:	08002b01 	.word	0x08002b01
 8002bc0:	200006e0 	.word	0x200006e0

08002bc4 <_fwalk_sglue>:
 8002bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bc8:	4607      	mov	r7, r0
 8002bca:	4688      	mov	r8, r1
 8002bcc:	4614      	mov	r4, r2
 8002bce:	2600      	movs	r6, #0
 8002bd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002bd4:	f1b9 0901 	subs.w	r9, r9, #1
 8002bd8:	d505      	bpl.n	8002be6 <_fwalk_sglue+0x22>
 8002bda:	6824      	ldr	r4, [r4, #0]
 8002bdc:	2c00      	cmp	r4, #0
 8002bde:	d1f7      	bne.n	8002bd0 <_fwalk_sglue+0xc>
 8002be0:	4630      	mov	r0, r6
 8002be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002be6:	89ab      	ldrh	r3, [r5, #12]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d907      	bls.n	8002bfc <_fwalk_sglue+0x38>
 8002bec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	d003      	beq.n	8002bfc <_fwalk_sglue+0x38>
 8002bf4:	4629      	mov	r1, r5
 8002bf6:	4638      	mov	r0, r7
 8002bf8:	47c0      	blx	r8
 8002bfa:	4306      	orrs	r6, r0
 8002bfc:	3568      	adds	r5, #104	; 0x68
 8002bfe:	e7e9      	b.n	8002bd4 <_fwalk_sglue+0x10>

08002c00 <iprintf>:
 8002c00:	b40f      	push	{r0, r1, r2, r3}
 8002c02:	b507      	push	{r0, r1, r2, lr}
 8002c04:	4906      	ldr	r1, [pc, #24]	; (8002c20 <iprintf+0x20>)
 8002c06:	ab04      	add	r3, sp, #16
 8002c08:	6808      	ldr	r0, [r1, #0]
 8002c0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c0e:	6881      	ldr	r1, [r0, #8]
 8002c10:	9301      	str	r3, [sp, #4]
 8002c12:	f000 f8b3 	bl	8002d7c <_vfiprintf_r>
 8002c16:	b003      	add	sp, #12
 8002c18:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c1c:	b004      	add	sp, #16
 8002c1e:	4770      	bx	lr
 8002c20:	20000064 	.word	0x20000064

08002c24 <memset>:
 8002c24:	4402      	add	r2, r0
 8002c26:	4603      	mov	r3, r0
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d100      	bne.n	8002c2e <memset+0xa>
 8002c2c:	4770      	bx	lr
 8002c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c32:	e7f9      	b.n	8002c28 <memset+0x4>

08002c34 <__errno>:
 8002c34:	4b01      	ldr	r3, [pc, #4]	; (8002c3c <__errno+0x8>)
 8002c36:	6818      	ldr	r0, [r3, #0]
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	20000064 	.word	0x20000064

08002c40 <__libc_init_array>:
 8002c40:	b570      	push	{r4, r5, r6, lr}
 8002c42:	4d0d      	ldr	r5, [pc, #52]	; (8002c78 <__libc_init_array+0x38>)
 8002c44:	4c0d      	ldr	r4, [pc, #52]	; (8002c7c <__libc_init_array+0x3c>)
 8002c46:	1b64      	subs	r4, r4, r5
 8002c48:	10a4      	asrs	r4, r4, #2
 8002c4a:	2600      	movs	r6, #0
 8002c4c:	42a6      	cmp	r6, r4
 8002c4e:	d109      	bne.n	8002c64 <__libc_init_array+0x24>
 8002c50:	4d0b      	ldr	r5, [pc, #44]	; (8002c80 <__libc_init_array+0x40>)
 8002c52:	4c0c      	ldr	r4, [pc, #48]	; (8002c84 <__libc_init_array+0x44>)
 8002c54:	f000 fe48 	bl	80038e8 <_init>
 8002c58:	1b64      	subs	r4, r4, r5
 8002c5a:	10a4      	asrs	r4, r4, #2
 8002c5c:	2600      	movs	r6, #0
 8002c5e:	42a6      	cmp	r6, r4
 8002c60:	d105      	bne.n	8002c6e <__libc_init_array+0x2e>
 8002c62:	bd70      	pop	{r4, r5, r6, pc}
 8002c64:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c68:	4798      	blx	r3
 8002c6a:	3601      	adds	r6, #1
 8002c6c:	e7ee      	b.n	8002c4c <__libc_init_array+0xc>
 8002c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c72:	4798      	blx	r3
 8002c74:	3601      	adds	r6, #1
 8002c76:	e7f2      	b.n	8002c5e <__libc_init_array+0x1e>
 8002c78:	08003968 	.word	0x08003968
 8002c7c:	08003968 	.word	0x08003968
 8002c80:	08003968 	.word	0x08003968
 8002c84:	0800396c 	.word	0x0800396c

08002c88 <__retarget_lock_init_recursive>:
 8002c88:	4770      	bx	lr

08002c8a <__retarget_lock_acquire_recursive>:
 8002c8a:	4770      	bx	lr

08002c8c <__retarget_lock_release_recursive>:
 8002c8c:	4770      	bx	lr
	...

08002c90 <_free_r>:
 8002c90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c92:	2900      	cmp	r1, #0
 8002c94:	d044      	beq.n	8002d20 <_free_r+0x90>
 8002c96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c9a:	9001      	str	r0, [sp, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f1a1 0404 	sub.w	r4, r1, #4
 8002ca2:	bfb8      	it	lt
 8002ca4:	18e4      	addlt	r4, r4, r3
 8002ca6:	f000 fc61 	bl	800356c <__malloc_lock>
 8002caa:	4a1e      	ldr	r2, [pc, #120]	; (8002d24 <_free_r+0x94>)
 8002cac:	9801      	ldr	r0, [sp, #4]
 8002cae:	6813      	ldr	r3, [r2, #0]
 8002cb0:	b933      	cbnz	r3, 8002cc0 <_free_r+0x30>
 8002cb2:	6063      	str	r3, [r4, #4]
 8002cb4:	6014      	str	r4, [r2, #0]
 8002cb6:	b003      	add	sp, #12
 8002cb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002cbc:	f000 bc5c 	b.w	8003578 <__malloc_unlock>
 8002cc0:	42a3      	cmp	r3, r4
 8002cc2:	d908      	bls.n	8002cd6 <_free_r+0x46>
 8002cc4:	6825      	ldr	r5, [r4, #0]
 8002cc6:	1961      	adds	r1, r4, r5
 8002cc8:	428b      	cmp	r3, r1
 8002cca:	bf01      	itttt	eq
 8002ccc:	6819      	ldreq	r1, [r3, #0]
 8002cce:	685b      	ldreq	r3, [r3, #4]
 8002cd0:	1949      	addeq	r1, r1, r5
 8002cd2:	6021      	streq	r1, [r4, #0]
 8002cd4:	e7ed      	b.n	8002cb2 <_free_r+0x22>
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	b10b      	cbz	r3, 8002ce0 <_free_r+0x50>
 8002cdc:	42a3      	cmp	r3, r4
 8002cde:	d9fa      	bls.n	8002cd6 <_free_r+0x46>
 8002ce0:	6811      	ldr	r1, [r2, #0]
 8002ce2:	1855      	adds	r5, r2, r1
 8002ce4:	42a5      	cmp	r5, r4
 8002ce6:	d10b      	bne.n	8002d00 <_free_r+0x70>
 8002ce8:	6824      	ldr	r4, [r4, #0]
 8002cea:	4421      	add	r1, r4
 8002cec:	1854      	adds	r4, r2, r1
 8002cee:	42a3      	cmp	r3, r4
 8002cf0:	6011      	str	r1, [r2, #0]
 8002cf2:	d1e0      	bne.n	8002cb6 <_free_r+0x26>
 8002cf4:	681c      	ldr	r4, [r3, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	6053      	str	r3, [r2, #4]
 8002cfa:	440c      	add	r4, r1
 8002cfc:	6014      	str	r4, [r2, #0]
 8002cfe:	e7da      	b.n	8002cb6 <_free_r+0x26>
 8002d00:	d902      	bls.n	8002d08 <_free_r+0x78>
 8002d02:	230c      	movs	r3, #12
 8002d04:	6003      	str	r3, [r0, #0]
 8002d06:	e7d6      	b.n	8002cb6 <_free_r+0x26>
 8002d08:	6825      	ldr	r5, [r4, #0]
 8002d0a:	1961      	adds	r1, r4, r5
 8002d0c:	428b      	cmp	r3, r1
 8002d0e:	bf04      	itt	eq
 8002d10:	6819      	ldreq	r1, [r3, #0]
 8002d12:	685b      	ldreq	r3, [r3, #4]
 8002d14:	6063      	str	r3, [r4, #4]
 8002d16:	bf04      	itt	eq
 8002d18:	1949      	addeq	r1, r1, r5
 8002d1a:	6021      	streq	r1, [r4, #0]
 8002d1c:	6054      	str	r4, [r2, #4]
 8002d1e:	e7ca      	b.n	8002cb6 <_free_r+0x26>
 8002d20:	b003      	add	sp, #12
 8002d22:	bd30      	pop	{r4, r5, pc}
 8002d24:	200006ec 	.word	0x200006ec

08002d28 <__sfputc_r>:
 8002d28:	6893      	ldr	r3, [r2, #8]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	b410      	push	{r4}
 8002d30:	6093      	str	r3, [r2, #8]
 8002d32:	da08      	bge.n	8002d46 <__sfputc_r+0x1e>
 8002d34:	6994      	ldr	r4, [r2, #24]
 8002d36:	42a3      	cmp	r3, r4
 8002d38:	db01      	blt.n	8002d3e <__sfputc_r+0x16>
 8002d3a:	290a      	cmp	r1, #10
 8002d3c:	d103      	bne.n	8002d46 <__sfputc_r+0x1e>
 8002d3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d42:	f000 bc62 	b.w	800360a <__swbuf_r>
 8002d46:	6813      	ldr	r3, [r2, #0]
 8002d48:	1c58      	adds	r0, r3, #1
 8002d4a:	6010      	str	r0, [r2, #0]
 8002d4c:	7019      	strb	r1, [r3, #0]
 8002d4e:	4608      	mov	r0, r1
 8002d50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <__sfputs_r>:
 8002d56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d58:	4606      	mov	r6, r0
 8002d5a:	460f      	mov	r7, r1
 8002d5c:	4614      	mov	r4, r2
 8002d5e:	18d5      	adds	r5, r2, r3
 8002d60:	42ac      	cmp	r4, r5
 8002d62:	d101      	bne.n	8002d68 <__sfputs_r+0x12>
 8002d64:	2000      	movs	r0, #0
 8002d66:	e007      	b.n	8002d78 <__sfputs_r+0x22>
 8002d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d6c:	463a      	mov	r2, r7
 8002d6e:	4630      	mov	r0, r6
 8002d70:	f7ff ffda 	bl	8002d28 <__sfputc_r>
 8002d74:	1c43      	adds	r3, r0, #1
 8002d76:	d1f3      	bne.n	8002d60 <__sfputs_r+0xa>
 8002d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002d7c <_vfiprintf_r>:
 8002d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d80:	460d      	mov	r5, r1
 8002d82:	b09d      	sub	sp, #116	; 0x74
 8002d84:	4614      	mov	r4, r2
 8002d86:	4698      	mov	r8, r3
 8002d88:	4606      	mov	r6, r0
 8002d8a:	b118      	cbz	r0, 8002d94 <_vfiprintf_r+0x18>
 8002d8c:	6a03      	ldr	r3, [r0, #32]
 8002d8e:	b90b      	cbnz	r3, 8002d94 <_vfiprintf_r+0x18>
 8002d90:	f7ff ff00 	bl	8002b94 <__sinit>
 8002d94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d96:	07d9      	lsls	r1, r3, #31
 8002d98:	d405      	bmi.n	8002da6 <_vfiprintf_r+0x2a>
 8002d9a:	89ab      	ldrh	r3, [r5, #12]
 8002d9c:	059a      	lsls	r2, r3, #22
 8002d9e:	d402      	bmi.n	8002da6 <_vfiprintf_r+0x2a>
 8002da0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002da2:	f7ff ff72 	bl	8002c8a <__retarget_lock_acquire_recursive>
 8002da6:	89ab      	ldrh	r3, [r5, #12]
 8002da8:	071b      	lsls	r3, r3, #28
 8002daa:	d501      	bpl.n	8002db0 <_vfiprintf_r+0x34>
 8002dac:	692b      	ldr	r3, [r5, #16]
 8002dae:	b99b      	cbnz	r3, 8002dd8 <_vfiprintf_r+0x5c>
 8002db0:	4629      	mov	r1, r5
 8002db2:	4630      	mov	r0, r6
 8002db4:	f000 fc66 	bl	8003684 <__swsetup_r>
 8002db8:	b170      	cbz	r0, 8002dd8 <_vfiprintf_r+0x5c>
 8002dba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002dbc:	07dc      	lsls	r4, r3, #31
 8002dbe:	d504      	bpl.n	8002dca <_vfiprintf_r+0x4e>
 8002dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dc4:	b01d      	add	sp, #116	; 0x74
 8002dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dca:	89ab      	ldrh	r3, [r5, #12]
 8002dcc:	0598      	lsls	r0, r3, #22
 8002dce:	d4f7      	bmi.n	8002dc0 <_vfiprintf_r+0x44>
 8002dd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002dd2:	f7ff ff5b 	bl	8002c8c <__retarget_lock_release_recursive>
 8002dd6:	e7f3      	b.n	8002dc0 <_vfiprintf_r+0x44>
 8002dd8:	2300      	movs	r3, #0
 8002dda:	9309      	str	r3, [sp, #36]	; 0x24
 8002ddc:	2320      	movs	r3, #32
 8002dde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002de2:	f8cd 800c 	str.w	r8, [sp, #12]
 8002de6:	2330      	movs	r3, #48	; 0x30
 8002de8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002f9c <_vfiprintf_r+0x220>
 8002dec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002df0:	f04f 0901 	mov.w	r9, #1
 8002df4:	4623      	mov	r3, r4
 8002df6:	469a      	mov	sl, r3
 8002df8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002dfc:	b10a      	cbz	r2, 8002e02 <_vfiprintf_r+0x86>
 8002dfe:	2a25      	cmp	r2, #37	; 0x25
 8002e00:	d1f9      	bne.n	8002df6 <_vfiprintf_r+0x7a>
 8002e02:	ebba 0b04 	subs.w	fp, sl, r4
 8002e06:	d00b      	beq.n	8002e20 <_vfiprintf_r+0xa4>
 8002e08:	465b      	mov	r3, fp
 8002e0a:	4622      	mov	r2, r4
 8002e0c:	4629      	mov	r1, r5
 8002e0e:	4630      	mov	r0, r6
 8002e10:	f7ff ffa1 	bl	8002d56 <__sfputs_r>
 8002e14:	3001      	adds	r0, #1
 8002e16:	f000 80a9 	beq.w	8002f6c <_vfiprintf_r+0x1f0>
 8002e1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e1c:	445a      	add	r2, fp
 8002e1e:	9209      	str	r2, [sp, #36]	; 0x24
 8002e20:	f89a 3000 	ldrb.w	r3, [sl]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 80a1 	beq.w	8002f6c <_vfiprintf_r+0x1f0>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e34:	f10a 0a01 	add.w	sl, sl, #1
 8002e38:	9304      	str	r3, [sp, #16]
 8002e3a:	9307      	str	r3, [sp, #28]
 8002e3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e40:	931a      	str	r3, [sp, #104]	; 0x68
 8002e42:	4654      	mov	r4, sl
 8002e44:	2205      	movs	r2, #5
 8002e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e4a:	4854      	ldr	r0, [pc, #336]	; (8002f9c <_vfiprintf_r+0x220>)
 8002e4c:	f7fd f9e0 	bl	8000210 <memchr>
 8002e50:	9a04      	ldr	r2, [sp, #16]
 8002e52:	b9d8      	cbnz	r0, 8002e8c <_vfiprintf_r+0x110>
 8002e54:	06d1      	lsls	r1, r2, #27
 8002e56:	bf44      	itt	mi
 8002e58:	2320      	movmi	r3, #32
 8002e5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e5e:	0713      	lsls	r3, r2, #28
 8002e60:	bf44      	itt	mi
 8002e62:	232b      	movmi	r3, #43	; 0x2b
 8002e64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e68:	f89a 3000 	ldrb.w	r3, [sl]
 8002e6c:	2b2a      	cmp	r3, #42	; 0x2a
 8002e6e:	d015      	beq.n	8002e9c <_vfiprintf_r+0x120>
 8002e70:	9a07      	ldr	r2, [sp, #28]
 8002e72:	4654      	mov	r4, sl
 8002e74:	2000      	movs	r0, #0
 8002e76:	f04f 0c0a 	mov.w	ip, #10
 8002e7a:	4621      	mov	r1, r4
 8002e7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e80:	3b30      	subs	r3, #48	; 0x30
 8002e82:	2b09      	cmp	r3, #9
 8002e84:	d94d      	bls.n	8002f22 <_vfiprintf_r+0x1a6>
 8002e86:	b1b0      	cbz	r0, 8002eb6 <_vfiprintf_r+0x13a>
 8002e88:	9207      	str	r2, [sp, #28]
 8002e8a:	e014      	b.n	8002eb6 <_vfiprintf_r+0x13a>
 8002e8c:	eba0 0308 	sub.w	r3, r0, r8
 8002e90:	fa09 f303 	lsl.w	r3, r9, r3
 8002e94:	4313      	orrs	r3, r2
 8002e96:	9304      	str	r3, [sp, #16]
 8002e98:	46a2      	mov	sl, r4
 8002e9a:	e7d2      	b.n	8002e42 <_vfiprintf_r+0xc6>
 8002e9c:	9b03      	ldr	r3, [sp, #12]
 8002e9e:	1d19      	adds	r1, r3, #4
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	9103      	str	r1, [sp, #12]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	bfbb      	ittet	lt
 8002ea8:	425b      	neglt	r3, r3
 8002eaa:	f042 0202 	orrlt.w	r2, r2, #2
 8002eae:	9307      	strge	r3, [sp, #28]
 8002eb0:	9307      	strlt	r3, [sp, #28]
 8002eb2:	bfb8      	it	lt
 8002eb4:	9204      	strlt	r2, [sp, #16]
 8002eb6:	7823      	ldrb	r3, [r4, #0]
 8002eb8:	2b2e      	cmp	r3, #46	; 0x2e
 8002eba:	d10c      	bne.n	8002ed6 <_vfiprintf_r+0x15a>
 8002ebc:	7863      	ldrb	r3, [r4, #1]
 8002ebe:	2b2a      	cmp	r3, #42	; 0x2a
 8002ec0:	d134      	bne.n	8002f2c <_vfiprintf_r+0x1b0>
 8002ec2:	9b03      	ldr	r3, [sp, #12]
 8002ec4:	1d1a      	adds	r2, r3, #4
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	9203      	str	r2, [sp, #12]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	bfb8      	it	lt
 8002ece:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002ed2:	3402      	adds	r4, #2
 8002ed4:	9305      	str	r3, [sp, #20]
 8002ed6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8002fac <_vfiprintf_r+0x230>
 8002eda:	7821      	ldrb	r1, [r4, #0]
 8002edc:	2203      	movs	r2, #3
 8002ede:	4650      	mov	r0, sl
 8002ee0:	f7fd f996 	bl	8000210 <memchr>
 8002ee4:	b138      	cbz	r0, 8002ef6 <_vfiprintf_r+0x17a>
 8002ee6:	9b04      	ldr	r3, [sp, #16]
 8002ee8:	eba0 000a 	sub.w	r0, r0, sl
 8002eec:	2240      	movs	r2, #64	; 0x40
 8002eee:	4082      	lsls	r2, r0
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	3401      	adds	r4, #1
 8002ef4:	9304      	str	r3, [sp, #16]
 8002ef6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002efa:	4829      	ldr	r0, [pc, #164]	; (8002fa0 <_vfiprintf_r+0x224>)
 8002efc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f00:	2206      	movs	r2, #6
 8002f02:	f7fd f985 	bl	8000210 <memchr>
 8002f06:	2800      	cmp	r0, #0
 8002f08:	d03f      	beq.n	8002f8a <_vfiprintf_r+0x20e>
 8002f0a:	4b26      	ldr	r3, [pc, #152]	; (8002fa4 <_vfiprintf_r+0x228>)
 8002f0c:	bb1b      	cbnz	r3, 8002f56 <_vfiprintf_r+0x1da>
 8002f0e:	9b03      	ldr	r3, [sp, #12]
 8002f10:	3307      	adds	r3, #7
 8002f12:	f023 0307 	bic.w	r3, r3, #7
 8002f16:	3308      	adds	r3, #8
 8002f18:	9303      	str	r3, [sp, #12]
 8002f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f1c:	443b      	add	r3, r7
 8002f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8002f20:	e768      	b.n	8002df4 <_vfiprintf_r+0x78>
 8002f22:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f26:	460c      	mov	r4, r1
 8002f28:	2001      	movs	r0, #1
 8002f2a:	e7a6      	b.n	8002e7a <_vfiprintf_r+0xfe>
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	3401      	adds	r4, #1
 8002f30:	9305      	str	r3, [sp, #20]
 8002f32:	4619      	mov	r1, r3
 8002f34:	f04f 0c0a 	mov.w	ip, #10
 8002f38:	4620      	mov	r0, r4
 8002f3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f3e:	3a30      	subs	r2, #48	; 0x30
 8002f40:	2a09      	cmp	r2, #9
 8002f42:	d903      	bls.n	8002f4c <_vfiprintf_r+0x1d0>
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0c6      	beq.n	8002ed6 <_vfiprintf_r+0x15a>
 8002f48:	9105      	str	r1, [sp, #20]
 8002f4a:	e7c4      	b.n	8002ed6 <_vfiprintf_r+0x15a>
 8002f4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f50:	4604      	mov	r4, r0
 8002f52:	2301      	movs	r3, #1
 8002f54:	e7f0      	b.n	8002f38 <_vfiprintf_r+0x1bc>
 8002f56:	ab03      	add	r3, sp, #12
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	462a      	mov	r2, r5
 8002f5c:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <_vfiprintf_r+0x22c>)
 8002f5e:	a904      	add	r1, sp, #16
 8002f60:	4630      	mov	r0, r6
 8002f62:	f3af 8000 	nop.w
 8002f66:	4607      	mov	r7, r0
 8002f68:	1c78      	adds	r0, r7, #1
 8002f6a:	d1d6      	bne.n	8002f1a <_vfiprintf_r+0x19e>
 8002f6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f6e:	07d9      	lsls	r1, r3, #31
 8002f70:	d405      	bmi.n	8002f7e <_vfiprintf_r+0x202>
 8002f72:	89ab      	ldrh	r3, [r5, #12]
 8002f74:	059a      	lsls	r2, r3, #22
 8002f76:	d402      	bmi.n	8002f7e <_vfiprintf_r+0x202>
 8002f78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f7a:	f7ff fe87 	bl	8002c8c <__retarget_lock_release_recursive>
 8002f7e:	89ab      	ldrh	r3, [r5, #12]
 8002f80:	065b      	lsls	r3, r3, #25
 8002f82:	f53f af1d 	bmi.w	8002dc0 <_vfiprintf_r+0x44>
 8002f86:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f88:	e71c      	b.n	8002dc4 <_vfiprintf_r+0x48>
 8002f8a:	ab03      	add	r3, sp, #12
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	462a      	mov	r2, r5
 8002f90:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <_vfiprintf_r+0x22c>)
 8002f92:	a904      	add	r1, sp, #16
 8002f94:	4630      	mov	r0, r6
 8002f96:	f000 f919 	bl	80031cc <_printf_i>
 8002f9a:	e7e4      	b.n	8002f66 <_vfiprintf_r+0x1ea>
 8002f9c:	0800392c 	.word	0x0800392c
 8002fa0:	08003936 	.word	0x08003936
 8002fa4:	00000000 	.word	0x00000000
 8002fa8:	08002d57 	.word	0x08002d57
 8002fac:	08003932 	.word	0x08003932

08002fb0 <sbrk_aligned>:
 8002fb0:	b570      	push	{r4, r5, r6, lr}
 8002fb2:	4e0e      	ldr	r6, [pc, #56]	; (8002fec <sbrk_aligned+0x3c>)
 8002fb4:	460c      	mov	r4, r1
 8002fb6:	6831      	ldr	r1, [r6, #0]
 8002fb8:	4605      	mov	r5, r0
 8002fba:	b911      	cbnz	r1, 8002fc2 <sbrk_aligned+0x12>
 8002fbc:	f000 fc72 	bl	80038a4 <_sbrk_r>
 8002fc0:	6030      	str	r0, [r6, #0]
 8002fc2:	4621      	mov	r1, r4
 8002fc4:	4628      	mov	r0, r5
 8002fc6:	f000 fc6d 	bl	80038a4 <_sbrk_r>
 8002fca:	1c43      	adds	r3, r0, #1
 8002fcc:	d00a      	beq.n	8002fe4 <sbrk_aligned+0x34>
 8002fce:	1cc4      	adds	r4, r0, #3
 8002fd0:	f024 0403 	bic.w	r4, r4, #3
 8002fd4:	42a0      	cmp	r0, r4
 8002fd6:	d007      	beq.n	8002fe8 <sbrk_aligned+0x38>
 8002fd8:	1a21      	subs	r1, r4, r0
 8002fda:	4628      	mov	r0, r5
 8002fdc:	f000 fc62 	bl	80038a4 <_sbrk_r>
 8002fe0:	3001      	adds	r0, #1
 8002fe2:	d101      	bne.n	8002fe8 <sbrk_aligned+0x38>
 8002fe4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002fe8:	4620      	mov	r0, r4
 8002fea:	bd70      	pop	{r4, r5, r6, pc}
 8002fec:	200006f0 	.word	0x200006f0

08002ff0 <_malloc_r>:
 8002ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ff4:	1ccd      	adds	r5, r1, #3
 8002ff6:	f025 0503 	bic.w	r5, r5, #3
 8002ffa:	3508      	adds	r5, #8
 8002ffc:	2d0c      	cmp	r5, #12
 8002ffe:	bf38      	it	cc
 8003000:	250c      	movcc	r5, #12
 8003002:	2d00      	cmp	r5, #0
 8003004:	4607      	mov	r7, r0
 8003006:	db01      	blt.n	800300c <_malloc_r+0x1c>
 8003008:	42a9      	cmp	r1, r5
 800300a:	d905      	bls.n	8003018 <_malloc_r+0x28>
 800300c:	230c      	movs	r3, #12
 800300e:	603b      	str	r3, [r7, #0]
 8003010:	2600      	movs	r6, #0
 8003012:	4630      	mov	r0, r6
 8003014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003018:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80030ec <_malloc_r+0xfc>
 800301c:	f000 faa6 	bl	800356c <__malloc_lock>
 8003020:	f8d8 3000 	ldr.w	r3, [r8]
 8003024:	461c      	mov	r4, r3
 8003026:	bb5c      	cbnz	r4, 8003080 <_malloc_r+0x90>
 8003028:	4629      	mov	r1, r5
 800302a:	4638      	mov	r0, r7
 800302c:	f7ff ffc0 	bl	8002fb0 <sbrk_aligned>
 8003030:	1c43      	adds	r3, r0, #1
 8003032:	4604      	mov	r4, r0
 8003034:	d155      	bne.n	80030e2 <_malloc_r+0xf2>
 8003036:	f8d8 4000 	ldr.w	r4, [r8]
 800303a:	4626      	mov	r6, r4
 800303c:	2e00      	cmp	r6, #0
 800303e:	d145      	bne.n	80030cc <_malloc_r+0xdc>
 8003040:	2c00      	cmp	r4, #0
 8003042:	d048      	beq.n	80030d6 <_malloc_r+0xe6>
 8003044:	6823      	ldr	r3, [r4, #0]
 8003046:	4631      	mov	r1, r6
 8003048:	4638      	mov	r0, r7
 800304a:	eb04 0903 	add.w	r9, r4, r3
 800304e:	f000 fc29 	bl	80038a4 <_sbrk_r>
 8003052:	4581      	cmp	r9, r0
 8003054:	d13f      	bne.n	80030d6 <_malloc_r+0xe6>
 8003056:	6821      	ldr	r1, [r4, #0]
 8003058:	1a6d      	subs	r5, r5, r1
 800305a:	4629      	mov	r1, r5
 800305c:	4638      	mov	r0, r7
 800305e:	f7ff ffa7 	bl	8002fb0 <sbrk_aligned>
 8003062:	3001      	adds	r0, #1
 8003064:	d037      	beq.n	80030d6 <_malloc_r+0xe6>
 8003066:	6823      	ldr	r3, [r4, #0]
 8003068:	442b      	add	r3, r5
 800306a:	6023      	str	r3, [r4, #0]
 800306c:	f8d8 3000 	ldr.w	r3, [r8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d038      	beq.n	80030e6 <_malloc_r+0xf6>
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	42a2      	cmp	r2, r4
 8003078:	d12b      	bne.n	80030d2 <_malloc_r+0xe2>
 800307a:	2200      	movs	r2, #0
 800307c:	605a      	str	r2, [r3, #4]
 800307e:	e00f      	b.n	80030a0 <_malloc_r+0xb0>
 8003080:	6822      	ldr	r2, [r4, #0]
 8003082:	1b52      	subs	r2, r2, r5
 8003084:	d41f      	bmi.n	80030c6 <_malloc_r+0xd6>
 8003086:	2a0b      	cmp	r2, #11
 8003088:	d917      	bls.n	80030ba <_malloc_r+0xca>
 800308a:	1961      	adds	r1, r4, r5
 800308c:	42a3      	cmp	r3, r4
 800308e:	6025      	str	r5, [r4, #0]
 8003090:	bf18      	it	ne
 8003092:	6059      	strne	r1, [r3, #4]
 8003094:	6863      	ldr	r3, [r4, #4]
 8003096:	bf08      	it	eq
 8003098:	f8c8 1000 	streq.w	r1, [r8]
 800309c:	5162      	str	r2, [r4, r5]
 800309e:	604b      	str	r3, [r1, #4]
 80030a0:	4638      	mov	r0, r7
 80030a2:	f104 060b 	add.w	r6, r4, #11
 80030a6:	f000 fa67 	bl	8003578 <__malloc_unlock>
 80030aa:	f026 0607 	bic.w	r6, r6, #7
 80030ae:	1d23      	adds	r3, r4, #4
 80030b0:	1af2      	subs	r2, r6, r3
 80030b2:	d0ae      	beq.n	8003012 <_malloc_r+0x22>
 80030b4:	1b9b      	subs	r3, r3, r6
 80030b6:	50a3      	str	r3, [r4, r2]
 80030b8:	e7ab      	b.n	8003012 <_malloc_r+0x22>
 80030ba:	42a3      	cmp	r3, r4
 80030bc:	6862      	ldr	r2, [r4, #4]
 80030be:	d1dd      	bne.n	800307c <_malloc_r+0x8c>
 80030c0:	f8c8 2000 	str.w	r2, [r8]
 80030c4:	e7ec      	b.n	80030a0 <_malloc_r+0xb0>
 80030c6:	4623      	mov	r3, r4
 80030c8:	6864      	ldr	r4, [r4, #4]
 80030ca:	e7ac      	b.n	8003026 <_malloc_r+0x36>
 80030cc:	4634      	mov	r4, r6
 80030ce:	6876      	ldr	r6, [r6, #4]
 80030d0:	e7b4      	b.n	800303c <_malloc_r+0x4c>
 80030d2:	4613      	mov	r3, r2
 80030d4:	e7cc      	b.n	8003070 <_malloc_r+0x80>
 80030d6:	230c      	movs	r3, #12
 80030d8:	603b      	str	r3, [r7, #0]
 80030da:	4638      	mov	r0, r7
 80030dc:	f000 fa4c 	bl	8003578 <__malloc_unlock>
 80030e0:	e797      	b.n	8003012 <_malloc_r+0x22>
 80030e2:	6025      	str	r5, [r4, #0]
 80030e4:	e7dc      	b.n	80030a0 <_malloc_r+0xb0>
 80030e6:	605b      	str	r3, [r3, #4]
 80030e8:	deff      	udf	#255	; 0xff
 80030ea:	bf00      	nop
 80030ec:	200006ec 	.word	0x200006ec

080030f0 <_printf_common>:
 80030f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030f4:	4616      	mov	r6, r2
 80030f6:	4699      	mov	r9, r3
 80030f8:	688a      	ldr	r2, [r1, #8]
 80030fa:	690b      	ldr	r3, [r1, #16]
 80030fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003100:	4293      	cmp	r3, r2
 8003102:	bfb8      	it	lt
 8003104:	4613      	movlt	r3, r2
 8003106:	6033      	str	r3, [r6, #0]
 8003108:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800310c:	4607      	mov	r7, r0
 800310e:	460c      	mov	r4, r1
 8003110:	b10a      	cbz	r2, 8003116 <_printf_common+0x26>
 8003112:	3301      	adds	r3, #1
 8003114:	6033      	str	r3, [r6, #0]
 8003116:	6823      	ldr	r3, [r4, #0]
 8003118:	0699      	lsls	r1, r3, #26
 800311a:	bf42      	ittt	mi
 800311c:	6833      	ldrmi	r3, [r6, #0]
 800311e:	3302      	addmi	r3, #2
 8003120:	6033      	strmi	r3, [r6, #0]
 8003122:	6825      	ldr	r5, [r4, #0]
 8003124:	f015 0506 	ands.w	r5, r5, #6
 8003128:	d106      	bne.n	8003138 <_printf_common+0x48>
 800312a:	f104 0a19 	add.w	sl, r4, #25
 800312e:	68e3      	ldr	r3, [r4, #12]
 8003130:	6832      	ldr	r2, [r6, #0]
 8003132:	1a9b      	subs	r3, r3, r2
 8003134:	42ab      	cmp	r3, r5
 8003136:	dc26      	bgt.n	8003186 <_printf_common+0x96>
 8003138:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800313c:	1e13      	subs	r3, r2, #0
 800313e:	6822      	ldr	r2, [r4, #0]
 8003140:	bf18      	it	ne
 8003142:	2301      	movne	r3, #1
 8003144:	0692      	lsls	r2, r2, #26
 8003146:	d42b      	bmi.n	80031a0 <_printf_common+0xb0>
 8003148:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800314c:	4649      	mov	r1, r9
 800314e:	4638      	mov	r0, r7
 8003150:	47c0      	blx	r8
 8003152:	3001      	adds	r0, #1
 8003154:	d01e      	beq.n	8003194 <_printf_common+0xa4>
 8003156:	6823      	ldr	r3, [r4, #0]
 8003158:	6922      	ldr	r2, [r4, #16]
 800315a:	f003 0306 	and.w	r3, r3, #6
 800315e:	2b04      	cmp	r3, #4
 8003160:	bf02      	ittt	eq
 8003162:	68e5      	ldreq	r5, [r4, #12]
 8003164:	6833      	ldreq	r3, [r6, #0]
 8003166:	1aed      	subeq	r5, r5, r3
 8003168:	68a3      	ldr	r3, [r4, #8]
 800316a:	bf0c      	ite	eq
 800316c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003170:	2500      	movne	r5, #0
 8003172:	4293      	cmp	r3, r2
 8003174:	bfc4      	itt	gt
 8003176:	1a9b      	subgt	r3, r3, r2
 8003178:	18ed      	addgt	r5, r5, r3
 800317a:	2600      	movs	r6, #0
 800317c:	341a      	adds	r4, #26
 800317e:	42b5      	cmp	r5, r6
 8003180:	d11a      	bne.n	80031b8 <_printf_common+0xc8>
 8003182:	2000      	movs	r0, #0
 8003184:	e008      	b.n	8003198 <_printf_common+0xa8>
 8003186:	2301      	movs	r3, #1
 8003188:	4652      	mov	r2, sl
 800318a:	4649      	mov	r1, r9
 800318c:	4638      	mov	r0, r7
 800318e:	47c0      	blx	r8
 8003190:	3001      	adds	r0, #1
 8003192:	d103      	bne.n	800319c <_printf_common+0xac>
 8003194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800319c:	3501      	adds	r5, #1
 800319e:	e7c6      	b.n	800312e <_printf_common+0x3e>
 80031a0:	18e1      	adds	r1, r4, r3
 80031a2:	1c5a      	adds	r2, r3, #1
 80031a4:	2030      	movs	r0, #48	; 0x30
 80031a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031aa:	4422      	add	r2, r4
 80031ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031b4:	3302      	adds	r3, #2
 80031b6:	e7c7      	b.n	8003148 <_printf_common+0x58>
 80031b8:	2301      	movs	r3, #1
 80031ba:	4622      	mov	r2, r4
 80031bc:	4649      	mov	r1, r9
 80031be:	4638      	mov	r0, r7
 80031c0:	47c0      	blx	r8
 80031c2:	3001      	adds	r0, #1
 80031c4:	d0e6      	beq.n	8003194 <_printf_common+0xa4>
 80031c6:	3601      	adds	r6, #1
 80031c8:	e7d9      	b.n	800317e <_printf_common+0x8e>
	...

080031cc <_printf_i>:
 80031cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031d0:	7e0f      	ldrb	r7, [r1, #24]
 80031d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80031d4:	2f78      	cmp	r7, #120	; 0x78
 80031d6:	4691      	mov	r9, r2
 80031d8:	4680      	mov	r8, r0
 80031da:	460c      	mov	r4, r1
 80031dc:	469a      	mov	sl, r3
 80031de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80031e2:	d807      	bhi.n	80031f4 <_printf_i+0x28>
 80031e4:	2f62      	cmp	r7, #98	; 0x62
 80031e6:	d80a      	bhi.n	80031fe <_printf_i+0x32>
 80031e8:	2f00      	cmp	r7, #0
 80031ea:	f000 80d4 	beq.w	8003396 <_printf_i+0x1ca>
 80031ee:	2f58      	cmp	r7, #88	; 0x58
 80031f0:	f000 80c0 	beq.w	8003374 <_printf_i+0x1a8>
 80031f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80031fc:	e03a      	b.n	8003274 <_printf_i+0xa8>
 80031fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003202:	2b15      	cmp	r3, #21
 8003204:	d8f6      	bhi.n	80031f4 <_printf_i+0x28>
 8003206:	a101      	add	r1, pc, #4	; (adr r1, 800320c <_printf_i+0x40>)
 8003208:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800320c:	08003265 	.word	0x08003265
 8003210:	08003279 	.word	0x08003279
 8003214:	080031f5 	.word	0x080031f5
 8003218:	080031f5 	.word	0x080031f5
 800321c:	080031f5 	.word	0x080031f5
 8003220:	080031f5 	.word	0x080031f5
 8003224:	08003279 	.word	0x08003279
 8003228:	080031f5 	.word	0x080031f5
 800322c:	080031f5 	.word	0x080031f5
 8003230:	080031f5 	.word	0x080031f5
 8003234:	080031f5 	.word	0x080031f5
 8003238:	0800337d 	.word	0x0800337d
 800323c:	080032a5 	.word	0x080032a5
 8003240:	08003337 	.word	0x08003337
 8003244:	080031f5 	.word	0x080031f5
 8003248:	080031f5 	.word	0x080031f5
 800324c:	0800339f 	.word	0x0800339f
 8003250:	080031f5 	.word	0x080031f5
 8003254:	080032a5 	.word	0x080032a5
 8003258:	080031f5 	.word	0x080031f5
 800325c:	080031f5 	.word	0x080031f5
 8003260:	0800333f 	.word	0x0800333f
 8003264:	682b      	ldr	r3, [r5, #0]
 8003266:	1d1a      	adds	r2, r3, #4
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	602a      	str	r2, [r5, #0]
 800326c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003270:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003274:	2301      	movs	r3, #1
 8003276:	e09f      	b.n	80033b8 <_printf_i+0x1ec>
 8003278:	6820      	ldr	r0, [r4, #0]
 800327a:	682b      	ldr	r3, [r5, #0]
 800327c:	0607      	lsls	r7, r0, #24
 800327e:	f103 0104 	add.w	r1, r3, #4
 8003282:	6029      	str	r1, [r5, #0]
 8003284:	d501      	bpl.n	800328a <_printf_i+0xbe>
 8003286:	681e      	ldr	r6, [r3, #0]
 8003288:	e003      	b.n	8003292 <_printf_i+0xc6>
 800328a:	0646      	lsls	r6, r0, #25
 800328c:	d5fb      	bpl.n	8003286 <_printf_i+0xba>
 800328e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003292:	2e00      	cmp	r6, #0
 8003294:	da03      	bge.n	800329e <_printf_i+0xd2>
 8003296:	232d      	movs	r3, #45	; 0x2d
 8003298:	4276      	negs	r6, r6
 800329a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800329e:	485a      	ldr	r0, [pc, #360]	; (8003408 <_printf_i+0x23c>)
 80032a0:	230a      	movs	r3, #10
 80032a2:	e012      	b.n	80032ca <_printf_i+0xfe>
 80032a4:	682b      	ldr	r3, [r5, #0]
 80032a6:	6820      	ldr	r0, [r4, #0]
 80032a8:	1d19      	adds	r1, r3, #4
 80032aa:	6029      	str	r1, [r5, #0]
 80032ac:	0605      	lsls	r5, r0, #24
 80032ae:	d501      	bpl.n	80032b4 <_printf_i+0xe8>
 80032b0:	681e      	ldr	r6, [r3, #0]
 80032b2:	e002      	b.n	80032ba <_printf_i+0xee>
 80032b4:	0641      	lsls	r1, r0, #25
 80032b6:	d5fb      	bpl.n	80032b0 <_printf_i+0xe4>
 80032b8:	881e      	ldrh	r6, [r3, #0]
 80032ba:	4853      	ldr	r0, [pc, #332]	; (8003408 <_printf_i+0x23c>)
 80032bc:	2f6f      	cmp	r7, #111	; 0x6f
 80032be:	bf0c      	ite	eq
 80032c0:	2308      	moveq	r3, #8
 80032c2:	230a      	movne	r3, #10
 80032c4:	2100      	movs	r1, #0
 80032c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032ca:	6865      	ldr	r5, [r4, #4]
 80032cc:	60a5      	str	r5, [r4, #8]
 80032ce:	2d00      	cmp	r5, #0
 80032d0:	bfa2      	ittt	ge
 80032d2:	6821      	ldrge	r1, [r4, #0]
 80032d4:	f021 0104 	bicge.w	r1, r1, #4
 80032d8:	6021      	strge	r1, [r4, #0]
 80032da:	b90e      	cbnz	r6, 80032e0 <_printf_i+0x114>
 80032dc:	2d00      	cmp	r5, #0
 80032de:	d04b      	beq.n	8003378 <_printf_i+0x1ac>
 80032e0:	4615      	mov	r5, r2
 80032e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80032e6:	fb03 6711 	mls	r7, r3, r1, r6
 80032ea:	5dc7      	ldrb	r7, [r0, r7]
 80032ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80032f0:	4637      	mov	r7, r6
 80032f2:	42bb      	cmp	r3, r7
 80032f4:	460e      	mov	r6, r1
 80032f6:	d9f4      	bls.n	80032e2 <_printf_i+0x116>
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d10b      	bne.n	8003314 <_printf_i+0x148>
 80032fc:	6823      	ldr	r3, [r4, #0]
 80032fe:	07de      	lsls	r6, r3, #31
 8003300:	d508      	bpl.n	8003314 <_printf_i+0x148>
 8003302:	6923      	ldr	r3, [r4, #16]
 8003304:	6861      	ldr	r1, [r4, #4]
 8003306:	4299      	cmp	r1, r3
 8003308:	bfde      	ittt	le
 800330a:	2330      	movle	r3, #48	; 0x30
 800330c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003310:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003314:	1b52      	subs	r2, r2, r5
 8003316:	6122      	str	r2, [r4, #16]
 8003318:	f8cd a000 	str.w	sl, [sp]
 800331c:	464b      	mov	r3, r9
 800331e:	aa03      	add	r2, sp, #12
 8003320:	4621      	mov	r1, r4
 8003322:	4640      	mov	r0, r8
 8003324:	f7ff fee4 	bl	80030f0 <_printf_common>
 8003328:	3001      	adds	r0, #1
 800332a:	d14a      	bne.n	80033c2 <_printf_i+0x1f6>
 800332c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003330:	b004      	add	sp, #16
 8003332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003336:	6823      	ldr	r3, [r4, #0]
 8003338:	f043 0320 	orr.w	r3, r3, #32
 800333c:	6023      	str	r3, [r4, #0]
 800333e:	4833      	ldr	r0, [pc, #204]	; (800340c <_printf_i+0x240>)
 8003340:	2778      	movs	r7, #120	; 0x78
 8003342:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003346:	6823      	ldr	r3, [r4, #0]
 8003348:	6829      	ldr	r1, [r5, #0]
 800334a:	061f      	lsls	r7, r3, #24
 800334c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003350:	d402      	bmi.n	8003358 <_printf_i+0x18c>
 8003352:	065f      	lsls	r7, r3, #25
 8003354:	bf48      	it	mi
 8003356:	b2b6      	uxthmi	r6, r6
 8003358:	07df      	lsls	r7, r3, #31
 800335a:	bf48      	it	mi
 800335c:	f043 0320 	orrmi.w	r3, r3, #32
 8003360:	6029      	str	r1, [r5, #0]
 8003362:	bf48      	it	mi
 8003364:	6023      	strmi	r3, [r4, #0]
 8003366:	b91e      	cbnz	r6, 8003370 <_printf_i+0x1a4>
 8003368:	6823      	ldr	r3, [r4, #0]
 800336a:	f023 0320 	bic.w	r3, r3, #32
 800336e:	6023      	str	r3, [r4, #0]
 8003370:	2310      	movs	r3, #16
 8003372:	e7a7      	b.n	80032c4 <_printf_i+0xf8>
 8003374:	4824      	ldr	r0, [pc, #144]	; (8003408 <_printf_i+0x23c>)
 8003376:	e7e4      	b.n	8003342 <_printf_i+0x176>
 8003378:	4615      	mov	r5, r2
 800337a:	e7bd      	b.n	80032f8 <_printf_i+0x12c>
 800337c:	682b      	ldr	r3, [r5, #0]
 800337e:	6826      	ldr	r6, [r4, #0]
 8003380:	6961      	ldr	r1, [r4, #20]
 8003382:	1d18      	adds	r0, r3, #4
 8003384:	6028      	str	r0, [r5, #0]
 8003386:	0635      	lsls	r5, r6, #24
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	d501      	bpl.n	8003390 <_printf_i+0x1c4>
 800338c:	6019      	str	r1, [r3, #0]
 800338e:	e002      	b.n	8003396 <_printf_i+0x1ca>
 8003390:	0670      	lsls	r0, r6, #25
 8003392:	d5fb      	bpl.n	800338c <_printf_i+0x1c0>
 8003394:	8019      	strh	r1, [r3, #0]
 8003396:	2300      	movs	r3, #0
 8003398:	6123      	str	r3, [r4, #16]
 800339a:	4615      	mov	r5, r2
 800339c:	e7bc      	b.n	8003318 <_printf_i+0x14c>
 800339e:	682b      	ldr	r3, [r5, #0]
 80033a0:	1d1a      	adds	r2, r3, #4
 80033a2:	602a      	str	r2, [r5, #0]
 80033a4:	681d      	ldr	r5, [r3, #0]
 80033a6:	6862      	ldr	r2, [r4, #4]
 80033a8:	2100      	movs	r1, #0
 80033aa:	4628      	mov	r0, r5
 80033ac:	f7fc ff30 	bl	8000210 <memchr>
 80033b0:	b108      	cbz	r0, 80033b6 <_printf_i+0x1ea>
 80033b2:	1b40      	subs	r0, r0, r5
 80033b4:	6060      	str	r0, [r4, #4]
 80033b6:	6863      	ldr	r3, [r4, #4]
 80033b8:	6123      	str	r3, [r4, #16]
 80033ba:	2300      	movs	r3, #0
 80033bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033c0:	e7aa      	b.n	8003318 <_printf_i+0x14c>
 80033c2:	6923      	ldr	r3, [r4, #16]
 80033c4:	462a      	mov	r2, r5
 80033c6:	4649      	mov	r1, r9
 80033c8:	4640      	mov	r0, r8
 80033ca:	47d0      	blx	sl
 80033cc:	3001      	adds	r0, #1
 80033ce:	d0ad      	beq.n	800332c <_printf_i+0x160>
 80033d0:	6823      	ldr	r3, [r4, #0]
 80033d2:	079b      	lsls	r3, r3, #30
 80033d4:	d413      	bmi.n	80033fe <_printf_i+0x232>
 80033d6:	68e0      	ldr	r0, [r4, #12]
 80033d8:	9b03      	ldr	r3, [sp, #12]
 80033da:	4298      	cmp	r0, r3
 80033dc:	bfb8      	it	lt
 80033de:	4618      	movlt	r0, r3
 80033e0:	e7a6      	b.n	8003330 <_printf_i+0x164>
 80033e2:	2301      	movs	r3, #1
 80033e4:	4632      	mov	r2, r6
 80033e6:	4649      	mov	r1, r9
 80033e8:	4640      	mov	r0, r8
 80033ea:	47d0      	blx	sl
 80033ec:	3001      	adds	r0, #1
 80033ee:	d09d      	beq.n	800332c <_printf_i+0x160>
 80033f0:	3501      	adds	r5, #1
 80033f2:	68e3      	ldr	r3, [r4, #12]
 80033f4:	9903      	ldr	r1, [sp, #12]
 80033f6:	1a5b      	subs	r3, r3, r1
 80033f8:	42ab      	cmp	r3, r5
 80033fa:	dcf2      	bgt.n	80033e2 <_printf_i+0x216>
 80033fc:	e7eb      	b.n	80033d6 <_printf_i+0x20a>
 80033fe:	2500      	movs	r5, #0
 8003400:	f104 0619 	add.w	r6, r4, #25
 8003404:	e7f5      	b.n	80033f2 <_printf_i+0x226>
 8003406:	bf00      	nop
 8003408:	0800393d 	.word	0x0800393d
 800340c:	0800394e 	.word	0x0800394e

08003410 <__sflush_r>:
 8003410:	898a      	ldrh	r2, [r1, #12]
 8003412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003416:	4605      	mov	r5, r0
 8003418:	0710      	lsls	r0, r2, #28
 800341a:	460c      	mov	r4, r1
 800341c:	d458      	bmi.n	80034d0 <__sflush_r+0xc0>
 800341e:	684b      	ldr	r3, [r1, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	dc05      	bgt.n	8003430 <__sflush_r+0x20>
 8003424:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003426:	2b00      	cmp	r3, #0
 8003428:	dc02      	bgt.n	8003430 <__sflush_r+0x20>
 800342a:	2000      	movs	r0, #0
 800342c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003430:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003432:	2e00      	cmp	r6, #0
 8003434:	d0f9      	beq.n	800342a <__sflush_r+0x1a>
 8003436:	2300      	movs	r3, #0
 8003438:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800343c:	682f      	ldr	r7, [r5, #0]
 800343e:	6a21      	ldr	r1, [r4, #32]
 8003440:	602b      	str	r3, [r5, #0]
 8003442:	d032      	beq.n	80034aa <__sflush_r+0x9a>
 8003444:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003446:	89a3      	ldrh	r3, [r4, #12]
 8003448:	075a      	lsls	r2, r3, #29
 800344a:	d505      	bpl.n	8003458 <__sflush_r+0x48>
 800344c:	6863      	ldr	r3, [r4, #4]
 800344e:	1ac0      	subs	r0, r0, r3
 8003450:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003452:	b10b      	cbz	r3, 8003458 <__sflush_r+0x48>
 8003454:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003456:	1ac0      	subs	r0, r0, r3
 8003458:	2300      	movs	r3, #0
 800345a:	4602      	mov	r2, r0
 800345c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800345e:	6a21      	ldr	r1, [r4, #32]
 8003460:	4628      	mov	r0, r5
 8003462:	47b0      	blx	r6
 8003464:	1c43      	adds	r3, r0, #1
 8003466:	89a3      	ldrh	r3, [r4, #12]
 8003468:	d106      	bne.n	8003478 <__sflush_r+0x68>
 800346a:	6829      	ldr	r1, [r5, #0]
 800346c:	291d      	cmp	r1, #29
 800346e:	d82b      	bhi.n	80034c8 <__sflush_r+0xb8>
 8003470:	4a29      	ldr	r2, [pc, #164]	; (8003518 <__sflush_r+0x108>)
 8003472:	410a      	asrs	r2, r1
 8003474:	07d6      	lsls	r6, r2, #31
 8003476:	d427      	bmi.n	80034c8 <__sflush_r+0xb8>
 8003478:	2200      	movs	r2, #0
 800347a:	6062      	str	r2, [r4, #4]
 800347c:	04d9      	lsls	r1, r3, #19
 800347e:	6922      	ldr	r2, [r4, #16]
 8003480:	6022      	str	r2, [r4, #0]
 8003482:	d504      	bpl.n	800348e <__sflush_r+0x7e>
 8003484:	1c42      	adds	r2, r0, #1
 8003486:	d101      	bne.n	800348c <__sflush_r+0x7c>
 8003488:	682b      	ldr	r3, [r5, #0]
 800348a:	b903      	cbnz	r3, 800348e <__sflush_r+0x7e>
 800348c:	6560      	str	r0, [r4, #84]	; 0x54
 800348e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003490:	602f      	str	r7, [r5, #0]
 8003492:	2900      	cmp	r1, #0
 8003494:	d0c9      	beq.n	800342a <__sflush_r+0x1a>
 8003496:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800349a:	4299      	cmp	r1, r3
 800349c:	d002      	beq.n	80034a4 <__sflush_r+0x94>
 800349e:	4628      	mov	r0, r5
 80034a0:	f7ff fbf6 	bl	8002c90 <_free_r>
 80034a4:	2000      	movs	r0, #0
 80034a6:	6360      	str	r0, [r4, #52]	; 0x34
 80034a8:	e7c0      	b.n	800342c <__sflush_r+0x1c>
 80034aa:	2301      	movs	r3, #1
 80034ac:	4628      	mov	r0, r5
 80034ae:	47b0      	blx	r6
 80034b0:	1c41      	adds	r1, r0, #1
 80034b2:	d1c8      	bne.n	8003446 <__sflush_r+0x36>
 80034b4:	682b      	ldr	r3, [r5, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0c5      	beq.n	8003446 <__sflush_r+0x36>
 80034ba:	2b1d      	cmp	r3, #29
 80034bc:	d001      	beq.n	80034c2 <__sflush_r+0xb2>
 80034be:	2b16      	cmp	r3, #22
 80034c0:	d101      	bne.n	80034c6 <__sflush_r+0xb6>
 80034c2:	602f      	str	r7, [r5, #0]
 80034c4:	e7b1      	b.n	800342a <__sflush_r+0x1a>
 80034c6:	89a3      	ldrh	r3, [r4, #12]
 80034c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034cc:	81a3      	strh	r3, [r4, #12]
 80034ce:	e7ad      	b.n	800342c <__sflush_r+0x1c>
 80034d0:	690f      	ldr	r7, [r1, #16]
 80034d2:	2f00      	cmp	r7, #0
 80034d4:	d0a9      	beq.n	800342a <__sflush_r+0x1a>
 80034d6:	0793      	lsls	r3, r2, #30
 80034d8:	680e      	ldr	r6, [r1, #0]
 80034da:	bf08      	it	eq
 80034dc:	694b      	ldreq	r3, [r1, #20]
 80034de:	600f      	str	r7, [r1, #0]
 80034e0:	bf18      	it	ne
 80034e2:	2300      	movne	r3, #0
 80034e4:	eba6 0807 	sub.w	r8, r6, r7
 80034e8:	608b      	str	r3, [r1, #8]
 80034ea:	f1b8 0f00 	cmp.w	r8, #0
 80034ee:	dd9c      	ble.n	800342a <__sflush_r+0x1a>
 80034f0:	6a21      	ldr	r1, [r4, #32]
 80034f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80034f4:	4643      	mov	r3, r8
 80034f6:	463a      	mov	r2, r7
 80034f8:	4628      	mov	r0, r5
 80034fa:	47b0      	blx	r6
 80034fc:	2800      	cmp	r0, #0
 80034fe:	dc06      	bgt.n	800350e <__sflush_r+0xfe>
 8003500:	89a3      	ldrh	r3, [r4, #12]
 8003502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003506:	81a3      	strh	r3, [r4, #12]
 8003508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800350c:	e78e      	b.n	800342c <__sflush_r+0x1c>
 800350e:	4407      	add	r7, r0
 8003510:	eba8 0800 	sub.w	r8, r8, r0
 8003514:	e7e9      	b.n	80034ea <__sflush_r+0xda>
 8003516:	bf00      	nop
 8003518:	dfbffffe 	.word	0xdfbffffe

0800351c <_fflush_r>:
 800351c:	b538      	push	{r3, r4, r5, lr}
 800351e:	690b      	ldr	r3, [r1, #16]
 8003520:	4605      	mov	r5, r0
 8003522:	460c      	mov	r4, r1
 8003524:	b913      	cbnz	r3, 800352c <_fflush_r+0x10>
 8003526:	2500      	movs	r5, #0
 8003528:	4628      	mov	r0, r5
 800352a:	bd38      	pop	{r3, r4, r5, pc}
 800352c:	b118      	cbz	r0, 8003536 <_fflush_r+0x1a>
 800352e:	6a03      	ldr	r3, [r0, #32]
 8003530:	b90b      	cbnz	r3, 8003536 <_fflush_r+0x1a>
 8003532:	f7ff fb2f 	bl	8002b94 <__sinit>
 8003536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f3      	beq.n	8003526 <_fflush_r+0xa>
 800353e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003540:	07d0      	lsls	r0, r2, #31
 8003542:	d404      	bmi.n	800354e <_fflush_r+0x32>
 8003544:	0599      	lsls	r1, r3, #22
 8003546:	d402      	bmi.n	800354e <_fflush_r+0x32>
 8003548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800354a:	f7ff fb9e 	bl	8002c8a <__retarget_lock_acquire_recursive>
 800354e:	4628      	mov	r0, r5
 8003550:	4621      	mov	r1, r4
 8003552:	f7ff ff5d 	bl	8003410 <__sflush_r>
 8003556:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003558:	07da      	lsls	r2, r3, #31
 800355a:	4605      	mov	r5, r0
 800355c:	d4e4      	bmi.n	8003528 <_fflush_r+0xc>
 800355e:	89a3      	ldrh	r3, [r4, #12]
 8003560:	059b      	lsls	r3, r3, #22
 8003562:	d4e1      	bmi.n	8003528 <_fflush_r+0xc>
 8003564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003566:	f7ff fb91 	bl	8002c8c <__retarget_lock_release_recursive>
 800356a:	e7dd      	b.n	8003528 <_fflush_r+0xc>

0800356c <__malloc_lock>:
 800356c:	4801      	ldr	r0, [pc, #4]	; (8003574 <__malloc_lock+0x8>)
 800356e:	f7ff bb8c 	b.w	8002c8a <__retarget_lock_acquire_recursive>
 8003572:	bf00      	nop
 8003574:	200006e8 	.word	0x200006e8

08003578 <__malloc_unlock>:
 8003578:	4801      	ldr	r0, [pc, #4]	; (8003580 <__malloc_unlock+0x8>)
 800357a:	f7ff bb87 	b.w	8002c8c <__retarget_lock_release_recursive>
 800357e:	bf00      	nop
 8003580:	200006e8 	.word	0x200006e8

08003584 <__sread>:
 8003584:	b510      	push	{r4, lr}
 8003586:	460c      	mov	r4, r1
 8003588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800358c:	f000 f978 	bl	8003880 <_read_r>
 8003590:	2800      	cmp	r0, #0
 8003592:	bfab      	itete	ge
 8003594:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003596:	89a3      	ldrhlt	r3, [r4, #12]
 8003598:	181b      	addge	r3, r3, r0
 800359a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800359e:	bfac      	ite	ge
 80035a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80035a2:	81a3      	strhlt	r3, [r4, #12]
 80035a4:	bd10      	pop	{r4, pc}

080035a6 <__swrite>:
 80035a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035aa:	461f      	mov	r7, r3
 80035ac:	898b      	ldrh	r3, [r1, #12]
 80035ae:	05db      	lsls	r3, r3, #23
 80035b0:	4605      	mov	r5, r0
 80035b2:	460c      	mov	r4, r1
 80035b4:	4616      	mov	r6, r2
 80035b6:	d505      	bpl.n	80035c4 <__swrite+0x1e>
 80035b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035bc:	2302      	movs	r3, #2
 80035be:	2200      	movs	r2, #0
 80035c0:	f000 f94c 	bl	800385c <_lseek_r>
 80035c4:	89a3      	ldrh	r3, [r4, #12]
 80035c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035ce:	81a3      	strh	r3, [r4, #12]
 80035d0:	4632      	mov	r2, r6
 80035d2:	463b      	mov	r3, r7
 80035d4:	4628      	mov	r0, r5
 80035d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035da:	f000 b973 	b.w	80038c4 <_write_r>

080035de <__sseek>:
 80035de:	b510      	push	{r4, lr}
 80035e0:	460c      	mov	r4, r1
 80035e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035e6:	f000 f939 	bl	800385c <_lseek_r>
 80035ea:	1c43      	adds	r3, r0, #1
 80035ec:	89a3      	ldrh	r3, [r4, #12]
 80035ee:	bf15      	itete	ne
 80035f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80035f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80035f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80035fa:	81a3      	strheq	r3, [r4, #12]
 80035fc:	bf18      	it	ne
 80035fe:	81a3      	strhne	r3, [r4, #12]
 8003600:	bd10      	pop	{r4, pc}

08003602 <__sclose>:
 8003602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003606:	f000 b8f7 	b.w	80037f8 <_close_r>

0800360a <__swbuf_r>:
 800360a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800360c:	460e      	mov	r6, r1
 800360e:	4614      	mov	r4, r2
 8003610:	4605      	mov	r5, r0
 8003612:	b118      	cbz	r0, 800361c <__swbuf_r+0x12>
 8003614:	6a03      	ldr	r3, [r0, #32]
 8003616:	b90b      	cbnz	r3, 800361c <__swbuf_r+0x12>
 8003618:	f7ff fabc 	bl	8002b94 <__sinit>
 800361c:	69a3      	ldr	r3, [r4, #24]
 800361e:	60a3      	str	r3, [r4, #8]
 8003620:	89a3      	ldrh	r3, [r4, #12]
 8003622:	071a      	lsls	r2, r3, #28
 8003624:	d525      	bpl.n	8003672 <__swbuf_r+0x68>
 8003626:	6923      	ldr	r3, [r4, #16]
 8003628:	b31b      	cbz	r3, 8003672 <__swbuf_r+0x68>
 800362a:	6823      	ldr	r3, [r4, #0]
 800362c:	6922      	ldr	r2, [r4, #16]
 800362e:	1a98      	subs	r0, r3, r2
 8003630:	6963      	ldr	r3, [r4, #20]
 8003632:	b2f6      	uxtb	r6, r6
 8003634:	4283      	cmp	r3, r0
 8003636:	4637      	mov	r7, r6
 8003638:	dc04      	bgt.n	8003644 <__swbuf_r+0x3a>
 800363a:	4621      	mov	r1, r4
 800363c:	4628      	mov	r0, r5
 800363e:	f7ff ff6d 	bl	800351c <_fflush_r>
 8003642:	b9e0      	cbnz	r0, 800367e <__swbuf_r+0x74>
 8003644:	68a3      	ldr	r3, [r4, #8]
 8003646:	3b01      	subs	r3, #1
 8003648:	60a3      	str	r3, [r4, #8]
 800364a:	6823      	ldr	r3, [r4, #0]
 800364c:	1c5a      	adds	r2, r3, #1
 800364e:	6022      	str	r2, [r4, #0]
 8003650:	701e      	strb	r6, [r3, #0]
 8003652:	6962      	ldr	r2, [r4, #20]
 8003654:	1c43      	adds	r3, r0, #1
 8003656:	429a      	cmp	r2, r3
 8003658:	d004      	beq.n	8003664 <__swbuf_r+0x5a>
 800365a:	89a3      	ldrh	r3, [r4, #12]
 800365c:	07db      	lsls	r3, r3, #31
 800365e:	d506      	bpl.n	800366e <__swbuf_r+0x64>
 8003660:	2e0a      	cmp	r6, #10
 8003662:	d104      	bne.n	800366e <__swbuf_r+0x64>
 8003664:	4621      	mov	r1, r4
 8003666:	4628      	mov	r0, r5
 8003668:	f7ff ff58 	bl	800351c <_fflush_r>
 800366c:	b938      	cbnz	r0, 800367e <__swbuf_r+0x74>
 800366e:	4638      	mov	r0, r7
 8003670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003672:	4621      	mov	r1, r4
 8003674:	4628      	mov	r0, r5
 8003676:	f000 f805 	bl	8003684 <__swsetup_r>
 800367a:	2800      	cmp	r0, #0
 800367c:	d0d5      	beq.n	800362a <__swbuf_r+0x20>
 800367e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003682:	e7f4      	b.n	800366e <__swbuf_r+0x64>

08003684 <__swsetup_r>:
 8003684:	b538      	push	{r3, r4, r5, lr}
 8003686:	4b2a      	ldr	r3, [pc, #168]	; (8003730 <__swsetup_r+0xac>)
 8003688:	4605      	mov	r5, r0
 800368a:	6818      	ldr	r0, [r3, #0]
 800368c:	460c      	mov	r4, r1
 800368e:	b118      	cbz	r0, 8003698 <__swsetup_r+0x14>
 8003690:	6a03      	ldr	r3, [r0, #32]
 8003692:	b90b      	cbnz	r3, 8003698 <__swsetup_r+0x14>
 8003694:	f7ff fa7e 	bl	8002b94 <__sinit>
 8003698:	89a3      	ldrh	r3, [r4, #12]
 800369a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800369e:	0718      	lsls	r0, r3, #28
 80036a0:	d422      	bmi.n	80036e8 <__swsetup_r+0x64>
 80036a2:	06d9      	lsls	r1, r3, #27
 80036a4:	d407      	bmi.n	80036b6 <__swsetup_r+0x32>
 80036a6:	2309      	movs	r3, #9
 80036a8:	602b      	str	r3, [r5, #0]
 80036aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80036ae:	81a3      	strh	r3, [r4, #12]
 80036b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036b4:	e034      	b.n	8003720 <__swsetup_r+0x9c>
 80036b6:	0758      	lsls	r0, r3, #29
 80036b8:	d512      	bpl.n	80036e0 <__swsetup_r+0x5c>
 80036ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036bc:	b141      	cbz	r1, 80036d0 <__swsetup_r+0x4c>
 80036be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036c2:	4299      	cmp	r1, r3
 80036c4:	d002      	beq.n	80036cc <__swsetup_r+0x48>
 80036c6:	4628      	mov	r0, r5
 80036c8:	f7ff fae2 	bl	8002c90 <_free_r>
 80036cc:	2300      	movs	r3, #0
 80036ce:	6363      	str	r3, [r4, #52]	; 0x34
 80036d0:	89a3      	ldrh	r3, [r4, #12]
 80036d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80036d6:	81a3      	strh	r3, [r4, #12]
 80036d8:	2300      	movs	r3, #0
 80036da:	6063      	str	r3, [r4, #4]
 80036dc:	6923      	ldr	r3, [r4, #16]
 80036de:	6023      	str	r3, [r4, #0]
 80036e0:	89a3      	ldrh	r3, [r4, #12]
 80036e2:	f043 0308 	orr.w	r3, r3, #8
 80036e6:	81a3      	strh	r3, [r4, #12]
 80036e8:	6923      	ldr	r3, [r4, #16]
 80036ea:	b94b      	cbnz	r3, 8003700 <__swsetup_r+0x7c>
 80036ec:	89a3      	ldrh	r3, [r4, #12]
 80036ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80036f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036f6:	d003      	beq.n	8003700 <__swsetup_r+0x7c>
 80036f8:	4621      	mov	r1, r4
 80036fa:	4628      	mov	r0, r5
 80036fc:	f000 f840 	bl	8003780 <__smakebuf_r>
 8003700:	89a0      	ldrh	r0, [r4, #12]
 8003702:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003706:	f010 0301 	ands.w	r3, r0, #1
 800370a:	d00a      	beq.n	8003722 <__swsetup_r+0x9e>
 800370c:	2300      	movs	r3, #0
 800370e:	60a3      	str	r3, [r4, #8]
 8003710:	6963      	ldr	r3, [r4, #20]
 8003712:	425b      	negs	r3, r3
 8003714:	61a3      	str	r3, [r4, #24]
 8003716:	6923      	ldr	r3, [r4, #16]
 8003718:	b943      	cbnz	r3, 800372c <__swsetup_r+0xa8>
 800371a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800371e:	d1c4      	bne.n	80036aa <__swsetup_r+0x26>
 8003720:	bd38      	pop	{r3, r4, r5, pc}
 8003722:	0781      	lsls	r1, r0, #30
 8003724:	bf58      	it	pl
 8003726:	6963      	ldrpl	r3, [r4, #20]
 8003728:	60a3      	str	r3, [r4, #8]
 800372a:	e7f4      	b.n	8003716 <__swsetup_r+0x92>
 800372c:	2000      	movs	r0, #0
 800372e:	e7f7      	b.n	8003720 <__swsetup_r+0x9c>
 8003730:	20000064 	.word	0x20000064

08003734 <__swhatbuf_r>:
 8003734:	b570      	push	{r4, r5, r6, lr}
 8003736:	460c      	mov	r4, r1
 8003738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800373c:	2900      	cmp	r1, #0
 800373e:	b096      	sub	sp, #88	; 0x58
 8003740:	4615      	mov	r5, r2
 8003742:	461e      	mov	r6, r3
 8003744:	da0d      	bge.n	8003762 <__swhatbuf_r+0x2e>
 8003746:	89a3      	ldrh	r3, [r4, #12]
 8003748:	f013 0f80 	tst.w	r3, #128	; 0x80
 800374c:	f04f 0100 	mov.w	r1, #0
 8003750:	bf0c      	ite	eq
 8003752:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003756:	2340      	movne	r3, #64	; 0x40
 8003758:	2000      	movs	r0, #0
 800375a:	6031      	str	r1, [r6, #0]
 800375c:	602b      	str	r3, [r5, #0]
 800375e:	b016      	add	sp, #88	; 0x58
 8003760:	bd70      	pop	{r4, r5, r6, pc}
 8003762:	466a      	mov	r2, sp
 8003764:	f000 f858 	bl	8003818 <_fstat_r>
 8003768:	2800      	cmp	r0, #0
 800376a:	dbec      	blt.n	8003746 <__swhatbuf_r+0x12>
 800376c:	9901      	ldr	r1, [sp, #4]
 800376e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003772:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003776:	4259      	negs	r1, r3
 8003778:	4159      	adcs	r1, r3
 800377a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800377e:	e7eb      	b.n	8003758 <__swhatbuf_r+0x24>

08003780 <__smakebuf_r>:
 8003780:	898b      	ldrh	r3, [r1, #12]
 8003782:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003784:	079d      	lsls	r5, r3, #30
 8003786:	4606      	mov	r6, r0
 8003788:	460c      	mov	r4, r1
 800378a:	d507      	bpl.n	800379c <__smakebuf_r+0x1c>
 800378c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003790:	6023      	str	r3, [r4, #0]
 8003792:	6123      	str	r3, [r4, #16]
 8003794:	2301      	movs	r3, #1
 8003796:	6163      	str	r3, [r4, #20]
 8003798:	b002      	add	sp, #8
 800379a:	bd70      	pop	{r4, r5, r6, pc}
 800379c:	ab01      	add	r3, sp, #4
 800379e:	466a      	mov	r2, sp
 80037a0:	f7ff ffc8 	bl	8003734 <__swhatbuf_r>
 80037a4:	9900      	ldr	r1, [sp, #0]
 80037a6:	4605      	mov	r5, r0
 80037a8:	4630      	mov	r0, r6
 80037aa:	f7ff fc21 	bl	8002ff0 <_malloc_r>
 80037ae:	b948      	cbnz	r0, 80037c4 <__smakebuf_r+0x44>
 80037b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037b4:	059a      	lsls	r2, r3, #22
 80037b6:	d4ef      	bmi.n	8003798 <__smakebuf_r+0x18>
 80037b8:	f023 0303 	bic.w	r3, r3, #3
 80037bc:	f043 0302 	orr.w	r3, r3, #2
 80037c0:	81a3      	strh	r3, [r4, #12]
 80037c2:	e7e3      	b.n	800378c <__smakebuf_r+0xc>
 80037c4:	89a3      	ldrh	r3, [r4, #12]
 80037c6:	6020      	str	r0, [r4, #0]
 80037c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037cc:	81a3      	strh	r3, [r4, #12]
 80037ce:	9b00      	ldr	r3, [sp, #0]
 80037d0:	6163      	str	r3, [r4, #20]
 80037d2:	9b01      	ldr	r3, [sp, #4]
 80037d4:	6120      	str	r0, [r4, #16]
 80037d6:	b15b      	cbz	r3, 80037f0 <__smakebuf_r+0x70>
 80037d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037dc:	4630      	mov	r0, r6
 80037de:	f000 f82d 	bl	800383c <_isatty_r>
 80037e2:	b128      	cbz	r0, 80037f0 <__smakebuf_r+0x70>
 80037e4:	89a3      	ldrh	r3, [r4, #12]
 80037e6:	f023 0303 	bic.w	r3, r3, #3
 80037ea:	f043 0301 	orr.w	r3, r3, #1
 80037ee:	81a3      	strh	r3, [r4, #12]
 80037f0:	89a3      	ldrh	r3, [r4, #12]
 80037f2:	431d      	orrs	r5, r3
 80037f4:	81a5      	strh	r5, [r4, #12]
 80037f6:	e7cf      	b.n	8003798 <__smakebuf_r+0x18>

080037f8 <_close_r>:
 80037f8:	b538      	push	{r3, r4, r5, lr}
 80037fa:	4d06      	ldr	r5, [pc, #24]	; (8003814 <_close_r+0x1c>)
 80037fc:	2300      	movs	r3, #0
 80037fe:	4604      	mov	r4, r0
 8003800:	4608      	mov	r0, r1
 8003802:	602b      	str	r3, [r5, #0]
 8003804:	f7fd f8ed 	bl	80009e2 <_close>
 8003808:	1c43      	adds	r3, r0, #1
 800380a:	d102      	bne.n	8003812 <_close_r+0x1a>
 800380c:	682b      	ldr	r3, [r5, #0]
 800380e:	b103      	cbz	r3, 8003812 <_close_r+0x1a>
 8003810:	6023      	str	r3, [r4, #0]
 8003812:	bd38      	pop	{r3, r4, r5, pc}
 8003814:	200006e4 	.word	0x200006e4

08003818 <_fstat_r>:
 8003818:	b538      	push	{r3, r4, r5, lr}
 800381a:	4d07      	ldr	r5, [pc, #28]	; (8003838 <_fstat_r+0x20>)
 800381c:	2300      	movs	r3, #0
 800381e:	4604      	mov	r4, r0
 8003820:	4608      	mov	r0, r1
 8003822:	4611      	mov	r1, r2
 8003824:	602b      	str	r3, [r5, #0]
 8003826:	f7fd f8e8 	bl	80009fa <_fstat>
 800382a:	1c43      	adds	r3, r0, #1
 800382c:	d102      	bne.n	8003834 <_fstat_r+0x1c>
 800382e:	682b      	ldr	r3, [r5, #0]
 8003830:	b103      	cbz	r3, 8003834 <_fstat_r+0x1c>
 8003832:	6023      	str	r3, [r4, #0]
 8003834:	bd38      	pop	{r3, r4, r5, pc}
 8003836:	bf00      	nop
 8003838:	200006e4 	.word	0x200006e4

0800383c <_isatty_r>:
 800383c:	b538      	push	{r3, r4, r5, lr}
 800383e:	4d06      	ldr	r5, [pc, #24]	; (8003858 <_isatty_r+0x1c>)
 8003840:	2300      	movs	r3, #0
 8003842:	4604      	mov	r4, r0
 8003844:	4608      	mov	r0, r1
 8003846:	602b      	str	r3, [r5, #0]
 8003848:	f7fd f8e7 	bl	8000a1a <_isatty>
 800384c:	1c43      	adds	r3, r0, #1
 800384e:	d102      	bne.n	8003856 <_isatty_r+0x1a>
 8003850:	682b      	ldr	r3, [r5, #0]
 8003852:	b103      	cbz	r3, 8003856 <_isatty_r+0x1a>
 8003854:	6023      	str	r3, [r4, #0]
 8003856:	bd38      	pop	{r3, r4, r5, pc}
 8003858:	200006e4 	.word	0x200006e4

0800385c <_lseek_r>:
 800385c:	b538      	push	{r3, r4, r5, lr}
 800385e:	4d07      	ldr	r5, [pc, #28]	; (800387c <_lseek_r+0x20>)
 8003860:	4604      	mov	r4, r0
 8003862:	4608      	mov	r0, r1
 8003864:	4611      	mov	r1, r2
 8003866:	2200      	movs	r2, #0
 8003868:	602a      	str	r2, [r5, #0]
 800386a:	461a      	mov	r2, r3
 800386c:	f7fd f8e0 	bl	8000a30 <_lseek>
 8003870:	1c43      	adds	r3, r0, #1
 8003872:	d102      	bne.n	800387a <_lseek_r+0x1e>
 8003874:	682b      	ldr	r3, [r5, #0]
 8003876:	b103      	cbz	r3, 800387a <_lseek_r+0x1e>
 8003878:	6023      	str	r3, [r4, #0]
 800387a:	bd38      	pop	{r3, r4, r5, pc}
 800387c:	200006e4 	.word	0x200006e4

08003880 <_read_r>:
 8003880:	b538      	push	{r3, r4, r5, lr}
 8003882:	4d07      	ldr	r5, [pc, #28]	; (80038a0 <_read_r+0x20>)
 8003884:	4604      	mov	r4, r0
 8003886:	4608      	mov	r0, r1
 8003888:	4611      	mov	r1, r2
 800388a:	2200      	movs	r2, #0
 800388c:	602a      	str	r2, [r5, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	f7fd f86e 	bl	8000970 <_read>
 8003894:	1c43      	adds	r3, r0, #1
 8003896:	d102      	bne.n	800389e <_read_r+0x1e>
 8003898:	682b      	ldr	r3, [r5, #0]
 800389a:	b103      	cbz	r3, 800389e <_read_r+0x1e>
 800389c:	6023      	str	r3, [r4, #0]
 800389e:	bd38      	pop	{r3, r4, r5, pc}
 80038a0:	200006e4 	.word	0x200006e4

080038a4 <_sbrk_r>:
 80038a4:	b538      	push	{r3, r4, r5, lr}
 80038a6:	4d06      	ldr	r5, [pc, #24]	; (80038c0 <_sbrk_r+0x1c>)
 80038a8:	2300      	movs	r3, #0
 80038aa:	4604      	mov	r4, r0
 80038ac:	4608      	mov	r0, r1
 80038ae:	602b      	str	r3, [r5, #0]
 80038b0:	f7fd f8cc 	bl	8000a4c <_sbrk>
 80038b4:	1c43      	adds	r3, r0, #1
 80038b6:	d102      	bne.n	80038be <_sbrk_r+0x1a>
 80038b8:	682b      	ldr	r3, [r5, #0]
 80038ba:	b103      	cbz	r3, 80038be <_sbrk_r+0x1a>
 80038bc:	6023      	str	r3, [r4, #0]
 80038be:	bd38      	pop	{r3, r4, r5, pc}
 80038c0:	200006e4 	.word	0x200006e4

080038c4 <_write_r>:
 80038c4:	b538      	push	{r3, r4, r5, lr}
 80038c6:	4d07      	ldr	r5, [pc, #28]	; (80038e4 <_write_r+0x20>)
 80038c8:	4604      	mov	r4, r0
 80038ca:	4608      	mov	r0, r1
 80038cc:	4611      	mov	r1, r2
 80038ce:	2200      	movs	r2, #0
 80038d0:	602a      	str	r2, [r5, #0]
 80038d2:	461a      	mov	r2, r3
 80038d4:	f7fd f869 	bl	80009aa <_write>
 80038d8:	1c43      	adds	r3, r0, #1
 80038da:	d102      	bne.n	80038e2 <_write_r+0x1e>
 80038dc:	682b      	ldr	r3, [r5, #0]
 80038de:	b103      	cbz	r3, 80038e2 <_write_r+0x1e>
 80038e0:	6023      	str	r3, [r4, #0]
 80038e2:	bd38      	pop	{r3, r4, r5, pc}
 80038e4:	200006e4 	.word	0x200006e4

080038e8 <_init>:
 80038e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ea:	bf00      	nop
 80038ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ee:	bc08      	pop	{r3}
 80038f0:	469e      	mov	lr, r3
 80038f2:	4770      	bx	lr

080038f4 <_fini>:
 80038f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038f6:	bf00      	nop
 80038f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038fa:	bc08      	pop	{r3}
 80038fc:	469e      	mov	lr, r3
 80038fe:	4770      	bx	lr
