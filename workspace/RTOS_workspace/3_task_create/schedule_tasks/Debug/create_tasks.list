
create_tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037d0  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003890  08003890  00004890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800393c  0800393c  00005010  2**0
                  CONTENTS
  4 .ARM          00000008  0800393c  0800393c  0000493c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003944  08003944  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003944  08003944  00004944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003948  08003948  00004948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800394c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011f8  20000010  0800395c  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001208  0800395c  00005208  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd35  00000000  00000000  00005038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000224e  00000000  00000000  00012d6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  00014fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a9c  00000000  00000000  00015d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001dd4  00000000  00000000  00016804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f9f3  00000000  00000000  000185d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000842dc  00000000  00000000  00027fcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ac2a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030ac  00000000  00000000  000ac2ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000af398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003878 	.word	0x08003878

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003878 	.word	0x08003878

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	@ (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b086      	sub	sp, #24
 80004ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ae:	f000 fa79 	bl	80009a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b2:	f000 f837 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b6:	f000 f8d7 	bl	8000668 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ba:	f000 f89f 	bl	80005fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  status = xTaskCreate(task1_handle, "Task1", 200, "Hello World from task 1", 2, &task1_handle);
 80004be:	68bb      	ldr	r3, [r7, #8]
 80004c0:	0018      	movs	r0, r3
 80004c2:	4a14      	ldr	r2, [pc, #80]	@ (8000514 <main+0x6c>)
 80004c4:	4914      	ldr	r1, [pc, #80]	@ (8000518 <main+0x70>)
 80004c6:	2308      	movs	r3, #8
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	9301      	str	r3, [sp, #4]
 80004cc:	2302      	movs	r3, #2
 80004ce:	9300      	str	r3, [sp, #0]
 80004d0:	0013      	movs	r3, r2
 80004d2:	22c8      	movs	r2, #200	@ 0xc8
 80004d4:	f002 fbf1 	bl	8002cba <xTaskCreate>
 80004d8:	0003      	movs	r3, r0
 80004da:	60fb      	str	r3, [r7, #12]

    configASSERT(status == pdPASS);//if code traps in infinite loop -> allows debug code more efficiently
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	2b01      	cmp	r3, #1
 80004e0:	d002      	beq.n	80004e8 <main+0x40>
 80004e2:	b672      	cpsid	i
 80004e4:	46c0      	nop			@ (mov r8, r8)
 80004e6:	e7fd      	b.n	80004e4 <main+0x3c>

  status = xTaskCreate(task2_handle, "Task2", 200, "Hello World from task 2", 2, &task2_handle);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	0018      	movs	r0, r3
 80004ec:	4a0b      	ldr	r2, [pc, #44]	@ (800051c <main+0x74>)
 80004ee:	490c      	ldr	r1, [pc, #48]	@ (8000520 <main+0x78>)
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	9301      	str	r3, [sp, #4]
 80004f4:	2302      	movs	r3, #2
 80004f6:	9300      	str	r3, [sp, #0]
 80004f8:	0013      	movs	r3, r2
 80004fa:	22c8      	movs	r2, #200	@ 0xc8
 80004fc:	f002 fbdd 	bl	8002cba <xTaskCreate>
 8000500:	0003      	movs	r3, r0
 8000502:	60fb      	str	r3, [r7, #12]

    configASSERT(status == pdPASS);//if code traps in infinite loop -> allows debug code more efficiently
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	2b01      	cmp	r3, #1
 8000508:	d002      	beq.n	8000510 <main+0x68>
 800050a:	b672      	cpsid	i
 800050c:	46c0      	nop			@ (mov r8, r8)
 800050e:	e7fd      	b.n	800050c <main+0x64>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000510:	e7fe      	b.n	8000510 <main+0x68>
 8000512:	46c0      	nop			@ (mov r8, r8)
 8000514:	08003890 	.word	0x08003890
 8000518:	080038a8 	.word	0x080038a8
 800051c:	080038b0 	.word	0x080038b0
 8000520:	080038c8 	.word	0x080038c8

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b590      	push	{r4, r7, lr}
 8000526:	b09d      	sub	sp, #116	@ 0x74
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	2438      	movs	r4, #56	@ 0x38
 800052c:	193b      	adds	r3, r7, r4
 800052e:	0018      	movs	r0, r3
 8000530:	2338      	movs	r3, #56	@ 0x38
 8000532:	001a      	movs	r2, r3
 8000534:	2100      	movs	r1, #0
 8000536:	f003 f973 	bl	8003820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053a:	2324      	movs	r3, #36	@ 0x24
 800053c:	18fb      	adds	r3, r7, r3
 800053e:	0018      	movs	r0, r3
 8000540:	2314      	movs	r3, #20
 8000542:	001a      	movs	r2, r3
 8000544:	2100      	movs	r1, #0
 8000546:	f003 f96b 	bl	8003820 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800054a:	003b      	movs	r3, r7
 800054c:	0018      	movs	r0, r3
 800054e:	2324      	movs	r3, #36	@ 0x24
 8000550:	001a      	movs	r2, r3
 8000552:	2100      	movs	r1, #0
 8000554:	f003 f964 	bl	8003820 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000558:	4b26      	ldr	r3, [pc, #152]	@ (80005f4 <SystemClock_Config+0xd0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a26      	ldr	r2, [pc, #152]	@ (80005f8 <SystemClock_Config+0xd4>)
 800055e:	401a      	ands	r2, r3
 8000560:	4b24      	ldr	r3, [pc, #144]	@ (80005f4 <SystemClock_Config+0xd0>)
 8000562:	2180      	movs	r1, #128	@ 0x80
 8000564:	0109      	lsls	r1, r1, #4
 8000566:	430a      	orrs	r2, r1
 8000568:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800056a:	0021      	movs	r1, r4
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2210      	movs	r2, #16
 8000570:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2201      	movs	r2, #1
 8000576:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2200      	movs	r2, #0
 800057c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	22a0      	movs	r2, #160	@ 0xa0
 8000582:	0212      	lsls	r2, r2, #8
 8000584:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2200      	movs	r2, #0
 800058a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058c:	187b      	adds	r3, r7, r1
 800058e:	0018      	movs	r0, r3
 8000590:	f000 fc86 	bl	8000ea0 <HAL_RCC_OscConfig>
 8000594:	1e03      	subs	r3, r0, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000598:	f000 f8dc 	bl	8000754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	2124      	movs	r1, #36	@ 0x24
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	220f      	movs	r2, #15
 80005a2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2200      	movs	r2, #0
 80005a8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2200      	movs	r2, #0
 80005ba:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	2100      	movs	r1, #0
 80005c0:	0018      	movs	r0, r3
 80005c2:	f001 f831 	bl	8001628 <HAL_RCC_ClockConfig>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005ca:	f000 f8c3 	bl	8000754 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005ce:	003b      	movs	r3, r7
 80005d0:	2202      	movs	r2, #2
 80005d2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005d4:	003b      	movs	r3, r7
 80005d6:	2200      	movs	r2, #0
 80005d8:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005da:	003b      	movs	r3, r7
 80005dc:	0018      	movs	r0, r3
 80005de:	f001 fa79 	bl	8001ad4 <HAL_RCCEx_PeriphCLKConfig>
 80005e2:	1e03      	subs	r3, r0, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005e6:	f000 f8b5 	bl	8000754 <Error_Handler>
  }
}
 80005ea:	46c0      	nop			@ (mov r8, r8)
 80005ec:	46bd      	mov	sp, r7
 80005ee:	b01d      	add	sp, #116	@ 0x74
 80005f0:	bd90      	pop	{r4, r7, pc}
 80005f2:	46c0      	nop			@ (mov r8, r8)
 80005f4:	40007000 	.word	0x40007000
 80005f8:	ffffe7ff 	.word	0xffffe7ff

080005fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
static void MX_USART2_UART_Init(void)
 8000602:	2310      	movs	r3, #16
 8000604:	18fb      	adds	r3, r7, r3
 8000606:	607b      	str	r3, [r7, #4]
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000608:	4b15      	ldr	r3, [pc, #84]	@ (8000660 <MX_USART2_UART_Init+0x64>)
 800060a:	4a16      	ldr	r2, [pc, #88]	@ (8000664 <MX_USART2_UART_Init+0x68>)
 800060c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800060e:	4b14      	ldr	r3, [pc, #80]	@ (8000660 <MX_USART2_UART_Init+0x64>)
 8000610:	22e1      	movs	r2, #225	@ 0xe1
 8000612:	0252      	lsls	r2, r2, #9
 8000614:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000616:	4b12      	ldr	r3, [pc, #72]	@ (8000660 <MX_USART2_UART_Init+0x64>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800061c:	4b10      	ldr	r3, [pc, #64]	@ (8000660 <MX_USART2_UART_Init+0x64>)
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000622:	4b0f      	ldr	r3, [pc, #60]	@ (8000660 <MX_USART2_UART_Init+0x64>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000628:	4b0d      	ldr	r3, [pc, #52]	@ (8000660 <MX_USART2_UART_Init+0x64>)
 800062a:	220c      	movs	r2, #12
 800062c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800062e:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <MX_USART2_UART_Init+0x64>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000634:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <MX_USART2_UART_Init+0x64>)
 8000636:	2200      	movs	r2, #0
 8000638:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800063a:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <MX_USART2_UART_Init+0x64>)
 800063c:	2200      	movs	r2, #0
 800063e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000640:	4b07      	ldr	r3, [pc, #28]	@ (8000660 <MX_USART2_UART_Init+0x64>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000646:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <MX_USART2_UART_Init+0x64>)
 8000648:	0018      	movs	r0, r3
 800064a:	f001 fdc1 	bl	80021d0 <HAL_UART_Init>
 800064e:	1e03      	subs	r3, r0, #0
 8000650:	d001      	beq.n	8000656 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000652:	f000 f87f 	bl	8000754 <Error_Handler>
  void task2_handler(void* parameters){

  }
  /* USER CODE END USART2_Init 2 */

}
 8000656:	46c0      	nop			@ (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	b002      	add	sp, #8
 800065c:	bd80      	pop	{r7, pc}
 800065e:	46c0      	nop			@ (mov r8, r8)
 8000660:	2000002c 	.word	0x2000002c
 8000664:	40004400 	.word	0x40004400

08000668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000668:	b590      	push	{r4, r7, lr}
 800066a:	b089      	sub	sp, #36	@ 0x24
 800066c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	240c      	movs	r4, #12
 8000670:	193b      	adds	r3, r7, r4
 8000672:	0018      	movs	r0, r3
 8000674:	2314      	movs	r3, #20
 8000676:	001a      	movs	r2, r3
 8000678:	2100      	movs	r1, #0
 800067a:	f003 f8d1 	bl	8003820 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067e:	4b2a      	ldr	r3, [pc, #168]	@ (8000728 <MX_GPIO_Init+0xc0>)
 8000680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000682:	4b29      	ldr	r3, [pc, #164]	@ (8000728 <MX_GPIO_Init+0xc0>)
 8000684:	2104      	movs	r1, #4
 8000686:	430a      	orrs	r2, r1
 8000688:	62da      	str	r2, [r3, #44]	@ 0x2c
 800068a:	4b27      	ldr	r3, [pc, #156]	@ (8000728 <MX_GPIO_Init+0xc0>)
 800068c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800068e:	2204      	movs	r2, #4
 8000690:	4013      	ands	r3, r2
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000696:	4b24      	ldr	r3, [pc, #144]	@ (8000728 <MX_GPIO_Init+0xc0>)
 8000698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800069a:	4b23      	ldr	r3, [pc, #140]	@ (8000728 <MX_GPIO_Init+0xc0>)
 800069c:	2180      	movs	r1, #128	@ 0x80
 800069e:	430a      	orrs	r2, r1
 80006a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006a2:	4b21      	ldr	r3, [pc, #132]	@ (8000728 <MX_GPIO_Init+0xc0>)
 80006a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006a6:	2280      	movs	r2, #128	@ 0x80
 80006a8:	4013      	ands	r3, r2
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000728 <MX_GPIO_Init+0xc0>)
 80006b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000728 <MX_GPIO_Init+0xc0>)
 80006b4:	2101      	movs	r1, #1
 80006b6:	430a      	orrs	r2, r1
 80006b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000728 <MX_GPIO_Init+0xc0>)
 80006bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006be:	2201      	movs	r2, #1
 80006c0:	4013      	ands	r3, r2
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006c6:	23a0      	movs	r3, #160	@ 0xa0
 80006c8:	05db      	lsls	r3, r3, #23
 80006ca:	2200      	movs	r2, #0
 80006cc:	2120      	movs	r1, #32
 80006ce:	0018      	movs	r0, r3
 80006d0:	f000 fbc8 	bl	8000e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	2280      	movs	r2, #128	@ 0x80
 80006d8:	0192      	lsls	r2, r2, #6
 80006da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	2284      	movs	r2, #132	@ 0x84
 80006e0:	0392      	lsls	r2, r2, #14
 80006e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	4a0f      	ldr	r2, [pc, #60]	@ (800072c <MX_GPIO_Init+0xc4>)
 80006ee:	0019      	movs	r1, r3
 80006f0:	0010      	movs	r0, r2
 80006f2:	f000 fa41 	bl	8000b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006f6:	0021      	movs	r1, r4
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	2220      	movs	r2, #32
 80006fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2201      	movs	r2, #1
 8000702:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	187b      	adds	r3, r7, r1
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000710:	187a      	adds	r2, r7, r1
 8000712:	23a0      	movs	r3, #160	@ 0xa0
 8000714:	05db      	lsls	r3, r3, #23
 8000716:	0011      	movs	r1, r2
 8000718:	0018      	movs	r0, r3
 800071a:	f000 fa2d 	bl	8000b78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800071e:	46c0      	nop			@ (mov r8, r8)
 8000720:	46bd      	mov	sp, r7
 8000722:	b009      	add	sp, #36	@ 0x24
 8000724:	bd90      	pop	{r4, r7, pc}
 8000726:	46c0      	nop			@ (mov r8, r8)
 8000728:	40021000 	.word	0x40021000
 800072c:	50000800 	.word	0x50000800

08000730 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a04      	ldr	r2, [pc, #16]	@ (8000750 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d101      	bne.n	8000746 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000742:	f000 f94f 	bl	80009e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000746:	46c0      	nop			@ (mov r8, r8)
 8000748:	46bd      	mov	sp, r7
 800074a:	b002      	add	sp, #8
 800074c:	bd80      	pop	{r7, pc}
 800074e:	46c0      	nop			@ (mov r8, r8)
 8000750:	40001000 	.word	0x40001000

08000754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
}
 800075a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800075c:	46c0      	nop			@ (mov r8, r8)
 800075e:	e7fd      	b.n	800075c <Error_Handler+0x8>

08000760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000764:	4b0b      	ldr	r3, [pc, #44]	@ (8000794 <HAL_MspInit+0x34>)
 8000766:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000768:	4b0a      	ldr	r3, [pc, #40]	@ (8000794 <HAL_MspInit+0x34>)
 800076a:	2101      	movs	r1, #1
 800076c:	430a      	orrs	r2, r1
 800076e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000770:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <HAL_MspInit+0x34>)
 8000772:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000774:	4b07      	ldr	r3, [pc, #28]	@ (8000794 <HAL_MspInit+0x34>)
 8000776:	2180      	movs	r1, #128	@ 0x80
 8000778:	0549      	lsls	r1, r1, #21
 800077a:	430a      	orrs	r2, r1
 800077c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800077e:	2302      	movs	r3, #2
 8000780:	425b      	negs	r3, r3
 8000782:	2200      	movs	r2, #0
 8000784:	2103      	movs	r1, #3
 8000786:	0018      	movs	r0, r3
 8000788:	f000 f9d0 	bl	8000b2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078c:	46c0      	nop			@ (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	46c0      	nop			@ (mov r8, r8)
 8000794:	40021000 	.word	0x40021000

08000798 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b089      	sub	sp, #36	@ 0x24
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	240c      	movs	r4, #12
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	0018      	movs	r0, r3
 80007a6:	2314      	movs	r3, #20
 80007a8:	001a      	movs	r2, r3
 80007aa:	2100      	movs	r1, #0
 80007ac:	f003 f838 	bl	8003820 <memset>
  if(huart->Instance==USART2)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a18      	ldr	r2, [pc, #96]	@ (8000818 <HAL_UART_MspInit+0x80>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d129      	bne.n	800080e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007ba:	4b18      	ldr	r3, [pc, #96]	@ (800081c <HAL_UART_MspInit+0x84>)
 80007bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80007be:	4b17      	ldr	r3, [pc, #92]	@ (800081c <HAL_UART_MspInit+0x84>)
 80007c0:	2180      	movs	r1, #128	@ 0x80
 80007c2:	0289      	lsls	r1, r1, #10
 80007c4:	430a      	orrs	r2, r1
 80007c6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c8:	4b14      	ldr	r3, [pc, #80]	@ (800081c <HAL_UART_MspInit+0x84>)
 80007ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007cc:	4b13      	ldr	r3, [pc, #76]	@ (800081c <HAL_UART_MspInit+0x84>)
 80007ce:	2101      	movs	r1, #1
 80007d0:	430a      	orrs	r2, r1
 80007d2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007d4:	4b11      	ldr	r3, [pc, #68]	@ (800081c <HAL_UART_MspInit+0x84>)
 80007d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007d8:	2201      	movs	r2, #1
 80007da:	4013      	ands	r3, r2
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007e0:	0021      	movs	r1, r4
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	220c      	movs	r2, #12
 80007e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	2202      	movs	r2, #2
 80007ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2203      	movs	r2, #3
 80007f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2204      	movs	r2, #4
 80007fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000800:	187a      	adds	r2, r7, r1
 8000802:	23a0      	movs	r3, #160	@ 0xa0
 8000804:	05db      	lsls	r3, r3, #23
 8000806:	0011      	movs	r1, r2
 8000808:	0018      	movs	r0, r3
 800080a:	f000 f9b5 	bl	8000b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800080e:	46c0      	nop			@ (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	b009      	add	sp, #36	@ 0x24
 8000814:	bd90      	pop	{r4, r7, pc}
 8000816:	46c0      	nop			@ (mov r8, r8)
 8000818:	40004400 	.word	0x40004400
 800081c:	40021000 	.word	0x40021000

08000820 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000820:	b5b0      	push	{r4, r5, r7, lr}
 8000822:	b08c      	sub	sp, #48	@ 0x30
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2200      	movs	r2, #0
 800082c:	0019      	movs	r1, r3
 800082e:	2011      	movs	r0, #17
 8000830:	f000 f97c 	bl	8000b2c <HAL_NVIC_SetPriority>
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000834:	2011      	movs	r0, #17
 8000836:	f000 f98e 	bl	8000b56 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800083a:	4b32      	ldr	r3, [pc, #200]	@ (8000904 <HAL_InitTick+0xe4>)
 800083c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800083e:	4b31      	ldr	r3, [pc, #196]	@ (8000904 <HAL_InitTick+0xe4>)
 8000840:	2110      	movs	r1, #16
 8000842:	430a      	orrs	r2, r1
 8000844:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000846:	2308      	movs	r3, #8
 8000848:	18fa      	adds	r2, r7, r3
 800084a:	240c      	movs	r4, #12
 800084c:	193b      	adds	r3, r7, r4
 800084e:	0011      	movs	r1, r2
 8000850:	0018      	movs	r0, r3
 8000852:	f001 f90d 	bl	8001a70 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000856:	193b      	adds	r3, r7, r4
 8000858:	68db      	ldr	r3, [r3, #12]
 800085a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800085c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800085e:	2b00      	cmp	r3, #0
 8000860:	d104      	bne.n	800086c <HAL_InitTick+0x4c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000862:	f001 f8d9 	bl	8001a18 <HAL_RCC_GetPCLK1Freq>
 8000866:	0003      	movs	r3, r0
 8000868:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800086a:	e004      	b.n	8000876 <HAL_InitTick+0x56>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800086c:	f001 f8d4 	bl	8001a18 <HAL_RCC_GetPCLK1Freq>
 8000870:	0003      	movs	r3, r0
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000878:	4923      	ldr	r1, [pc, #140]	@ (8000908 <HAL_InitTick+0xe8>)
 800087a:	0018      	movs	r0, r3
 800087c:	f7ff fc44 	bl	8000108 <__udivsi3>
 8000880:	0003      	movs	r3, r0
 8000882:	3b01      	subs	r3, #1
 8000884:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000886:	4b21      	ldr	r3, [pc, #132]	@ (800090c <HAL_InitTick+0xec>)
 8000888:	4a21      	ldr	r2, [pc, #132]	@ (8000910 <HAL_InitTick+0xf0>)
 800088a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800088c:	4b1f      	ldr	r3, [pc, #124]	@ (800090c <HAL_InitTick+0xec>)
 800088e:	4a21      	ldr	r2, [pc, #132]	@ (8000914 <HAL_InitTick+0xf4>)
 8000890:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000892:	4b1e      	ldr	r3, [pc, #120]	@ (800090c <HAL_InitTick+0xec>)
 8000894:	6a3a      	ldr	r2, [r7, #32]
 8000896:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8000898:	4b1c      	ldr	r3, [pc, #112]	@ (800090c <HAL_InitTick+0xec>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089e:	4b1b      	ldr	r3, [pc, #108]	@ (800090c <HAL_InitTick+0xec>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80008a4:	252b      	movs	r5, #43	@ 0x2b
 80008a6:	197c      	adds	r4, r7, r5
 80008a8:	4b18      	ldr	r3, [pc, #96]	@ (800090c <HAL_InitTick+0xec>)
 80008aa:	0018      	movs	r0, r3
 80008ac:	f001 faa0 	bl	8001df0 <HAL_TIM_Base_Init>
 80008b0:	0003      	movs	r3, r0
 80008b2:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80008b4:	197b      	adds	r3, r7, r5
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d11b      	bne.n	80008f4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80008bc:	197c      	adds	r4, r7, r5
 80008be:	4b13      	ldr	r3, [pc, #76]	@ (800090c <HAL_InitTick+0xec>)
 80008c0:	0018      	movs	r0, r3
 80008c2:	f001 fadd 	bl	8001e80 <HAL_TIM_Base_Start_IT>
 80008c6:	0003      	movs	r3, r0
 80008c8:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 80008ca:	197b      	adds	r3, r7, r5
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d110      	bne.n	80008f4 <HAL_InitTick+0xd4>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2b03      	cmp	r3, #3
 80008d6:	d809      	bhi.n	80008ec <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2200      	movs	r2, #0
 80008dc:	0019      	movs	r1, r3
 80008de:	2011      	movs	r0, #17
 80008e0:	f000 f924 	bl	8000b2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <HAL_InitTick+0xf8>)
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	e003      	b.n	80008f4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80008ec:	232b      	movs	r3, #43	@ 0x2b
 80008ee:	18fb      	adds	r3, r7, r3
 80008f0:	2201      	movs	r2, #1
 80008f2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80008f4:	232b      	movs	r3, #43	@ 0x2b
 80008f6:	18fb      	adds	r3, r7, r3
 80008f8:	781b      	ldrb	r3, [r3, #0]
}
 80008fa:	0018      	movs	r0, r3
 80008fc:	46bd      	mov	sp, r7
 80008fe:	b00c      	add	sp, #48	@ 0x30
 8000900:	bdb0      	pop	{r4, r5, r7, pc}
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	40021000 	.word	0x40021000
 8000908:	000f4240 	.word	0x000f4240
 800090c:	200000b4 	.word	0x200000b4
 8000910:	40001000 	.word	0x40001000
 8000914:	000003e7 	.word	0x000003e7
 8000918:	20000004 	.word	0x20000004

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000920:	46c0      	nop			@ (mov r8, r8)
 8000922:	e7fd      	b.n	8000920 <NMI_Handler+0x4>

08000924 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000928:	46c0      	nop			@ (mov r8, r8)
 800092a:	e7fd      	b.n	8000928 <HardFault_Handler+0x4>

0800092c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000930:	4b03      	ldr	r3, [pc, #12]	@ (8000940 <TIM6_DAC_IRQHandler+0x14>)
 8000932:	0018      	movs	r0, r3
 8000934:	f001 faf0 	bl	8001f18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000938:	46c0      	nop			@ (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	46c0      	nop			@ (mov r8, r8)
 8000940:	200000b4 	.word	0x200000b4

08000944 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000948:	46c0      	nop			@ (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000950:	480d      	ldr	r0, [pc, #52]	@ (8000988 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000952:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000954:	f7ff fff6 	bl	8000944 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000958:	480c      	ldr	r0, [pc, #48]	@ (800098c <LoopForever+0x6>)
  ldr r1, =_edata
 800095a:	490d      	ldr	r1, [pc, #52]	@ (8000990 <LoopForever+0xa>)
  ldr r2, =_sidata
 800095c:	4a0d      	ldr	r2, [pc, #52]	@ (8000994 <LoopForever+0xe>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000960:	e002      	b.n	8000968 <LoopCopyDataInit>

08000962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000966:	3304      	adds	r3, #4

08000968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800096c:	d3f9      	bcc.n	8000962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096e:	4a0a      	ldr	r2, [pc, #40]	@ (8000998 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000970:	4c0a      	ldr	r4, [pc, #40]	@ (800099c <LoopForever+0x16>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000974:	e001      	b.n	800097a <LoopFillZerobss>

08000976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000978:	3204      	adds	r2, #4

0800097a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800097c:	d3fb      	bcc.n	8000976 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800097e:	f002 ff57 	bl	8003830 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000982:	f7ff fd91 	bl	80004a8 <main>

08000986 <LoopForever>:

LoopForever:
    b LoopForever
 8000986:	e7fe      	b.n	8000986 <LoopForever>
  ldr   r0, =_estack
 8000988:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800098c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000990:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000994:	0800394c 	.word	0x0800394c
  ldr r2, =_sbss
 8000998:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800099c:	20001208 	.word	0x20001208

080009a0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a0:	e7fe      	b.n	80009a0 <ADC1_COMP_IRQHandler>
	...

080009a4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009aa:	1dfb      	adds	r3, r7, #7
 80009ac:	2200      	movs	r2, #0
 80009ae:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80009b0:	4b0b      	ldr	r3, [pc, #44]	@ (80009e0 <HAL_Init+0x3c>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b0a      	ldr	r3, [pc, #40]	@ (80009e0 <HAL_Init+0x3c>)
 80009b6:	2140      	movs	r1, #64	@ 0x40
 80009b8:	430a      	orrs	r2, r1
 80009ba:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009bc:	2003      	movs	r0, #3
 80009be:	f7ff ff2f 	bl	8000820 <HAL_InitTick>
 80009c2:	1e03      	subs	r3, r0, #0
 80009c4:	d003      	beq.n	80009ce <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80009c6:	1dfb      	adds	r3, r7, #7
 80009c8:	2201      	movs	r2, #1
 80009ca:	701a      	strb	r2, [r3, #0]
 80009cc:	e001      	b.n	80009d2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009ce:	f7ff fec7 	bl	8000760 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009d2:	1dfb      	adds	r3, r7, #7
 80009d4:	781b      	ldrb	r3, [r3, #0]
}
 80009d6:	0018      	movs	r0, r3
 80009d8:	46bd      	mov	sp, r7
 80009da:	b002      	add	sp, #8
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			@ (mov r8, r8)
 80009e0:	40022000 	.word	0x40022000

080009e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009e8:	4b05      	ldr	r3, [pc, #20]	@ (8000a00 <HAL_IncTick+0x1c>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	001a      	movs	r2, r3
 80009ee:	4b05      	ldr	r3, [pc, #20]	@ (8000a04 <HAL_IncTick+0x20>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	18d2      	adds	r2, r2, r3
 80009f4:	4b03      	ldr	r3, [pc, #12]	@ (8000a04 <HAL_IncTick+0x20>)
 80009f6:	601a      	str	r2, [r3, #0]
}
 80009f8:	46c0      	nop			@ (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			@ (mov r8, r8)
 8000a00:	20000008 	.word	0x20000008
 8000a04:	200000f4 	.word	0x200000f4

08000a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a0c:	4b02      	ldr	r3, [pc, #8]	@ (8000a18 <HAL_GetTick+0x10>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
}
 8000a10:	0018      	movs	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	46c0      	nop			@ (mov r8, r8)
 8000a18:	200000f4 	.word	0x200000f4

08000a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	0002      	movs	r2, r0
 8000a24:	1dfb      	adds	r3, r7, #7
 8000a26:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a28:	1dfb      	adds	r3, r7, #7
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a2e:	d809      	bhi.n	8000a44 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a30:	1dfb      	adds	r3, r7, #7
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	001a      	movs	r2, r3
 8000a36:	231f      	movs	r3, #31
 8000a38:	401a      	ands	r2, r3
 8000a3a:	4b04      	ldr	r3, [pc, #16]	@ (8000a4c <__NVIC_EnableIRQ+0x30>)
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	4091      	lsls	r1, r2
 8000a40:	000a      	movs	r2, r1
 8000a42:	601a      	str	r2, [r3, #0]
  }
}
 8000a44:	46c0      	nop			@ (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b002      	add	sp, #8
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	e000e100 	.word	0xe000e100

08000a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a50:	b590      	push	{r4, r7, lr}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	0002      	movs	r2, r0
 8000a58:	6039      	str	r1, [r7, #0]
 8000a5a:	1dfb      	adds	r3, r7, #7
 8000a5c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a64:	d828      	bhi.n	8000ab8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a66:	4a2f      	ldr	r2, [pc, #188]	@ (8000b24 <__NVIC_SetPriority+0xd4>)
 8000a68:	1dfb      	adds	r3, r7, #7
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	b25b      	sxtb	r3, r3
 8000a6e:	089b      	lsrs	r3, r3, #2
 8000a70:	33c0      	adds	r3, #192	@ 0xc0
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	589b      	ldr	r3, [r3, r2]
 8000a76:	1dfa      	adds	r2, r7, #7
 8000a78:	7812      	ldrb	r2, [r2, #0]
 8000a7a:	0011      	movs	r1, r2
 8000a7c:	2203      	movs	r2, #3
 8000a7e:	400a      	ands	r2, r1
 8000a80:	00d2      	lsls	r2, r2, #3
 8000a82:	21ff      	movs	r1, #255	@ 0xff
 8000a84:	4091      	lsls	r1, r2
 8000a86:	000a      	movs	r2, r1
 8000a88:	43d2      	mvns	r2, r2
 8000a8a:	401a      	ands	r2, r3
 8000a8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	019b      	lsls	r3, r3, #6
 8000a92:	22ff      	movs	r2, #255	@ 0xff
 8000a94:	401a      	ands	r2, r3
 8000a96:	1dfb      	adds	r3, r7, #7
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	4003      	ands	r3, r0
 8000aa0:	00db      	lsls	r3, r3, #3
 8000aa2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aa4:	481f      	ldr	r0, [pc, #124]	@ (8000b24 <__NVIC_SetPriority+0xd4>)
 8000aa6:	1dfb      	adds	r3, r7, #7
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	b25b      	sxtb	r3, r3
 8000aac:	089b      	lsrs	r3, r3, #2
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	33c0      	adds	r3, #192	@ 0xc0
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ab6:	e031      	b.n	8000b1c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b28 <__NVIC_SetPriority+0xd8>)
 8000aba:	1dfb      	adds	r3, r7, #7
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	0019      	movs	r1, r3
 8000ac0:	230f      	movs	r3, #15
 8000ac2:	400b      	ands	r3, r1
 8000ac4:	3b08      	subs	r3, #8
 8000ac6:	089b      	lsrs	r3, r3, #2
 8000ac8:	3306      	adds	r3, #6
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	18d3      	adds	r3, r2, r3
 8000ace:	3304      	adds	r3, #4
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	1dfa      	adds	r2, r7, #7
 8000ad4:	7812      	ldrb	r2, [r2, #0]
 8000ad6:	0011      	movs	r1, r2
 8000ad8:	2203      	movs	r2, #3
 8000ada:	400a      	ands	r2, r1
 8000adc:	00d2      	lsls	r2, r2, #3
 8000ade:	21ff      	movs	r1, #255	@ 0xff
 8000ae0:	4091      	lsls	r1, r2
 8000ae2:	000a      	movs	r2, r1
 8000ae4:	43d2      	mvns	r2, r2
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	019b      	lsls	r3, r3, #6
 8000aee:	22ff      	movs	r2, #255	@ 0xff
 8000af0:	401a      	ands	r2, r3
 8000af2:	1dfb      	adds	r3, r7, #7
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	0018      	movs	r0, r3
 8000af8:	2303      	movs	r3, #3
 8000afa:	4003      	ands	r3, r0
 8000afc:	00db      	lsls	r3, r3, #3
 8000afe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b00:	4809      	ldr	r0, [pc, #36]	@ (8000b28 <__NVIC_SetPriority+0xd8>)
 8000b02:	1dfb      	adds	r3, r7, #7
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	001c      	movs	r4, r3
 8000b08:	230f      	movs	r3, #15
 8000b0a:	4023      	ands	r3, r4
 8000b0c:	3b08      	subs	r3, #8
 8000b0e:	089b      	lsrs	r3, r3, #2
 8000b10:	430a      	orrs	r2, r1
 8000b12:	3306      	adds	r3, #6
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	18c3      	adds	r3, r0, r3
 8000b18:	3304      	adds	r3, #4
 8000b1a:	601a      	str	r2, [r3, #0]
}
 8000b1c:	46c0      	nop			@ (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	b003      	add	sp, #12
 8000b22:	bd90      	pop	{r4, r7, pc}
 8000b24:	e000e100 	.word	0xe000e100
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	607a      	str	r2, [r7, #4]
 8000b36:	210f      	movs	r1, #15
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	1c02      	adds	r2, r0, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b3e:	68ba      	ldr	r2, [r7, #8]
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	b25b      	sxtb	r3, r3
 8000b46:	0011      	movs	r1, r2
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f7ff ff81 	bl	8000a50 <__NVIC_SetPriority>
}
 8000b4e:	46c0      	nop			@ (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b004      	add	sp, #16
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	0002      	movs	r2, r0
 8000b5e:	1dfb      	adds	r3, r7, #7
 8000b60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b62:	1dfb      	adds	r3, r7, #7
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	b25b      	sxtb	r3, r3
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f7ff ff57 	bl	8000a1c <__NVIC_EnableIRQ>
}
 8000b6e:	46c0      	nop			@ (mov r8, r8)
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b002      	add	sp, #8
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000b8e:	e14f      	b.n	8000e30 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2101      	movs	r1, #1
 8000b96:	697a      	ldr	r2, [r7, #20]
 8000b98:	4091      	lsls	r1, r2
 8000b9a:	000a      	movs	r2, r1
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d100      	bne.n	8000ba8 <HAL_GPIO_Init+0x30>
 8000ba6:	e140      	b.n	8000e2a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	2203      	movs	r2, #3
 8000bae:	4013      	ands	r3, r2
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d005      	beq.n	8000bc0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	2203      	movs	r2, #3
 8000bba:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d130      	bne.n	8000c22 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	2203      	movs	r2, #3
 8000bcc:	409a      	lsls	r2, r3
 8000bce:	0013      	movs	r3, r2
 8000bd0:	43da      	mvns	r2, r3
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	68da      	ldr	r2, [r3, #12]
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	409a      	lsls	r2, r3
 8000be2:	0013      	movs	r3, r2
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	409a      	lsls	r2, r3
 8000bfc:	0013      	movs	r3, r2
 8000bfe:	43da      	mvns	r2, r3
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	4013      	ands	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	091b      	lsrs	r3, r3, #4
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	401a      	ands	r2, r3
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	409a      	lsls	r2, r3
 8000c14:	0013      	movs	r3, r2
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	2203      	movs	r2, #3
 8000c28:	4013      	ands	r3, r2
 8000c2a:	2b03      	cmp	r3, #3
 8000c2c:	d017      	beq.n	8000c5e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	68db      	ldr	r3, [r3, #12]
 8000c32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	2203      	movs	r2, #3
 8000c3a:	409a      	lsls	r2, r3
 8000c3c:	0013      	movs	r3, r2
 8000c3e:	43da      	mvns	r2, r3
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	4013      	ands	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	689a      	ldr	r2, [r3, #8]
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	409a      	lsls	r2, r3
 8000c50:	0013      	movs	r3, r2
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	2203      	movs	r2, #3
 8000c64:	4013      	ands	r3, r2
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d123      	bne.n	8000cb2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	08da      	lsrs	r2, r3, #3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	3208      	adds	r2, #8
 8000c72:	0092      	lsls	r2, r2, #2
 8000c74:	58d3      	ldr	r3, [r2, r3]
 8000c76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	2207      	movs	r2, #7
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	220f      	movs	r2, #15
 8000c82:	409a      	lsls	r2, r3
 8000c84:	0013      	movs	r3, r2
 8000c86:	43da      	mvns	r2, r3
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	691a      	ldr	r2, [r3, #16]
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	2107      	movs	r1, #7
 8000c96:	400b      	ands	r3, r1
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	409a      	lsls	r2, r3
 8000c9c:	0013      	movs	r3, r2
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	08da      	lsrs	r2, r3, #3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3208      	adds	r2, #8
 8000cac:	0092      	lsls	r2, r2, #2
 8000cae:	6939      	ldr	r1, [r7, #16]
 8000cb0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	409a      	lsls	r2, r3
 8000cc0:	0013      	movs	r3, r2
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	2203      	movs	r2, #3
 8000cd0:	401a      	ands	r2, r3
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	409a      	lsls	r2, r3
 8000cd8:	0013      	movs	r3, r2
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685a      	ldr	r2, [r3, #4]
 8000cea:	23c0      	movs	r3, #192	@ 0xc0
 8000cec:	029b      	lsls	r3, r3, #10
 8000cee:	4013      	ands	r3, r2
 8000cf0:	d100      	bne.n	8000cf4 <HAL_GPIO_Init+0x17c>
 8000cf2:	e09a      	b.n	8000e2a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf4:	4b54      	ldr	r3, [pc, #336]	@ (8000e48 <HAL_GPIO_Init+0x2d0>)
 8000cf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cf8:	4b53      	ldr	r3, [pc, #332]	@ (8000e48 <HAL_GPIO_Init+0x2d0>)
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d00:	4a52      	ldr	r2, [pc, #328]	@ (8000e4c <HAL_GPIO_Init+0x2d4>)
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	089b      	lsrs	r3, r3, #2
 8000d06:	3302      	adds	r3, #2
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	589b      	ldr	r3, [r3, r2]
 8000d0c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	2203      	movs	r2, #3
 8000d12:	4013      	ands	r3, r2
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	220f      	movs	r2, #15
 8000d18:	409a      	lsls	r2, r3
 8000d1a:	0013      	movs	r3, r2
 8000d1c:	43da      	mvns	r2, r3
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	4013      	ands	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	23a0      	movs	r3, #160	@ 0xa0
 8000d28:	05db      	lsls	r3, r3, #23
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d019      	beq.n	8000d62 <HAL_GPIO_Init+0x1ea>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a47      	ldr	r2, [pc, #284]	@ (8000e50 <HAL_GPIO_Init+0x2d8>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d013      	beq.n	8000d5e <HAL_GPIO_Init+0x1e6>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a46      	ldr	r2, [pc, #280]	@ (8000e54 <HAL_GPIO_Init+0x2dc>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d00d      	beq.n	8000d5a <HAL_GPIO_Init+0x1e2>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a45      	ldr	r2, [pc, #276]	@ (8000e58 <HAL_GPIO_Init+0x2e0>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d007      	beq.n	8000d56 <HAL_GPIO_Init+0x1de>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a44      	ldr	r2, [pc, #272]	@ (8000e5c <HAL_GPIO_Init+0x2e4>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d101      	bne.n	8000d52 <HAL_GPIO_Init+0x1da>
 8000d4e:	2305      	movs	r3, #5
 8000d50:	e008      	b.n	8000d64 <HAL_GPIO_Init+0x1ec>
 8000d52:	2306      	movs	r3, #6
 8000d54:	e006      	b.n	8000d64 <HAL_GPIO_Init+0x1ec>
 8000d56:	2303      	movs	r3, #3
 8000d58:	e004      	b.n	8000d64 <HAL_GPIO_Init+0x1ec>
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	e002      	b.n	8000d64 <HAL_GPIO_Init+0x1ec>
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e000      	b.n	8000d64 <HAL_GPIO_Init+0x1ec>
 8000d62:	2300      	movs	r3, #0
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	2103      	movs	r1, #3
 8000d68:	400a      	ands	r2, r1
 8000d6a:	0092      	lsls	r2, r2, #2
 8000d6c:	4093      	lsls	r3, r2
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d74:	4935      	ldr	r1, [pc, #212]	@ (8000e4c <HAL_GPIO_Init+0x2d4>)
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	089b      	lsrs	r3, r3, #2
 8000d7a:	3302      	adds	r3, #2
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d82:	4b37      	ldr	r3, [pc, #220]	@ (8000e60 <HAL_GPIO_Init+0x2e8>)
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	43da      	mvns	r2, r3
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685a      	ldr	r2, [r3, #4]
 8000d96:	2380      	movs	r3, #128	@ 0x80
 8000d98:	035b      	lsls	r3, r3, #13
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	d003      	beq.n	8000da6 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000da6:	4b2e      	ldr	r3, [pc, #184]	@ (8000e60 <HAL_GPIO_Init+0x2e8>)
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000dac:	4b2c      	ldr	r3, [pc, #176]	@ (8000e60 <HAL_GPIO_Init+0x2e8>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	43da      	mvns	r2, r3
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	4013      	ands	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685a      	ldr	r2, [r3, #4]
 8000dc0:	2380      	movs	r3, #128	@ 0x80
 8000dc2:	039b      	lsls	r3, r3, #14
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	d003      	beq.n	8000dd0 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000dd0:	4b23      	ldr	r3, [pc, #140]	@ (8000e60 <HAL_GPIO_Init+0x2e8>)
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000dd6:	4b22      	ldr	r3, [pc, #136]	@ (8000e60 <HAL_GPIO_Init+0x2e8>)
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	43da      	mvns	r2, r3
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	4013      	ands	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685a      	ldr	r2, [r3, #4]
 8000dea:	2380      	movs	r3, #128	@ 0x80
 8000dec:	029b      	lsls	r3, r3, #10
 8000dee:	4013      	ands	r3, r2
 8000df0:	d003      	beq.n	8000dfa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000dfa:	4b19      	ldr	r3, [pc, #100]	@ (8000e60 <HAL_GPIO_Init+0x2e8>)
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e00:	4b17      	ldr	r3, [pc, #92]	@ (8000e60 <HAL_GPIO_Init+0x2e8>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	43da      	mvns	r2, r3
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685a      	ldr	r2, [r3, #4]
 8000e14:	2380      	movs	r3, #128	@ 0x80
 8000e16:	025b      	lsls	r3, r3, #9
 8000e18:	4013      	ands	r3, r2
 8000e1a:	d003      	beq.n	8000e24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e24:	4b0e      	ldr	r3, [pc, #56]	@ (8000e60 <HAL_GPIO_Init+0x2e8>)
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	40da      	lsrs	r2, r3
 8000e38:	1e13      	subs	r3, r2, #0
 8000e3a:	d000      	beq.n	8000e3e <HAL_GPIO_Init+0x2c6>
 8000e3c:	e6a8      	b.n	8000b90 <HAL_GPIO_Init+0x18>
  }
}
 8000e3e:	46c0      	nop			@ (mov r8, r8)
 8000e40:	46c0      	nop			@ (mov r8, r8)
 8000e42:	46bd      	mov	sp, r7
 8000e44:	b006      	add	sp, #24
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	40010000 	.word	0x40010000
 8000e50:	50000400 	.word	0x50000400
 8000e54:	50000800 	.word	0x50000800
 8000e58:	50000c00 	.word	0x50000c00
 8000e5c:	50001c00 	.word	0x50001c00
 8000e60:	40010400 	.word	0x40010400

08000e64 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	0008      	movs	r0, r1
 8000e6e:	0011      	movs	r1, r2
 8000e70:	1cbb      	adds	r3, r7, #2
 8000e72:	1c02      	adds	r2, r0, #0
 8000e74:	801a      	strh	r2, [r3, #0]
 8000e76:	1c7b      	adds	r3, r7, #1
 8000e78:	1c0a      	adds	r2, r1, #0
 8000e7a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e7c:	1c7b      	adds	r3, r7, #1
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d004      	beq.n	8000e8e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e84:	1cbb      	adds	r3, r7, #2
 8000e86:	881a      	ldrh	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000e8c:	e003      	b.n	8000e96 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000e8e:	1cbb      	adds	r3, r7, #2
 8000e90:	881a      	ldrh	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e96:	46c0      	nop			@ (mov r8, r8)
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	b002      	add	sp, #8
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ea0:	b5b0      	push	{r4, r5, r7, lr}
 8000ea2:	b08a      	sub	sp, #40	@ 0x28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d102      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	f000 fbaf 	bl	8001612 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000eb4:	4bcf      	ldr	r3, [pc, #828]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	220c      	movs	r2, #12
 8000eba:	4013      	ands	r3, r2
 8000ebc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ebe:	4bcd      	ldr	r3, [pc, #820]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 8000ec0:	68da      	ldr	r2, [r3, #12]
 8000ec2:	2380      	movs	r3, #128	@ 0x80
 8000ec4:	025b      	lsls	r3, r3, #9
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2201      	movs	r2, #1
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	d100      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x36>
 8000ed4:	e07e      	b.n	8000fd4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ed6:	6a3b      	ldr	r3, [r7, #32]
 8000ed8:	2b08      	cmp	r3, #8
 8000eda:	d007      	beq.n	8000eec <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000edc:	6a3b      	ldr	r3, [r7, #32]
 8000ede:	2b0c      	cmp	r3, #12
 8000ee0:	d112      	bne.n	8000f08 <HAL_RCC_OscConfig+0x68>
 8000ee2:	69fa      	ldr	r2, [r7, #28]
 8000ee4:	2380      	movs	r3, #128	@ 0x80
 8000ee6:	025b      	lsls	r3, r3, #9
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d10d      	bne.n	8000f08 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eec:	4bc1      	ldr	r3, [pc, #772]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	2380      	movs	r3, #128	@ 0x80
 8000ef2:	029b      	lsls	r3, r3, #10
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	d100      	bne.n	8000efa <HAL_RCC_OscConfig+0x5a>
 8000ef8:	e06b      	b.n	8000fd2 <HAL_RCC_OscConfig+0x132>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d167      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	f000 fb85 	bl	8001612 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	2380      	movs	r3, #128	@ 0x80
 8000f0e:	025b      	lsls	r3, r3, #9
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d107      	bne.n	8000f24 <HAL_RCC_OscConfig+0x84>
 8000f14:	4bb7      	ldr	r3, [pc, #732]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4bb6      	ldr	r3, [pc, #728]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 8000f1a:	2180      	movs	r1, #128	@ 0x80
 8000f1c:	0249      	lsls	r1, r1, #9
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	e027      	b.n	8000f74 <HAL_RCC_OscConfig+0xd4>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	23a0      	movs	r3, #160	@ 0xa0
 8000f2a:	02db      	lsls	r3, r3, #11
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d10e      	bne.n	8000f4e <HAL_RCC_OscConfig+0xae>
 8000f30:	4bb0      	ldr	r3, [pc, #704]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4baf      	ldr	r3, [pc, #700]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 8000f36:	2180      	movs	r1, #128	@ 0x80
 8000f38:	02c9      	lsls	r1, r1, #11
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	4bad      	ldr	r3, [pc, #692]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	4bac      	ldr	r3, [pc, #688]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 8000f44:	2180      	movs	r1, #128	@ 0x80
 8000f46:	0249      	lsls	r1, r1, #9
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	e012      	b.n	8000f74 <HAL_RCC_OscConfig+0xd4>
 8000f4e:	4ba9      	ldr	r3, [pc, #676]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	4ba8      	ldr	r3, [pc, #672]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 8000f54:	49a8      	ldr	r1, [pc, #672]	@ (80011f8 <HAL_RCC_OscConfig+0x358>)
 8000f56:	400a      	ands	r2, r1
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	4ba6      	ldr	r3, [pc, #664]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	2380      	movs	r3, #128	@ 0x80
 8000f60:	025b      	lsls	r3, r3, #9
 8000f62:	4013      	ands	r3, r2
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	4ba2      	ldr	r3, [pc, #648]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4ba1      	ldr	r3, [pc, #644]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 8000f6e:	49a3      	ldr	r1, [pc, #652]	@ (80011fc <HAL_RCC_OscConfig+0x35c>)
 8000f70:	400a      	ands	r2, r1
 8000f72:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d015      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7c:	f7ff fd44 	bl	8000a08 <HAL_GetTick>
 8000f80:	0003      	movs	r3, r0
 8000f82:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f84:	e009      	b.n	8000f9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f86:	f7ff fd3f 	bl	8000a08 <HAL_GetTick>
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	2b64      	cmp	r3, #100	@ 0x64
 8000f92:	d902      	bls.n	8000f9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f94:	2303      	movs	r3, #3
 8000f96:	f000 fb3c 	bl	8001612 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f9a:	4b96      	ldr	r3, [pc, #600]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	2380      	movs	r3, #128	@ 0x80
 8000fa0:	029b      	lsls	r3, r3, #10
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	d0ef      	beq.n	8000f86 <HAL_RCC_OscConfig+0xe6>
 8000fa6:	e015      	b.n	8000fd4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa8:	f7ff fd2e 	bl	8000a08 <HAL_GetTick>
 8000fac:	0003      	movs	r3, r0
 8000fae:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000fb0:	e008      	b.n	8000fc4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fb2:	f7ff fd29 	bl	8000a08 <HAL_GetTick>
 8000fb6:	0002      	movs	r2, r0
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	2b64      	cmp	r3, #100	@ 0x64
 8000fbe:	d901      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e326      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000fc4:	4b8b      	ldr	r3, [pc, #556]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	2380      	movs	r3, #128	@ 0x80
 8000fca:	029b      	lsls	r3, r3, #10
 8000fcc:	4013      	ands	r3, r2
 8000fce:	d1f0      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x112>
 8000fd0:	e000      	b.n	8000fd4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2202      	movs	r2, #2
 8000fda:	4013      	ands	r3, r2
 8000fdc:	d100      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x140>
 8000fde:	e08b      	b.n	80010f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fe6:	6a3b      	ldr	r3, [r7, #32]
 8000fe8:	2b04      	cmp	r3, #4
 8000fea:	d005      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000fec:	6a3b      	ldr	r3, [r7, #32]
 8000fee:	2b0c      	cmp	r3, #12
 8000ff0:	d13e      	bne.n	8001070 <HAL_RCC_OscConfig+0x1d0>
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d13b      	bne.n	8001070 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000ff8:	4b7e      	ldr	r3, [pc, #504]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2204      	movs	r2, #4
 8000ffe:	4013      	ands	r3, r2
 8001000:	d004      	beq.n	800100c <HAL_RCC_OscConfig+0x16c>
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d101      	bne.n	800100c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e302      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800100c:	4b79      	ldr	r3, [pc, #484]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	4a7b      	ldr	r2, [pc, #492]	@ (8001200 <HAL_RCC_OscConfig+0x360>)
 8001012:	4013      	ands	r3, r2
 8001014:	0019      	movs	r1, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	691b      	ldr	r3, [r3, #16]
 800101a:	021a      	lsls	r2, r3, #8
 800101c:	4b75      	ldr	r3, [pc, #468]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 800101e:	430a      	orrs	r2, r1
 8001020:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001022:	4b74      	ldr	r3, [pc, #464]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2209      	movs	r2, #9
 8001028:	4393      	bics	r3, r2
 800102a:	0019      	movs	r1, r3
 800102c:	4b71      	ldr	r3, [pc, #452]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	430a      	orrs	r2, r1
 8001032:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001034:	f000 fc40 	bl	80018b8 <HAL_RCC_GetSysClockFreq>
 8001038:	0001      	movs	r1, r0
 800103a:	4b6e      	ldr	r3, [pc, #440]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	091b      	lsrs	r3, r3, #4
 8001040:	220f      	movs	r2, #15
 8001042:	4013      	ands	r3, r2
 8001044:	4a6f      	ldr	r2, [pc, #444]	@ (8001204 <HAL_RCC_OscConfig+0x364>)
 8001046:	5cd3      	ldrb	r3, [r2, r3]
 8001048:	000a      	movs	r2, r1
 800104a:	40da      	lsrs	r2, r3
 800104c:	4b6e      	ldr	r3, [pc, #440]	@ (8001208 <HAL_RCC_OscConfig+0x368>)
 800104e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001050:	4b6e      	ldr	r3, [pc, #440]	@ (800120c <HAL_RCC_OscConfig+0x36c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2513      	movs	r5, #19
 8001056:	197c      	adds	r4, r7, r5
 8001058:	0018      	movs	r0, r3
 800105a:	f7ff fbe1 	bl	8000820 <HAL_InitTick>
 800105e:	0003      	movs	r3, r0
 8001060:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001062:	197b      	adds	r3, r7, r5
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d046      	beq.n	80010f8 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800106a:	197b      	adds	r3, r7, r5
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	e2d0      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d027      	beq.n	80010c6 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001076:	4b5f      	ldr	r3, [pc, #380]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2209      	movs	r2, #9
 800107c:	4393      	bics	r3, r2
 800107e:	0019      	movs	r1, r3
 8001080:	4b5c      	ldr	r3, [pc, #368]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	430a      	orrs	r2, r1
 8001086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001088:	f7ff fcbe 	bl	8000a08 <HAL_GetTick>
 800108c:	0003      	movs	r3, r0
 800108e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001090:	e008      	b.n	80010a4 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001092:	f7ff fcb9 	bl	8000a08 <HAL_GetTick>
 8001096:	0002      	movs	r2, r0
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d901      	bls.n	80010a4 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80010a0:	2303      	movs	r3, #3
 80010a2:	e2b6      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010a4:	4b53      	ldr	r3, [pc, #332]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2204      	movs	r2, #4
 80010aa:	4013      	ands	r3, r2
 80010ac:	d0f1      	beq.n	8001092 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ae:	4b51      	ldr	r3, [pc, #324]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	4a53      	ldr	r2, [pc, #332]	@ (8001200 <HAL_RCC_OscConfig+0x360>)
 80010b4:	4013      	ands	r3, r2
 80010b6:	0019      	movs	r1, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	021a      	lsls	r2, r3, #8
 80010be:	4b4d      	ldr	r3, [pc, #308]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 80010c0:	430a      	orrs	r2, r1
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	e018      	b.n	80010f8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010c6:	4b4b      	ldr	r3, [pc, #300]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	4b4a      	ldr	r3, [pc, #296]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 80010cc:	2101      	movs	r1, #1
 80010ce:	438a      	bics	r2, r1
 80010d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d2:	f7ff fc99 	bl	8000a08 <HAL_GetTick>
 80010d6:	0003      	movs	r3, r0
 80010d8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80010da:	e008      	b.n	80010ee <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010dc:	f7ff fc94 	bl	8000a08 <HAL_GetTick>
 80010e0:	0002      	movs	r2, r0
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d901      	bls.n	80010ee <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e291      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80010ee:	4b41      	ldr	r3, [pc, #260]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2204      	movs	r2, #4
 80010f4:	4013      	ands	r3, r2
 80010f6:	d1f1      	bne.n	80010dc <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2210      	movs	r2, #16
 80010fe:	4013      	ands	r3, r2
 8001100:	d100      	bne.n	8001104 <HAL_RCC_OscConfig+0x264>
 8001102:	e0a1      	b.n	8001248 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001104:	6a3b      	ldr	r3, [r7, #32]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d140      	bne.n	800118c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800110a:	4b3a      	ldr	r3, [pc, #232]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	2380      	movs	r3, #128	@ 0x80
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	4013      	ands	r3, r2
 8001114:	d005      	beq.n	8001122 <HAL_RCC_OscConfig+0x282>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e277      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001122:	4b34      	ldr	r3, [pc, #208]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	4a3a      	ldr	r2, [pc, #232]	@ (8001210 <HAL_RCC_OscConfig+0x370>)
 8001128:	4013      	ands	r3, r2
 800112a:	0019      	movs	r1, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001130:	4b30      	ldr	r3, [pc, #192]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 8001132:	430a      	orrs	r2, r1
 8001134:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001136:	4b2f      	ldr	r3, [pc, #188]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	0a19      	lsrs	r1, r3, #8
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a1b      	ldr	r3, [r3, #32]
 8001142:	061a      	lsls	r2, r3, #24
 8001144:	4b2b      	ldr	r3, [pc, #172]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 8001146:	430a      	orrs	r2, r1
 8001148:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800114e:	0b5b      	lsrs	r3, r3, #13
 8001150:	3301      	adds	r3, #1
 8001152:	2280      	movs	r2, #128	@ 0x80
 8001154:	0212      	lsls	r2, r2, #8
 8001156:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001158:	4b26      	ldr	r3, [pc, #152]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	091b      	lsrs	r3, r3, #4
 800115e:	210f      	movs	r1, #15
 8001160:	400b      	ands	r3, r1
 8001162:	4928      	ldr	r1, [pc, #160]	@ (8001204 <HAL_RCC_OscConfig+0x364>)
 8001164:	5ccb      	ldrb	r3, [r1, r3]
 8001166:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001168:	4b27      	ldr	r3, [pc, #156]	@ (8001208 <HAL_RCC_OscConfig+0x368>)
 800116a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800116c:	4b27      	ldr	r3, [pc, #156]	@ (800120c <HAL_RCC_OscConfig+0x36c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2513      	movs	r5, #19
 8001172:	197c      	adds	r4, r7, r5
 8001174:	0018      	movs	r0, r3
 8001176:	f7ff fb53 	bl	8000820 <HAL_InitTick>
 800117a:	0003      	movs	r3, r0
 800117c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800117e:	197b      	adds	r3, r7, r5
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d060      	beq.n	8001248 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001186:	197b      	adds	r3, r7, r5
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	e242      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d03f      	beq.n	8001214 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001194:	4b17      	ldr	r3, [pc, #92]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b16      	ldr	r3, [pc, #88]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 800119a:	2180      	movs	r1, #128	@ 0x80
 800119c:	0049      	lsls	r1, r1, #1
 800119e:	430a      	orrs	r2, r1
 80011a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a2:	f7ff fc31 	bl	8000a08 <HAL_GetTick>
 80011a6:	0003      	movs	r3, r0
 80011a8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011ac:	f7ff fc2c 	bl	8000a08 <HAL_GetTick>
 80011b0:	0002      	movs	r2, r0
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e229      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80011be:	4b0d      	ldr	r3, [pc, #52]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	2380      	movs	r3, #128	@ 0x80
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4013      	ands	r3, r2
 80011c8:	d0f0      	beq.n	80011ac <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011ca:	4b0a      	ldr	r3, [pc, #40]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	4a10      	ldr	r2, [pc, #64]	@ (8001210 <HAL_RCC_OscConfig+0x370>)
 80011d0:	4013      	ands	r3, r2
 80011d2:	0019      	movs	r1, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011d8:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 80011da:	430a      	orrs	r2, r1
 80011dc:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011de:	4b05      	ldr	r3, [pc, #20]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	021b      	lsls	r3, r3, #8
 80011e4:	0a19      	lsrs	r1, r3, #8
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a1b      	ldr	r3, [r3, #32]
 80011ea:	061a      	lsls	r2, r3, #24
 80011ec:	4b01      	ldr	r3, [pc, #4]	@ (80011f4 <HAL_RCC_OscConfig+0x354>)
 80011ee:	430a      	orrs	r2, r1
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	e029      	b.n	8001248 <HAL_RCC_OscConfig+0x3a8>
 80011f4:	40021000 	.word	0x40021000
 80011f8:	fffeffff 	.word	0xfffeffff
 80011fc:	fffbffff 	.word	0xfffbffff
 8001200:	ffffe0ff 	.word	0xffffe0ff
 8001204:	080038d0 	.word	0x080038d0
 8001208:	20000000 	.word	0x20000000
 800120c:	20000004 	.word	0x20000004
 8001210:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001214:	4bbd      	ldr	r3, [pc, #756]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4bbc      	ldr	r3, [pc, #752]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 800121a:	49bd      	ldr	r1, [pc, #756]	@ (8001510 <HAL_RCC_OscConfig+0x670>)
 800121c:	400a      	ands	r2, r1
 800121e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001220:	f7ff fbf2 	bl	8000a08 <HAL_GetTick>
 8001224:	0003      	movs	r3, r0
 8001226:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001228:	e008      	b.n	800123c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800122a:	f7ff fbed 	bl	8000a08 <HAL_GetTick>
 800122e:	0002      	movs	r2, r0
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e1ea      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800123c:	4bb3      	ldr	r3, [pc, #716]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	2380      	movs	r3, #128	@ 0x80
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4013      	ands	r3, r2
 8001246:	d1f0      	bne.n	800122a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2208      	movs	r2, #8
 800124e:	4013      	ands	r3, r2
 8001250:	d036      	beq.n	80012c0 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d019      	beq.n	800128e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800125a:	4bac      	ldr	r3, [pc, #688]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 800125c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800125e:	4bab      	ldr	r3, [pc, #684]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 8001260:	2101      	movs	r1, #1
 8001262:	430a      	orrs	r2, r1
 8001264:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001266:	f7ff fbcf 	bl	8000a08 <HAL_GetTick>
 800126a:	0003      	movs	r3, r0
 800126c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001270:	f7ff fbca 	bl	8000a08 <HAL_GetTick>
 8001274:	0002      	movs	r2, r0
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e1c7      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001282:	4ba2      	ldr	r3, [pc, #648]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 8001284:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001286:	2202      	movs	r2, #2
 8001288:	4013      	ands	r3, r2
 800128a:	d0f1      	beq.n	8001270 <HAL_RCC_OscConfig+0x3d0>
 800128c:	e018      	b.n	80012c0 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800128e:	4b9f      	ldr	r3, [pc, #636]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 8001290:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001292:	4b9e      	ldr	r3, [pc, #632]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 8001294:	2101      	movs	r1, #1
 8001296:	438a      	bics	r2, r1
 8001298:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129a:	f7ff fbb5 	bl	8000a08 <HAL_GetTick>
 800129e:	0003      	movs	r3, r0
 80012a0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012a4:	f7ff fbb0 	bl	8000a08 <HAL_GetTick>
 80012a8:	0002      	movs	r2, r0
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e1ad      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012b6:	4b95      	ldr	r3, [pc, #596]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 80012b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012ba:	2202      	movs	r2, #2
 80012bc:	4013      	ands	r3, r2
 80012be:	d1f1      	bne.n	80012a4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2204      	movs	r2, #4
 80012c6:	4013      	ands	r3, r2
 80012c8:	d100      	bne.n	80012cc <HAL_RCC_OscConfig+0x42c>
 80012ca:	e0ae      	b.n	800142a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012cc:	2027      	movs	r0, #39	@ 0x27
 80012ce:	183b      	adds	r3, r7, r0
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012d4:	4b8d      	ldr	r3, [pc, #564]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 80012d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80012d8:	2380      	movs	r3, #128	@ 0x80
 80012da:	055b      	lsls	r3, r3, #21
 80012dc:	4013      	ands	r3, r2
 80012de:	d109      	bne.n	80012f4 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012e0:	4b8a      	ldr	r3, [pc, #552]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 80012e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80012e4:	4b89      	ldr	r3, [pc, #548]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 80012e6:	2180      	movs	r1, #128	@ 0x80
 80012e8:	0549      	lsls	r1, r1, #21
 80012ea:	430a      	orrs	r2, r1
 80012ec:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80012ee:	183b      	adds	r3, r7, r0
 80012f0:	2201      	movs	r2, #1
 80012f2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f4:	4b87      	ldr	r3, [pc, #540]	@ (8001514 <HAL_RCC_OscConfig+0x674>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	2380      	movs	r3, #128	@ 0x80
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	4013      	ands	r3, r2
 80012fe:	d11a      	bne.n	8001336 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001300:	4b84      	ldr	r3, [pc, #528]	@ (8001514 <HAL_RCC_OscConfig+0x674>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b83      	ldr	r3, [pc, #524]	@ (8001514 <HAL_RCC_OscConfig+0x674>)
 8001306:	2180      	movs	r1, #128	@ 0x80
 8001308:	0049      	lsls	r1, r1, #1
 800130a:	430a      	orrs	r2, r1
 800130c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800130e:	f7ff fb7b 	bl	8000a08 <HAL_GetTick>
 8001312:	0003      	movs	r3, r0
 8001314:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001318:	f7ff fb76 	bl	8000a08 <HAL_GetTick>
 800131c:	0002      	movs	r2, r0
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b64      	cmp	r3, #100	@ 0x64
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e173      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132a:	4b7a      	ldr	r3, [pc, #488]	@ (8001514 <HAL_RCC_OscConfig+0x674>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	2380      	movs	r3, #128	@ 0x80
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	4013      	ands	r3, r2
 8001334:	d0f0      	beq.n	8001318 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689a      	ldr	r2, [r3, #8]
 800133a:	2380      	movs	r3, #128	@ 0x80
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	429a      	cmp	r2, r3
 8001340:	d107      	bne.n	8001352 <HAL_RCC_OscConfig+0x4b2>
 8001342:	4b72      	ldr	r3, [pc, #456]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 8001344:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001346:	4b71      	ldr	r3, [pc, #452]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 8001348:	2180      	movs	r1, #128	@ 0x80
 800134a:	0049      	lsls	r1, r1, #1
 800134c:	430a      	orrs	r2, r1
 800134e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001350:	e031      	b.n	80013b6 <HAL_RCC_OscConfig+0x516>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d10c      	bne.n	8001374 <HAL_RCC_OscConfig+0x4d4>
 800135a:	4b6c      	ldr	r3, [pc, #432]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 800135c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800135e:	4b6b      	ldr	r3, [pc, #428]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 8001360:	496b      	ldr	r1, [pc, #428]	@ (8001510 <HAL_RCC_OscConfig+0x670>)
 8001362:	400a      	ands	r2, r1
 8001364:	651a      	str	r2, [r3, #80]	@ 0x50
 8001366:	4b69      	ldr	r3, [pc, #420]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 8001368:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800136a:	4b68      	ldr	r3, [pc, #416]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 800136c:	496a      	ldr	r1, [pc, #424]	@ (8001518 <HAL_RCC_OscConfig+0x678>)
 800136e:	400a      	ands	r2, r1
 8001370:	651a      	str	r2, [r3, #80]	@ 0x50
 8001372:	e020      	b.n	80013b6 <HAL_RCC_OscConfig+0x516>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	23a0      	movs	r3, #160	@ 0xa0
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	429a      	cmp	r2, r3
 800137e:	d10e      	bne.n	800139e <HAL_RCC_OscConfig+0x4fe>
 8001380:	4b62      	ldr	r3, [pc, #392]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 8001382:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001384:	4b61      	ldr	r3, [pc, #388]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 8001386:	2180      	movs	r1, #128	@ 0x80
 8001388:	00c9      	lsls	r1, r1, #3
 800138a:	430a      	orrs	r2, r1
 800138c:	651a      	str	r2, [r3, #80]	@ 0x50
 800138e:	4b5f      	ldr	r3, [pc, #380]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 8001390:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001392:	4b5e      	ldr	r3, [pc, #376]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 8001394:	2180      	movs	r1, #128	@ 0x80
 8001396:	0049      	lsls	r1, r1, #1
 8001398:	430a      	orrs	r2, r1
 800139a:	651a      	str	r2, [r3, #80]	@ 0x50
 800139c:	e00b      	b.n	80013b6 <HAL_RCC_OscConfig+0x516>
 800139e:	4b5b      	ldr	r3, [pc, #364]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 80013a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80013a2:	4b5a      	ldr	r3, [pc, #360]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 80013a4:	495a      	ldr	r1, [pc, #360]	@ (8001510 <HAL_RCC_OscConfig+0x670>)
 80013a6:	400a      	ands	r2, r1
 80013a8:	651a      	str	r2, [r3, #80]	@ 0x50
 80013aa:	4b58      	ldr	r3, [pc, #352]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 80013ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80013ae:	4b57      	ldr	r3, [pc, #348]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 80013b0:	4959      	ldr	r1, [pc, #356]	@ (8001518 <HAL_RCC_OscConfig+0x678>)
 80013b2:	400a      	ands	r2, r1
 80013b4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d015      	beq.n	80013ea <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013be:	f7ff fb23 	bl	8000a08 <HAL_GetTick>
 80013c2:	0003      	movs	r3, r0
 80013c4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013c6:	e009      	b.n	80013dc <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013c8:	f7ff fb1e 	bl	8000a08 <HAL_GetTick>
 80013cc:	0002      	movs	r2, r0
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	4a52      	ldr	r2, [pc, #328]	@ (800151c <HAL_RCC_OscConfig+0x67c>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e11a      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013dc:	4b4b      	ldr	r3, [pc, #300]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 80013de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80013e0:	2380      	movs	r3, #128	@ 0x80
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4013      	ands	r3, r2
 80013e6:	d0ef      	beq.n	80013c8 <HAL_RCC_OscConfig+0x528>
 80013e8:	e014      	b.n	8001414 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ea:	f7ff fb0d 	bl	8000a08 <HAL_GetTick>
 80013ee:	0003      	movs	r3, r0
 80013f0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013f2:	e009      	b.n	8001408 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013f4:	f7ff fb08 	bl	8000a08 <HAL_GetTick>
 80013f8:	0002      	movs	r2, r0
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	4a47      	ldr	r2, [pc, #284]	@ (800151c <HAL_RCC_OscConfig+0x67c>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e104      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001408:	4b40      	ldr	r3, [pc, #256]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 800140a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800140c:	2380      	movs	r3, #128	@ 0x80
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4013      	ands	r3, r2
 8001412:	d1ef      	bne.n	80013f4 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001414:	2327      	movs	r3, #39	@ 0x27
 8001416:	18fb      	adds	r3, r7, r3
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d105      	bne.n	800142a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800141e:	4b3b      	ldr	r3, [pc, #236]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 8001420:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001422:	4b3a      	ldr	r3, [pc, #232]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 8001424:	493e      	ldr	r1, [pc, #248]	@ (8001520 <HAL_RCC_OscConfig+0x680>)
 8001426:	400a      	ands	r2, r1
 8001428:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2220      	movs	r2, #32
 8001430:	4013      	ands	r3, r2
 8001432:	d049      	beq.n	80014c8 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d026      	beq.n	800148a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800143c:	4b33      	ldr	r3, [pc, #204]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	4b32      	ldr	r3, [pc, #200]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 8001442:	2101      	movs	r1, #1
 8001444:	430a      	orrs	r2, r1
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	4b30      	ldr	r3, [pc, #192]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 800144a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800144c:	4b2f      	ldr	r3, [pc, #188]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 800144e:	2101      	movs	r1, #1
 8001450:	430a      	orrs	r2, r1
 8001452:	635a      	str	r2, [r3, #52]	@ 0x34
 8001454:	4b33      	ldr	r3, [pc, #204]	@ (8001524 <HAL_RCC_OscConfig+0x684>)
 8001456:	6a1a      	ldr	r2, [r3, #32]
 8001458:	4b32      	ldr	r3, [pc, #200]	@ (8001524 <HAL_RCC_OscConfig+0x684>)
 800145a:	2180      	movs	r1, #128	@ 0x80
 800145c:	0189      	lsls	r1, r1, #6
 800145e:	430a      	orrs	r2, r1
 8001460:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001462:	f7ff fad1 	bl	8000a08 <HAL_GetTick>
 8001466:	0003      	movs	r3, r0
 8001468:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800146c:	f7ff facc 	bl	8000a08 <HAL_GetTick>
 8001470:	0002      	movs	r2, r0
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e0c9      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800147e:	4b23      	ldr	r3, [pc, #140]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	2202      	movs	r2, #2
 8001484:	4013      	ands	r3, r2
 8001486:	d0f1      	beq.n	800146c <HAL_RCC_OscConfig+0x5cc>
 8001488:	e01e      	b.n	80014c8 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800148a:	4b20      	ldr	r3, [pc, #128]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	4b1f      	ldr	r3, [pc, #124]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 8001490:	2101      	movs	r1, #1
 8001492:	438a      	bics	r2, r1
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	4b23      	ldr	r3, [pc, #140]	@ (8001524 <HAL_RCC_OscConfig+0x684>)
 8001498:	6a1a      	ldr	r2, [r3, #32]
 800149a:	4b22      	ldr	r3, [pc, #136]	@ (8001524 <HAL_RCC_OscConfig+0x684>)
 800149c:	4922      	ldr	r1, [pc, #136]	@ (8001528 <HAL_RCC_OscConfig+0x688>)
 800149e:	400a      	ands	r2, r1
 80014a0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a2:	f7ff fab1 	bl	8000a08 <HAL_GetTick>
 80014a6:	0003      	movs	r3, r0
 80014a8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014ac:	f7ff faac 	bl	8000a08 <HAL_GetTick>
 80014b0:	0002      	movs	r2, r0
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e0a9      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80014be:	4b13      	ldr	r3, [pc, #76]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	2202      	movs	r2, #2
 80014c4:	4013      	ands	r3, r2
 80014c6:	d1f1      	bne.n	80014ac <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d100      	bne.n	80014d2 <HAL_RCC_OscConfig+0x632>
 80014d0:	e09e      	b.n	8001610 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014d2:	6a3b      	ldr	r3, [r7, #32]
 80014d4:	2b0c      	cmp	r3, #12
 80014d6:	d100      	bne.n	80014da <HAL_RCC_OscConfig+0x63a>
 80014d8:	e077      	b.n	80015ca <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d158      	bne.n	8001594 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e2:	4b0a      	ldr	r3, [pc, #40]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	4b09      	ldr	r3, [pc, #36]	@ (800150c <HAL_RCC_OscConfig+0x66c>)
 80014e8:	4910      	ldr	r1, [pc, #64]	@ (800152c <HAL_RCC_OscConfig+0x68c>)
 80014ea:	400a      	ands	r2, r1
 80014ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ee:	f7ff fa8b 	bl	8000a08 <HAL_GetTick>
 80014f2:	0003      	movs	r3, r0
 80014f4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80014f6:	e01b      	b.n	8001530 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f8:	f7ff fa86 	bl	8000a08 <HAL_GetTick>
 80014fc:	0002      	movs	r2, r0
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d914      	bls.n	8001530 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e083      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
 800150a:	46c0      	nop			@ (mov r8, r8)
 800150c:	40021000 	.word	0x40021000
 8001510:	fffffeff 	.word	0xfffffeff
 8001514:	40007000 	.word	0x40007000
 8001518:	fffffbff 	.word	0xfffffbff
 800151c:	00001388 	.word	0x00001388
 8001520:	efffffff 	.word	0xefffffff
 8001524:	40010000 	.word	0x40010000
 8001528:	ffffdfff 	.word	0xffffdfff
 800152c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001530:	4b3a      	ldr	r3, [pc, #232]	@ (800161c <HAL_RCC_OscConfig+0x77c>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	2380      	movs	r3, #128	@ 0x80
 8001536:	049b      	lsls	r3, r3, #18
 8001538:	4013      	ands	r3, r2
 800153a:	d1dd      	bne.n	80014f8 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800153c:	4b37      	ldr	r3, [pc, #220]	@ (800161c <HAL_RCC_OscConfig+0x77c>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	4a37      	ldr	r2, [pc, #220]	@ (8001620 <HAL_RCC_OscConfig+0x780>)
 8001542:	4013      	ands	r3, r2
 8001544:	0019      	movs	r1, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	431a      	orrs	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001554:	431a      	orrs	r2, r3
 8001556:	4b31      	ldr	r3, [pc, #196]	@ (800161c <HAL_RCC_OscConfig+0x77c>)
 8001558:	430a      	orrs	r2, r1
 800155a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800155c:	4b2f      	ldr	r3, [pc, #188]	@ (800161c <HAL_RCC_OscConfig+0x77c>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b2e      	ldr	r3, [pc, #184]	@ (800161c <HAL_RCC_OscConfig+0x77c>)
 8001562:	2180      	movs	r1, #128	@ 0x80
 8001564:	0449      	lsls	r1, r1, #17
 8001566:	430a      	orrs	r2, r1
 8001568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156a:	f7ff fa4d 	bl	8000a08 <HAL_GetTick>
 800156e:	0003      	movs	r3, r0
 8001570:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001574:	f7ff fa48 	bl	8000a08 <HAL_GetTick>
 8001578:	0002      	movs	r2, r0
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e045      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001586:	4b25      	ldr	r3, [pc, #148]	@ (800161c <HAL_RCC_OscConfig+0x77c>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	2380      	movs	r3, #128	@ 0x80
 800158c:	049b      	lsls	r3, r3, #18
 800158e:	4013      	ands	r3, r2
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0x6d4>
 8001592:	e03d      	b.n	8001610 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001594:	4b21      	ldr	r3, [pc, #132]	@ (800161c <HAL_RCC_OscConfig+0x77c>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b20      	ldr	r3, [pc, #128]	@ (800161c <HAL_RCC_OscConfig+0x77c>)
 800159a:	4922      	ldr	r1, [pc, #136]	@ (8001624 <HAL_RCC_OscConfig+0x784>)
 800159c:	400a      	ands	r2, r1
 800159e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a0:	f7ff fa32 	bl	8000a08 <HAL_GetTick>
 80015a4:	0003      	movs	r3, r0
 80015a6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015aa:	f7ff fa2d 	bl	8000a08 <HAL_GetTick>
 80015ae:	0002      	movs	r2, r0
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e02a      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015bc:	4b17      	ldr	r3, [pc, #92]	@ (800161c <HAL_RCC_OscConfig+0x77c>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	2380      	movs	r3, #128	@ 0x80
 80015c2:	049b      	lsls	r3, r3, #18
 80015c4:	4013      	ands	r3, r2
 80015c6:	d1f0      	bne.n	80015aa <HAL_RCC_OscConfig+0x70a>
 80015c8:	e022      	b.n	8001610 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d101      	bne.n	80015d6 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e01d      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015d6:	4b11      	ldr	r3, [pc, #68]	@ (800161c <HAL_RCC_OscConfig+0x77c>)
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015dc:	69fa      	ldr	r2, [r7, #28]
 80015de:	2380      	movs	r3, #128	@ 0x80
 80015e0:	025b      	lsls	r3, r3, #9
 80015e2:	401a      	ands	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d10f      	bne.n	800160c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80015ec:	69fa      	ldr	r2, [r7, #28]
 80015ee:	23f0      	movs	r3, #240	@ 0xf0
 80015f0:	039b      	lsls	r3, r3, #14
 80015f2:	401a      	ands	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d107      	bne.n	800160c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80015fc:	69fa      	ldr	r2, [r7, #28]
 80015fe:	23c0      	movs	r3, #192	@ 0xc0
 8001600:	041b      	lsls	r3, r3, #16
 8001602:	401a      	ands	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001608:	429a      	cmp	r2, r3
 800160a:	d001      	beq.n	8001610 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e000      	b.n	8001612 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	0018      	movs	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	b00a      	add	sp, #40	@ 0x28
 8001618:	bdb0      	pop	{r4, r5, r7, pc}
 800161a:	46c0      	nop			@ (mov r8, r8)
 800161c:	40021000 	.word	0x40021000
 8001620:	ff02ffff 	.word	0xff02ffff
 8001624:	feffffff 	.word	0xfeffffff

08001628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001628:	b5b0      	push	{r4, r5, r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e128      	b.n	800188e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800163c:	4b96      	ldr	r3, [pc, #600]	@ (8001898 <HAL_RCC_ClockConfig+0x270>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2201      	movs	r2, #1
 8001642:	4013      	ands	r3, r2
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d91e      	bls.n	8001688 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164a:	4b93      	ldr	r3, [pc, #588]	@ (8001898 <HAL_RCC_ClockConfig+0x270>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2201      	movs	r2, #1
 8001650:	4393      	bics	r3, r2
 8001652:	0019      	movs	r1, r3
 8001654:	4b90      	ldr	r3, [pc, #576]	@ (8001898 <HAL_RCC_ClockConfig+0x270>)
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800165c:	f7ff f9d4 	bl	8000a08 <HAL_GetTick>
 8001660:	0003      	movs	r3, r0
 8001662:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001664:	e009      	b.n	800167a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001666:	f7ff f9cf 	bl	8000a08 <HAL_GetTick>
 800166a:	0002      	movs	r2, r0
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	4a8a      	ldr	r2, [pc, #552]	@ (800189c <HAL_RCC_ClockConfig+0x274>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d901      	bls.n	800167a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e109      	b.n	800188e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800167a:	4b87      	ldr	r3, [pc, #540]	@ (8001898 <HAL_RCC_ClockConfig+0x270>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2201      	movs	r2, #1
 8001680:	4013      	ands	r3, r2
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	429a      	cmp	r2, r3
 8001686:	d1ee      	bne.n	8001666 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2202      	movs	r2, #2
 800168e:	4013      	ands	r3, r2
 8001690:	d009      	beq.n	80016a6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001692:	4b83      	ldr	r3, [pc, #524]	@ (80018a0 <HAL_RCC_ClockConfig+0x278>)
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	22f0      	movs	r2, #240	@ 0xf0
 8001698:	4393      	bics	r3, r2
 800169a:	0019      	movs	r1, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	4b7f      	ldr	r3, [pc, #508]	@ (80018a0 <HAL_RCC_ClockConfig+0x278>)
 80016a2:	430a      	orrs	r2, r1
 80016a4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2201      	movs	r2, #1
 80016ac:	4013      	ands	r3, r2
 80016ae:	d100      	bne.n	80016b2 <HAL_RCC_ClockConfig+0x8a>
 80016b0:	e089      	b.n	80017c6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d107      	bne.n	80016ca <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016ba:	4b79      	ldr	r3, [pc, #484]	@ (80018a0 <HAL_RCC_ClockConfig+0x278>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	2380      	movs	r3, #128	@ 0x80
 80016c0:	029b      	lsls	r3, r3, #10
 80016c2:	4013      	ands	r3, r2
 80016c4:	d120      	bne.n	8001708 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e0e1      	b.n	800188e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b03      	cmp	r3, #3
 80016d0:	d107      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016d2:	4b73      	ldr	r3, [pc, #460]	@ (80018a0 <HAL_RCC_ClockConfig+0x278>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	2380      	movs	r3, #128	@ 0x80
 80016d8:	049b      	lsls	r3, r3, #18
 80016da:	4013      	ands	r3, r2
 80016dc:	d114      	bne.n	8001708 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e0d5      	b.n	800188e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d106      	bne.n	80016f8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016ea:	4b6d      	ldr	r3, [pc, #436]	@ (80018a0 <HAL_RCC_ClockConfig+0x278>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2204      	movs	r2, #4
 80016f0:	4013      	ands	r3, r2
 80016f2:	d109      	bne.n	8001708 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e0ca      	b.n	800188e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016f8:	4b69      	ldr	r3, [pc, #420]	@ (80018a0 <HAL_RCC_ClockConfig+0x278>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	2380      	movs	r3, #128	@ 0x80
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4013      	ands	r3, r2
 8001702:	d101      	bne.n	8001708 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e0c2      	b.n	800188e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001708:	4b65      	ldr	r3, [pc, #404]	@ (80018a0 <HAL_RCC_ClockConfig+0x278>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	2203      	movs	r2, #3
 800170e:	4393      	bics	r3, r2
 8001710:	0019      	movs	r1, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	4b62      	ldr	r3, [pc, #392]	@ (80018a0 <HAL_RCC_ClockConfig+0x278>)
 8001718:	430a      	orrs	r2, r1
 800171a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800171c:	f7ff f974 	bl	8000a08 <HAL_GetTick>
 8001720:	0003      	movs	r3, r0
 8001722:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b02      	cmp	r3, #2
 800172a:	d111      	bne.n	8001750 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800172c:	e009      	b.n	8001742 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800172e:	f7ff f96b 	bl	8000a08 <HAL_GetTick>
 8001732:	0002      	movs	r2, r0
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	4a58      	ldr	r2, [pc, #352]	@ (800189c <HAL_RCC_ClockConfig+0x274>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e0a5      	b.n	800188e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001742:	4b57      	ldr	r3, [pc, #348]	@ (80018a0 <HAL_RCC_ClockConfig+0x278>)
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	220c      	movs	r2, #12
 8001748:	4013      	ands	r3, r2
 800174a:	2b08      	cmp	r3, #8
 800174c:	d1ef      	bne.n	800172e <HAL_RCC_ClockConfig+0x106>
 800174e:	e03a      	b.n	80017c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b03      	cmp	r3, #3
 8001756:	d111      	bne.n	800177c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001758:	e009      	b.n	800176e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800175a:	f7ff f955 	bl	8000a08 <HAL_GetTick>
 800175e:	0002      	movs	r2, r0
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	4a4d      	ldr	r2, [pc, #308]	@ (800189c <HAL_RCC_ClockConfig+0x274>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d901      	bls.n	800176e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e08f      	b.n	800188e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800176e:	4b4c      	ldr	r3, [pc, #304]	@ (80018a0 <HAL_RCC_ClockConfig+0x278>)
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	220c      	movs	r2, #12
 8001774:	4013      	ands	r3, r2
 8001776:	2b0c      	cmp	r3, #12
 8001778:	d1ef      	bne.n	800175a <HAL_RCC_ClockConfig+0x132>
 800177a:	e024      	b.n	80017c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d11b      	bne.n	80017bc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001784:	e009      	b.n	800179a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001786:	f7ff f93f 	bl	8000a08 <HAL_GetTick>
 800178a:	0002      	movs	r2, r0
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	4a42      	ldr	r2, [pc, #264]	@ (800189c <HAL_RCC_ClockConfig+0x274>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d901      	bls.n	800179a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e079      	b.n	800188e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800179a:	4b41      	ldr	r3, [pc, #260]	@ (80018a0 <HAL_RCC_ClockConfig+0x278>)
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	220c      	movs	r2, #12
 80017a0:	4013      	ands	r3, r2
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	d1ef      	bne.n	8001786 <HAL_RCC_ClockConfig+0x15e>
 80017a6:	e00e      	b.n	80017c6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017a8:	f7ff f92e 	bl	8000a08 <HAL_GetTick>
 80017ac:	0002      	movs	r2, r0
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	4a3a      	ldr	r2, [pc, #232]	@ (800189c <HAL_RCC_ClockConfig+0x274>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e068      	b.n	800188e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80017bc:	4b38      	ldr	r3, [pc, #224]	@ (80018a0 <HAL_RCC_ClockConfig+0x278>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	220c      	movs	r2, #12
 80017c2:	4013      	ands	r3, r2
 80017c4:	d1f0      	bne.n	80017a8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017c6:	4b34      	ldr	r3, [pc, #208]	@ (8001898 <HAL_RCC_ClockConfig+0x270>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2201      	movs	r2, #1
 80017cc:	4013      	ands	r3, r2
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d21e      	bcs.n	8001812 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d4:	4b30      	ldr	r3, [pc, #192]	@ (8001898 <HAL_RCC_ClockConfig+0x270>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2201      	movs	r2, #1
 80017da:	4393      	bics	r3, r2
 80017dc:	0019      	movs	r1, r3
 80017de:	4b2e      	ldr	r3, [pc, #184]	@ (8001898 <HAL_RCC_ClockConfig+0x270>)
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017e6:	f7ff f90f 	bl	8000a08 <HAL_GetTick>
 80017ea:	0003      	movs	r3, r0
 80017ec:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ee:	e009      	b.n	8001804 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f0:	f7ff f90a 	bl	8000a08 <HAL_GetTick>
 80017f4:	0002      	movs	r2, r0
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	4a28      	ldr	r2, [pc, #160]	@ (800189c <HAL_RCC_ClockConfig+0x274>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e044      	b.n	800188e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001804:	4b24      	ldr	r3, [pc, #144]	@ (8001898 <HAL_RCC_ClockConfig+0x270>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2201      	movs	r2, #1
 800180a:	4013      	ands	r3, r2
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	429a      	cmp	r2, r3
 8001810:	d1ee      	bne.n	80017f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2204      	movs	r2, #4
 8001818:	4013      	ands	r3, r2
 800181a:	d009      	beq.n	8001830 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800181c:	4b20      	ldr	r3, [pc, #128]	@ (80018a0 <HAL_RCC_ClockConfig+0x278>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4a20      	ldr	r2, [pc, #128]	@ (80018a4 <HAL_RCC_ClockConfig+0x27c>)
 8001822:	4013      	ands	r3, r2
 8001824:	0019      	movs	r1, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68da      	ldr	r2, [r3, #12]
 800182a:	4b1d      	ldr	r3, [pc, #116]	@ (80018a0 <HAL_RCC_ClockConfig+0x278>)
 800182c:	430a      	orrs	r2, r1
 800182e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2208      	movs	r2, #8
 8001836:	4013      	ands	r3, r2
 8001838:	d00a      	beq.n	8001850 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800183a:	4b19      	ldr	r3, [pc, #100]	@ (80018a0 <HAL_RCC_ClockConfig+0x278>)
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	4a1a      	ldr	r2, [pc, #104]	@ (80018a8 <HAL_RCC_ClockConfig+0x280>)
 8001840:	4013      	ands	r3, r2
 8001842:	0019      	movs	r1, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	00da      	lsls	r2, r3, #3
 800184a:	4b15      	ldr	r3, [pc, #84]	@ (80018a0 <HAL_RCC_ClockConfig+0x278>)
 800184c:	430a      	orrs	r2, r1
 800184e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001850:	f000 f832 	bl	80018b8 <HAL_RCC_GetSysClockFreq>
 8001854:	0001      	movs	r1, r0
 8001856:	4b12      	ldr	r3, [pc, #72]	@ (80018a0 <HAL_RCC_ClockConfig+0x278>)
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	091b      	lsrs	r3, r3, #4
 800185c:	220f      	movs	r2, #15
 800185e:	4013      	ands	r3, r2
 8001860:	4a12      	ldr	r2, [pc, #72]	@ (80018ac <HAL_RCC_ClockConfig+0x284>)
 8001862:	5cd3      	ldrb	r3, [r2, r3]
 8001864:	000a      	movs	r2, r1
 8001866:	40da      	lsrs	r2, r3
 8001868:	4b11      	ldr	r3, [pc, #68]	@ (80018b0 <HAL_RCC_ClockConfig+0x288>)
 800186a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800186c:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <HAL_RCC_ClockConfig+0x28c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	250b      	movs	r5, #11
 8001872:	197c      	adds	r4, r7, r5
 8001874:	0018      	movs	r0, r3
 8001876:	f7fe ffd3 	bl	8000820 <HAL_InitTick>
 800187a:	0003      	movs	r3, r0
 800187c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800187e:	197b      	adds	r3, r7, r5
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d002      	beq.n	800188c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001886:	197b      	adds	r3, r7, r5
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	e000      	b.n	800188e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	0018      	movs	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	b004      	add	sp, #16
 8001894:	bdb0      	pop	{r4, r5, r7, pc}
 8001896:	46c0      	nop			@ (mov r8, r8)
 8001898:	40022000 	.word	0x40022000
 800189c:	00001388 	.word	0x00001388
 80018a0:	40021000 	.word	0x40021000
 80018a4:	fffff8ff 	.word	0xfffff8ff
 80018a8:	ffffc7ff 	.word	0xffffc7ff
 80018ac:	080038d0 	.word	0x080038d0
 80018b0:	20000000 	.word	0x20000000
 80018b4:	20000004 	.word	0x20000004

080018b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018b8:	b5b0      	push	{r4, r5, r7, lr}
 80018ba:	b08e      	sub	sp, #56	@ 0x38
 80018bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80018be:	4b4c      	ldr	r3, [pc, #304]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0x138>)
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018c6:	230c      	movs	r3, #12
 80018c8:	4013      	ands	r3, r2
 80018ca:	2b0c      	cmp	r3, #12
 80018cc:	d014      	beq.n	80018f8 <HAL_RCC_GetSysClockFreq+0x40>
 80018ce:	d900      	bls.n	80018d2 <HAL_RCC_GetSysClockFreq+0x1a>
 80018d0:	e07b      	b.n	80019ca <HAL_RCC_GetSysClockFreq+0x112>
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	d002      	beq.n	80018dc <HAL_RCC_GetSysClockFreq+0x24>
 80018d6:	2b08      	cmp	r3, #8
 80018d8:	d00b      	beq.n	80018f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80018da:	e076      	b.n	80019ca <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80018dc:	4b44      	ldr	r3, [pc, #272]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0x138>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2210      	movs	r2, #16
 80018e2:	4013      	ands	r3, r2
 80018e4:	d002      	beq.n	80018ec <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80018e6:	4b43      	ldr	r3, [pc, #268]	@ (80019f4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80018e8:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80018ea:	e07c      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80018ec:	4b42      	ldr	r3, [pc, #264]	@ (80019f8 <HAL_RCC_GetSysClockFreq+0x140>)
 80018ee:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80018f0:	e079      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018f2:	4b42      	ldr	r3, [pc, #264]	@ (80019fc <HAL_RCC_GetSysClockFreq+0x144>)
 80018f4:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80018f6:	e076      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80018f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018fa:	0c9a      	lsrs	r2, r3, #18
 80018fc:	230f      	movs	r3, #15
 80018fe:	401a      	ands	r2, r3
 8001900:	4b3f      	ldr	r3, [pc, #252]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0x148>)
 8001902:	5c9b      	ldrb	r3, [r3, r2]
 8001904:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001908:	0d9a      	lsrs	r2, r3, #22
 800190a:	2303      	movs	r3, #3
 800190c:	4013      	ands	r3, r2
 800190e:	3301      	adds	r3, #1
 8001910:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001912:	4b37      	ldr	r3, [pc, #220]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001914:	68da      	ldr	r2, [r3, #12]
 8001916:	2380      	movs	r3, #128	@ 0x80
 8001918:	025b      	lsls	r3, r3, #9
 800191a:	4013      	ands	r3, r2
 800191c:	d01a      	beq.n	8001954 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800191e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001920:	61bb      	str	r3, [r7, #24]
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	4a35      	ldr	r2, [pc, #212]	@ (80019fc <HAL_RCC_GetSysClockFreq+0x144>)
 8001928:	2300      	movs	r3, #0
 800192a:	69b8      	ldr	r0, [r7, #24]
 800192c:	69f9      	ldr	r1, [r7, #28]
 800192e:	f7fe fc97 	bl	8000260 <__aeabi_lmul>
 8001932:	0002      	movs	r2, r0
 8001934:	000b      	movs	r3, r1
 8001936:	0010      	movs	r0, r2
 8001938:	0019      	movs	r1, r3
 800193a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	f7fe fc6b 	bl	8000220 <__aeabi_uldivmod>
 800194a:	0002      	movs	r2, r0
 800194c:	000b      	movs	r3, r1
 800194e:	0013      	movs	r3, r2
 8001950:	637b      	str	r3, [r7, #52]	@ 0x34
 8001952:	e037      	b.n	80019c4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001954:	4b26      	ldr	r3, [pc, #152]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2210      	movs	r2, #16
 800195a:	4013      	ands	r3, r2
 800195c:	d01a      	beq.n	8001994 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800195e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	4a23      	ldr	r2, [pc, #140]	@ (80019f4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001968:	2300      	movs	r3, #0
 800196a:	68b8      	ldr	r0, [r7, #8]
 800196c:	68f9      	ldr	r1, [r7, #12]
 800196e:	f7fe fc77 	bl	8000260 <__aeabi_lmul>
 8001972:	0002      	movs	r2, r0
 8001974:	000b      	movs	r3, r1
 8001976:	0010      	movs	r0, r2
 8001978:	0019      	movs	r1, r3
 800197a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197c:	603b      	str	r3, [r7, #0]
 800197e:	2300      	movs	r3, #0
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f7fe fc4b 	bl	8000220 <__aeabi_uldivmod>
 800198a:	0002      	movs	r2, r0
 800198c:	000b      	movs	r3, r1
 800198e:	0013      	movs	r3, r2
 8001990:	637b      	str	r3, [r7, #52]	@ 0x34
 8001992:	e017      	b.n	80019c4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001996:	0018      	movs	r0, r3
 8001998:	2300      	movs	r3, #0
 800199a:	0019      	movs	r1, r3
 800199c:	4a16      	ldr	r2, [pc, #88]	@ (80019f8 <HAL_RCC_GetSysClockFreq+0x140>)
 800199e:	2300      	movs	r3, #0
 80019a0:	f7fe fc5e 	bl	8000260 <__aeabi_lmul>
 80019a4:	0002      	movs	r2, r0
 80019a6:	000b      	movs	r3, r1
 80019a8:	0010      	movs	r0, r2
 80019aa:	0019      	movs	r1, r3
 80019ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ae:	001c      	movs	r4, r3
 80019b0:	2300      	movs	r3, #0
 80019b2:	001d      	movs	r5, r3
 80019b4:	0022      	movs	r2, r4
 80019b6:	002b      	movs	r3, r5
 80019b8:	f7fe fc32 	bl	8000220 <__aeabi_uldivmod>
 80019bc:	0002      	movs	r2, r0
 80019be:	000b      	movs	r3, r1
 80019c0:	0013      	movs	r3, r2
 80019c2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80019c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019c6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80019c8:	e00d      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80019ca:	4b09      	ldr	r3, [pc, #36]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0x138>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	0b5b      	lsrs	r3, r3, #13
 80019d0:	2207      	movs	r2, #7
 80019d2:	4013      	ands	r3, r2
 80019d4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80019d6:	6a3b      	ldr	r3, [r7, #32]
 80019d8:	3301      	adds	r3, #1
 80019da:	2280      	movs	r2, #128	@ 0x80
 80019dc:	0212      	lsls	r2, r2, #8
 80019de:	409a      	lsls	r2, r3
 80019e0:	0013      	movs	r3, r2
 80019e2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80019e4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80019e8:	0018      	movs	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	b00e      	add	sp, #56	@ 0x38
 80019ee:	bdb0      	pop	{r4, r5, r7, pc}
 80019f0:	40021000 	.word	0x40021000
 80019f4:	003d0900 	.word	0x003d0900
 80019f8:	00f42400 	.word	0x00f42400
 80019fc:	007a1200 	.word	0x007a1200
 8001a00:	080038e8 	.word	0x080038e8

08001a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a08:	4b02      	ldr	r3, [pc, #8]	@ (8001a14 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
}
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	46c0      	nop			@ (mov r8, r8)
 8001a14:	20000000 	.word	0x20000000

08001a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a1c:	f7ff fff2 	bl	8001a04 <HAL_RCC_GetHCLKFreq>
 8001a20:	0001      	movs	r1, r0
 8001a22:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	0a1b      	lsrs	r3, r3, #8
 8001a28:	2207      	movs	r2, #7
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	4a04      	ldr	r2, [pc, #16]	@ (8001a40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a2e:	5cd3      	ldrb	r3, [r2, r3]
 8001a30:	40d9      	lsrs	r1, r3
 8001a32:	000b      	movs	r3, r1
}
 8001a34:	0018      	movs	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	46c0      	nop			@ (mov r8, r8)
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	080038e0 	.word	0x080038e0

08001a44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a48:	f7ff ffdc 	bl	8001a04 <HAL_RCC_GetHCLKFreq>
 8001a4c:	0001      	movs	r1, r0
 8001a4e:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	0adb      	lsrs	r3, r3, #11
 8001a54:	2207      	movs	r2, #7
 8001a56:	4013      	ands	r3, r2
 8001a58:	4a04      	ldr	r2, [pc, #16]	@ (8001a6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001a5a:	5cd3      	ldrb	r3, [r2, r3]
 8001a5c:	40d9      	lsrs	r1, r3
 8001a5e:	000b      	movs	r3, r1
}
 8001a60:	0018      	movs	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	46c0      	nop			@ (mov r8, r8)
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	080038e0 	.word	0x080038e0

08001a70 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	220f      	movs	r2, #15
 8001a7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a80:	4b12      	ldr	r3, [pc, #72]	@ (8001acc <HAL_RCC_GetClockConfig+0x5c>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	2203      	movs	r2, #3
 8001a86:	401a      	ands	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001acc <HAL_RCC_GetClockConfig+0x5c>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	22f0      	movs	r2, #240	@ 0xf0
 8001a92:	401a      	ands	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a98:	4b0c      	ldr	r3, [pc, #48]	@ (8001acc <HAL_RCC_GetClockConfig+0x5c>)
 8001a9a:	68da      	ldr	r2, [r3, #12]
 8001a9c:	23e0      	movs	r3, #224	@ 0xe0
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	401a      	ands	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001aa6:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <HAL_RCC_GetClockConfig+0x5c>)
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	08da      	lsrs	r2, r3, #3
 8001aac:	23e0      	movs	r3, #224	@ 0xe0
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	401a      	ands	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001ab6:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <HAL_RCC_GetClockConfig+0x60>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2201      	movs	r2, #1
 8001abc:	401a      	ands	r2, r3
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	601a      	str	r2, [r3, #0]
}
 8001ac2:	46c0      	nop			@ (mov r8, r8)
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	b002      	add	sp, #8
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	46c0      	nop			@ (mov r8, r8)
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40022000 	.word	0x40022000

08001ad4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001adc:	2317      	movs	r3, #23
 8001ade:	18fb      	adds	r3, r7, r3
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2220      	movs	r2, #32
 8001aea:	4013      	ands	r3, r2
 8001aec:	d106      	bne.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	2380      	movs	r3, #128	@ 0x80
 8001af4:	011b      	lsls	r3, r3, #4
 8001af6:	4013      	ands	r3, r2
 8001af8:	d100      	bne.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001afa:	e104      	b.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001afc:	4bb1      	ldr	r3, [pc, #708]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001afe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b00:	2380      	movs	r3, #128	@ 0x80
 8001b02:	055b      	lsls	r3, r3, #21
 8001b04:	4013      	ands	r3, r2
 8001b06:	d10a      	bne.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b08:	4bae      	ldr	r3, [pc, #696]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b0c:	4bad      	ldr	r3, [pc, #692]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b0e:	2180      	movs	r1, #128	@ 0x80
 8001b10:	0549      	lsls	r1, r1, #21
 8001b12:	430a      	orrs	r2, r1
 8001b14:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001b16:	2317      	movs	r3, #23
 8001b18:	18fb      	adds	r3, r7, r3
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1e:	4baa      	ldr	r3, [pc, #680]	@ (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	2380      	movs	r3, #128	@ 0x80
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	4013      	ands	r3, r2
 8001b28:	d11a      	bne.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b2a:	4ba7      	ldr	r3, [pc, #668]	@ (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	4ba6      	ldr	r3, [pc, #664]	@ (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001b30:	2180      	movs	r1, #128	@ 0x80
 8001b32:	0049      	lsls	r1, r1, #1
 8001b34:	430a      	orrs	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b38:	f7fe ff66 	bl	8000a08 <HAL_GetTick>
 8001b3c:	0003      	movs	r3, r0
 8001b3e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b40:	e008      	b.n	8001b54 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b42:	f7fe ff61 	bl	8000a08 <HAL_GetTick>
 8001b46:	0002      	movs	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b64      	cmp	r3, #100	@ 0x64
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e133      	b.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b54:	4b9c      	ldr	r3, [pc, #624]	@ (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	2380      	movs	r3, #128	@ 0x80
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d0f0      	beq.n	8001b42 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001b60:	4b98      	ldr	r3, [pc, #608]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	23c0      	movs	r3, #192	@ 0xc0
 8001b66:	039b      	lsls	r3, r3, #14
 8001b68:	4013      	ands	r3, r2
 8001b6a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	23c0      	movs	r3, #192	@ 0xc0
 8001b72:	039b      	lsls	r3, r3, #14
 8001b74:	4013      	ands	r3, r2
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d107      	bne.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	23c0      	movs	r3, #192	@ 0xc0
 8001b82:	039b      	lsls	r3, r3, #14
 8001b84:	4013      	ands	r3, r2
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d013      	beq.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	23c0      	movs	r3, #192	@ 0xc0
 8001b92:	029b      	lsls	r3, r3, #10
 8001b94:	401a      	ands	r2, r3
 8001b96:	23c0      	movs	r3, #192	@ 0xc0
 8001b98:	029b      	lsls	r3, r3, #10
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d10a      	bne.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001b9e:	4b89      	ldr	r3, [pc, #548]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	2380      	movs	r3, #128	@ 0x80
 8001ba4:	029b      	lsls	r3, r3, #10
 8001ba6:	401a      	ands	r2, r3
 8001ba8:	2380      	movs	r3, #128	@ 0x80
 8001baa:	029b      	lsls	r3, r3, #10
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d101      	bne.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e103      	b.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001bb4:	4b83      	ldr	r3, [pc, #524]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bb6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001bb8:	23c0      	movs	r3, #192	@ 0xc0
 8001bba:	029b      	lsls	r3, r3, #10
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d049      	beq.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	23c0      	movs	r3, #192	@ 0xc0
 8001bcc:	029b      	lsls	r3, r3, #10
 8001bce:	4013      	ands	r3, r2
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d004      	beq.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2220      	movs	r2, #32
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d10d      	bne.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	23c0      	movs	r3, #192	@ 0xc0
 8001be6:	029b      	lsls	r3, r3, #10
 8001be8:	4013      	ands	r3, r2
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d034      	beq.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	2380      	movs	r3, #128	@ 0x80
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d02e      	beq.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001bfc:	4b71      	ldr	r3, [pc, #452]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c00:	4a72      	ldr	r2, [pc, #456]	@ (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001c02:	4013      	ands	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c06:	4b6f      	ldr	r3, [pc, #444]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c0a:	4b6e      	ldr	r3, [pc, #440]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c0c:	2180      	movs	r1, #128	@ 0x80
 8001c0e:	0309      	lsls	r1, r1, #12
 8001c10:	430a      	orrs	r2, r1
 8001c12:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c14:	4b6b      	ldr	r3, [pc, #428]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c16:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c18:	4b6a      	ldr	r3, [pc, #424]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c1a:	496d      	ldr	r1, [pc, #436]	@ (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001c1c:	400a      	ands	r2, r1
 8001c1e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001c20:	4b68      	ldr	r3, [pc, #416]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	2380      	movs	r3, #128	@ 0x80
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d014      	beq.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c30:	f7fe feea 	bl	8000a08 <HAL_GetTick>
 8001c34:	0003      	movs	r3, r0
 8001c36:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c38:	e009      	b.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c3a:	f7fe fee5 	bl	8000a08 <HAL_GetTick>
 8001c3e:	0002      	movs	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	4a63      	ldr	r2, [pc, #396]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e0b6      	b.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c4e:	4b5d      	ldr	r3, [pc, #372]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c52:	2380      	movs	r3, #128	@ 0x80
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4013      	ands	r3, r2
 8001c58:	d0ef      	beq.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	2380      	movs	r3, #128	@ 0x80
 8001c60:	011b      	lsls	r3, r3, #4
 8001c62:	4013      	ands	r3, r2
 8001c64:	d01f      	beq.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	23c0      	movs	r3, #192	@ 0xc0
 8001c6c:	029b      	lsls	r3, r3, #10
 8001c6e:	401a      	ands	r2, r3
 8001c70:	23c0      	movs	r3, #192	@ 0xc0
 8001c72:	029b      	lsls	r3, r3, #10
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d10c      	bne.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8001c78:	4b52      	ldr	r3, [pc, #328]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a56      	ldr	r2, [pc, #344]	@ (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001c7e:	4013      	ands	r3, r2
 8001c80:	0019      	movs	r1, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	23c0      	movs	r3, #192	@ 0xc0
 8001c88:	039b      	lsls	r3, r3, #14
 8001c8a:	401a      	ands	r2, r3
 8001c8c:	4b4d      	ldr	r3, [pc, #308]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	4b4c      	ldr	r3, [pc, #304]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c94:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	23c0      	movs	r3, #192	@ 0xc0
 8001c9c:	029b      	lsls	r3, r3, #10
 8001c9e:	401a      	ands	r2, r3
 8001ca0:	4b48      	ldr	r3, [pc, #288]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2220      	movs	r2, #32
 8001cac:	4013      	ands	r3, r2
 8001cae:	d01f      	beq.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	23c0      	movs	r3, #192	@ 0xc0
 8001cb6:	029b      	lsls	r3, r3, #10
 8001cb8:	401a      	ands	r2, r3
 8001cba:	23c0      	movs	r3, #192	@ 0xc0
 8001cbc:	029b      	lsls	r3, r3, #10
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d10c      	bne.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001cc2:	4b40      	ldr	r3, [pc, #256]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a44      	ldr	r2, [pc, #272]	@ (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	0019      	movs	r1, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	23c0      	movs	r3, #192	@ 0xc0
 8001cd2:	039b      	lsls	r3, r3, #14
 8001cd4:	401a      	ands	r2, r3
 8001cd6:	4b3b      	ldr	r3, [pc, #236]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	4b39      	ldr	r3, [pc, #228]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cde:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	23c0      	movs	r3, #192	@ 0xc0
 8001ce6:	029b      	lsls	r3, r3, #10
 8001ce8:	401a      	ands	r2, r3
 8001cea:	4b36      	ldr	r3, [pc, #216]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cec:	430a      	orrs	r2, r1
 8001cee:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cf0:	2317      	movs	r3, #23
 8001cf2:	18fb      	adds	r3, r7, r3
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d105      	bne.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cfa:	4b32      	ldr	r3, [pc, #200]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001cfe:	4b31      	ldr	r3, [pc, #196]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d00:	4936      	ldr	r1, [pc, #216]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001d02:	400a      	ands	r2, r1
 8001d04:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d009      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d10:	4b2c      	ldr	r3, [pc, #176]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d14:	2203      	movs	r2, #3
 8001d16:	4393      	bics	r3, r2
 8001d18:	0019      	movs	r1, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	4b29      	ldr	r3, [pc, #164]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d20:	430a      	orrs	r2, r1
 8001d22:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2202      	movs	r2, #2
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d009      	beq.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d2e:	4b25      	ldr	r3, [pc, #148]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d32:	220c      	movs	r2, #12
 8001d34:	4393      	bics	r3, r2
 8001d36:	0019      	movs	r1, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	691a      	ldr	r2, [r3, #16]
 8001d3c:	4b21      	ldr	r3, [pc, #132]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2204      	movs	r2, #4
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d009      	beq.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d50:	4a23      	ldr	r2, [pc, #140]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	0019      	movs	r1, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	695a      	ldr	r2, [r3, #20]
 8001d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2208      	movs	r2, #8
 8001d66:	4013      	ands	r3, r2
 8001d68:	d009      	beq.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d6a:	4b16      	ldr	r3, [pc, #88]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d6e:	4a1d      	ldr	r2, [pc, #116]	@ (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	0019      	movs	r1, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	699a      	ldr	r2, [r3, #24]
 8001d78:	4b12      	ldr	r3, [pc, #72]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2240      	movs	r2, #64	@ 0x40
 8001d84:	4013      	ands	r3, r2
 8001d86:	d009      	beq.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d88:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d8c:	4a16      	ldr	r2, [pc, #88]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001d8e:	4013      	ands	r3, r2
 8001d90:	0019      	movs	r1, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a1a      	ldr	r2, [r3, #32]
 8001d96:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2280      	movs	r2, #128	@ 0x80
 8001da2:	4013      	ands	r3, r2
 8001da4:	d009      	beq.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001da6:	4b07      	ldr	r3, [pc, #28]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001daa:	4a10      	ldr	r2, [pc, #64]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	0019      	movs	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69da      	ldr	r2, [r3, #28]
 8001db4:	4b03      	ldr	r3, [pc, #12]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001db6:	430a      	orrs	r2, r1
 8001db8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	b006      	add	sp, #24
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	40007000 	.word	0x40007000
 8001dcc:	fffcffff 	.word	0xfffcffff
 8001dd0:	fff7ffff 	.word	0xfff7ffff
 8001dd4:	00001388 	.word	0x00001388
 8001dd8:	ffcfffff 	.word	0xffcfffff
 8001ddc:	efffffff 	.word	0xefffffff
 8001de0:	fffff3ff 	.word	0xfffff3ff
 8001de4:	ffffcfff 	.word	0xffffcfff
 8001de8:	fbffffff 	.word	0xfbffffff
 8001dec:	fff3ffff 	.word	0xfff3ffff

08001df0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e032      	b.n	8001e68 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2239      	movs	r2, #57	@ 0x39
 8001e06:	5c9b      	ldrb	r3, [r3, r2]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d107      	bne.n	8001e1e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2238      	movs	r2, #56	@ 0x38
 8001e12:	2100      	movs	r1, #0
 8001e14:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f000 f829 	bl	8001e70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2239      	movs	r2, #57	@ 0x39
 8001e22:	2102      	movs	r1, #2
 8001e24:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	0019      	movs	r1, r3
 8001e30:	0010      	movs	r0, r2
 8001e32:	f000 f979 	bl	8002128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	223e      	movs	r2, #62	@ 0x3e
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	223a      	movs	r2, #58	@ 0x3a
 8001e42:	2101      	movs	r1, #1
 8001e44:	5499      	strb	r1, [r3, r2]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	223b      	movs	r2, #59	@ 0x3b
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	5499      	strb	r1, [r3, r2]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	223c      	movs	r2, #60	@ 0x3c
 8001e52:	2101      	movs	r1, #1
 8001e54:	5499      	strb	r1, [r3, r2]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	223d      	movs	r2, #61	@ 0x3d
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2239      	movs	r2, #57	@ 0x39
 8001e62:	2101      	movs	r1, #1
 8001e64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	0018      	movs	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	b002      	add	sp, #8
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e78:	46c0      	nop			@ (mov r8, r8)
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	b002      	add	sp, #8
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2239      	movs	r2, #57	@ 0x39
 8001e8c:	5c9b      	ldrb	r3, [r3, r2]
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d001      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e036      	b.n	8001f06 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2239      	movs	r2, #57	@ 0x39
 8001e9c:	2102      	movs	r1, #2
 8001e9e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2101      	movs	r1, #1
 8001eac:	430a      	orrs	r2, r1
 8001eae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	2380      	movs	r3, #128	@ 0x80
 8001eb6:	05db      	lsls	r3, r3, #23
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d009      	beq.n	8001ed0 <HAL_TIM_Base_Start_IT+0x50>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a13      	ldr	r2, [pc, #76]	@ (8001f10 <HAL_TIM_Base_Start_IT+0x90>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d004      	beq.n	8001ed0 <HAL_TIM_Base_Start_IT+0x50>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a12      	ldr	r2, [pc, #72]	@ (8001f14 <HAL_TIM_Base_Start_IT+0x94>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d111      	bne.n	8001ef4 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	2207      	movs	r2, #7
 8001ed8:	4013      	ands	r3, r2
 8001eda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2b06      	cmp	r3, #6
 8001ee0:	d010      	beq.n	8001f04 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2101      	movs	r1, #1
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ef2:	e007      	b.n	8001f04 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2101      	movs	r1, #1
 8001f00:	430a      	orrs	r2, r1
 8001f02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	0018      	movs	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	b004      	add	sp, #16
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	46c0      	nop			@ (mov r8, r8)
 8001f10:	40010800 	.word	0x40010800
 8001f14:	40011400 	.word	0x40011400

08001f18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	2202      	movs	r2, #2
 8001f28:	4013      	ands	r3, r2
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d124      	bne.n	8001f78 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	2202      	movs	r2, #2
 8001f36:	4013      	ands	r3, r2
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d11d      	bne.n	8001f78 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2203      	movs	r2, #3
 8001f42:	4252      	negs	r2, r2
 8001f44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	2203      	movs	r2, #3
 8001f54:	4013      	ands	r3, r2
 8001f56:	d004      	beq.n	8001f62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	f000 f8cc 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8001f60:	e007      	b.n	8001f72 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	0018      	movs	r0, r3
 8001f66:	f000 f8bf 	bl	80020e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f000 f8cb 	bl	8002108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	2204      	movs	r2, #4
 8001f80:	4013      	ands	r3, r2
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	d125      	bne.n	8001fd2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	2204      	movs	r2, #4
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b04      	cmp	r3, #4
 8001f92:	d11e      	bne.n	8001fd2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2205      	movs	r2, #5
 8001f9a:	4252      	negs	r2, r2
 8001f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	699a      	ldr	r2, [r3, #24]
 8001faa:	23c0      	movs	r3, #192	@ 0xc0
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d004      	beq.n	8001fbc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	f000 f89f 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8001fba:	e007      	b.n	8001fcc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	f000 f892 	bl	80020e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	f000 f89e 	bl	8002108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	2208      	movs	r2, #8
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d124      	bne.n	800202a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	2208      	movs	r2, #8
 8001fe8:	4013      	ands	r3, r2
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d11d      	bne.n	800202a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2209      	movs	r2, #9
 8001ff4:	4252      	negs	r2, r2
 8001ff6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2204      	movs	r2, #4
 8001ffc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	2203      	movs	r2, #3
 8002006:	4013      	ands	r3, r2
 8002008:	d004      	beq.n	8002014 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	0018      	movs	r0, r3
 800200e:	f000 f873 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8002012:	e007      	b.n	8002024 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	0018      	movs	r0, r3
 8002018:	f000 f866 	bl	80020e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	0018      	movs	r0, r3
 8002020:	f000 f872 	bl	8002108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	2210      	movs	r2, #16
 8002032:	4013      	ands	r3, r2
 8002034:	2b10      	cmp	r3, #16
 8002036:	d125      	bne.n	8002084 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	2210      	movs	r2, #16
 8002040:	4013      	ands	r3, r2
 8002042:	2b10      	cmp	r3, #16
 8002044:	d11e      	bne.n	8002084 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2211      	movs	r2, #17
 800204c:	4252      	negs	r2, r2
 800204e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2208      	movs	r2, #8
 8002054:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	69da      	ldr	r2, [r3, #28]
 800205c:	23c0      	movs	r3, #192	@ 0xc0
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4013      	ands	r3, r2
 8002062:	d004      	beq.n	800206e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	0018      	movs	r0, r3
 8002068:	f000 f846 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 800206c:	e007      	b.n	800207e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	0018      	movs	r0, r3
 8002072:	f000 f839 	bl	80020e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	0018      	movs	r0, r3
 800207a:	f000 f845 	bl	8002108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	2201      	movs	r2, #1
 800208c:	4013      	ands	r3, r2
 800208e:	2b01      	cmp	r3, #1
 8002090:	d10f      	bne.n	80020b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	2201      	movs	r2, #1
 800209a:	4013      	ands	r3, r2
 800209c:	2b01      	cmp	r3, #1
 800209e:	d108      	bne.n	80020b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2202      	movs	r2, #2
 80020a6:	4252      	negs	r2, r2
 80020a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	0018      	movs	r0, r3
 80020ae:	f7fe fb3f 	bl	8000730 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	2240      	movs	r2, #64	@ 0x40
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b40      	cmp	r3, #64	@ 0x40
 80020be:	d10f      	bne.n	80020e0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	2240      	movs	r2, #64	@ 0x40
 80020c8:	4013      	ands	r3, r2
 80020ca:	2b40      	cmp	r3, #64	@ 0x40
 80020cc:	d108      	bne.n	80020e0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2241      	movs	r2, #65	@ 0x41
 80020d4:	4252      	negs	r2, r2
 80020d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	0018      	movs	r0, r3
 80020dc:	f000 f81c 	bl	8002118 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020e0:	46c0      	nop			@ (mov r8, r8)
 80020e2:	46bd      	mov	sp, r7
 80020e4:	b002      	add	sp, #8
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020f0:	46c0      	nop			@ (mov r8, r8)
 80020f2:	46bd      	mov	sp, r7
 80020f4:	b002      	add	sp, #8
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002100:	46c0      	nop			@ (mov r8, r8)
 8002102:	46bd      	mov	sp, r7
 8002104:	b002      	add	sp, #8
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002110:	46c0      	nop			@ (mov r8, r8)
 8002112:	46bd      	mov	sp, r7
 8002114:	b002      	add	sp, #8
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002120:	46c0      	nop			@ (mov r8, r8)
 8002122:	46bd      	mov	sp, r7
 8002124:	b002      	add	sp, #8
 8002126:	bd80      	pop	{r7, pc}

08002128 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	2380      	movs	r3, #128	@ 0x80
 800213c:	05db      	lsls	r3, r3, #23
 800213e:	429a      	cmp	r2, r3
 8002140:	d007      	beq.n	8002152 <TIM_Base_SetConfig+0x2a>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a1f      	ldr	r2, [pc, #124]	@ (80021c4 <TIM_Base_SetConfig+0x9c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d003      	beq.n	8002152 <TIM_Base_SetConfig+0x2a>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a1e      	ldr	r2, [pc, #120]	@ (80021c8 <TIM_Base_SetConfig+0xa0>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d108      	bne.n	8002164 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2270      	movs	r2, #112	@ 0x70
 8002156:	4393      	bics	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	4313      	orrs	r3, r2
 8002162:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	2380      	movs	r3, #128	@ 0x80
 8002168:	05db      	lsls	r3, r3, #23
 800216a:	429a      	cmp	r2, r3
 800216c:	d007      	beq.n	800217e <TIM_Base_SetConfig+0x56>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a14      	ldr	r2, [pc, #80]	@ (80021c4 <TIM_Base_SetConfig+0x9c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d003      	beq.n	800217e <TIM_Base_SetConfig+0x56>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a13      	ldr	r2, [pc, #76]	@ (80021c8 <TIM_Base_SetConfig+0xa0>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d108      	bne.n	8002190 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	4a12      	ldr	r2, [pc, #72]	@ (80021cc <TIM_Base_SetConfig+0xa4>)
 8002182:	4013      	ands	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	4313      	orrs	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2280      	movs	r2, #128	@ 0x80
 8002194:	4393      	bics	r3, r2
 8002196:	001a      	movs	r2, r3
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	615a      	str	r2, [r3, #20]
}
 80021bc:	46c0      	nop			@ (mov r8, r8)
 80021be:	46bd      	mov	sp, r7
 80021c0:	b004      	add	sp, #16
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40010800 	.word	0x40010800
 80021c8:	40011400 	.word	0x40011400
 80021cc:	fffffcff 	.word	0xfffffcff

080021d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e044      	b.n	800226c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d107      	bne.n	80021fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2278      	movs	r2, #120	@ 0x78
 80021ee:	2100      	movs	r1, #0
 80021f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	0018      	movs	r0, r3
 80021f6:	f7fe facf 	bl	8000798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2224      	movs	r2, #36	@ 0x24
 80021fe:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2101      	movs	r1, #1
 800220c:	438a      	bics	r2, r1
 800220e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	0018      	movs	r0, r3
 8002214:	f000 f830 	bl	8002278 <UART_SetConfig>
 8002218:	0003      	movs	r3, r0
 800221a:	2b01      	cmp	r3, #1
 800221c:	d101      	bne.n	8002222 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e024      	b.n	800226c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	0018      	movs	r0, r3
 800222e:	f000 faa7 	bl	8002780 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	490d      	ldr	r1, [pc, #52]	@ (8002274 <HAL_UART_Init+0xa4>)
 800223e:	400a      	ands	r2, r1
 8002240:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	212a      	movs	r1, #42	@ 0x2a
 800224e:	438a      	bics	r2, r1
 8002250:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2101      	movs	r1, #1
 800225e:	430a      	orrs	r2, r1
 8002260:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	0018      	movs	r0, r3
 8002266:	f000 fb3f 	bl	80028e8 <UART_CheckIdleState>
 800226a:	0003      	movs	r3, r0
}
 800226c:	0018      	movs	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	b002      	add	sp, #8
 8002272:	bd80      	pop	{r7, pc}
 8002274:	ffffb7ff 	.word	0xffffb7ff

08002278 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002278:	b5b0      	push	{r4, r5, r7, lr}
 800227a:	b08e      	sub	sp, #56	@ 0x38
 800227c:	af00      	add	r7, sp, #0
 800227e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002280:	231a      	movs	r3, #26
 8002282:	2218      	movs	r2, #24
 8002284:	189b      	adds	r3, r3, r2
 8002286:	19db      	adds	r3, r3, r7
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	431a      	orrs	r2, r3
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	431a      	orrs	r2, r3
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4ac6      	ldr	r2, [pc, #792]	@ (80025c4 <UART_SetConfig+0x34c>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	0019      	movs	r1, r3
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80022b6:	430a      	orrs	r2, r1
 80022b8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	4ac1      	ldr	r2, [pc, #772]	@ (80025c8 <UART_SetConfig+0x350>)
 80022c2:	4013      	ands	r3, r2
 80022c4:	0019      	movs	r1, r3
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4abb      	ldr	r2, [pc, #748]	@ (80025cc <UART_SetConfig+0x354>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d004      	beq.n	80022ec <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80022e8:	4313      	orrs	r3, r2
 80022ea:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	4ab7      	ldr	r2, [pc, #732]	@ (80025d0 <UART_SetConfig+0x358>)
 80022f4:	4013      	ands	r3, r2
 80022f6:	0019      	movs	r1, r3
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80022fe:	430a      	orrs	r2, r1
 8002300:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4ab3      	ldr	r2, [pc, #716]	@ (80025d4 <UART_SetConfig+0x35c>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d131      	bne.n	8002370 <UART_SetConfig+0xf8>
 800230c:	4bb2      	ldr	r3, [pc, #712]	@ (80025d8 <UART_SetConfig+0x360>)
 800230e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002310:	2203      	movs	r2, #3
 8002312:	4013      	ands	r3, r2
 8002314:	2b03      	cmp	r3, #3
 8002316:	d01d      	beq.n	8002354 <UART_SetConfig+0xdc>
 8002318:	d823      	bhi.n	8002362 <UART_SetConfig+0xea>
 800231a:	2b02      	cmp	r3, #2
 800231c:	d00c      	beq.n	8002338 <UART_SetConfig+0xc0>
 800231e:	d820      	bhi.n	8002362 <UART_SetConfig+0xea>
 8002320:	2b00      	cmp	r3, #0
 8002322:	d002      	beq.n	800232a <UART_SetConfig+0xb2>
 8002324:	2b01      	cmp	r3, #1
 8002326:	d00e      	beq.n	8002346 <UART_SetConfig+0xce>
 8002328:	e01b      	b.n	8002362 <UART_SetConfig+0xea>
 800232a:	231b      	movs	r3, #27
 800232c:	2218      	movs	r2, #24
 800232e:	189b      	adds	r3, r3, r2
 8002330:	19db      	adds	r3, r3, r7
 8002332:	2201      	movs	r2, #1
 8002334:	701a      	strb	r2, [r3, #0]
 8002336:	e09c      	b.n	8002472 <UART_SetConfig+0x1fa>
 8002338:	231b      	movs	r3, #27
 800233a:	2218      	movs	r2, #24
 800233c:	189b      	adds	r3, r3, r2
 800233e:	19db      	adds	r3, r3, r7
 8002340:	2202      	movs	r2, #2
 8002342:	701a      	strb	r2, [r3, #0]
 8002344:	e095      	b.n	8002472 <UART_SetConfig+0x1fa>
 8002346:	231b      	movs	r3, #27
 8002348:	2218      	movs	r2, #24
 800234a:	189b      	adds	r3, r3, r2
 800234c:	19db      	adds	r3, r3, r7
 800234e:	2204      	movs	r2, #4
 8002350:	701a      	strb	r2, [r3, #0]
 8002352:	e08e      	b.n	8002472 <UART_SetConfig+0x1fa>
 8002354:	231b      	movs	r3, #27
 8002356:	2218      	movs	r2, #24
 8002358:	189b      	adds	r3, r3, r2
 800235a:	19db      	adds	r3, r3, r7
 800235c:	2208      	movs	r2, #8
 800235e:	701a      	strb	r2, [r3, #0]
 8002360:	e087      	b.n	8002472 <UART_SetConfig+0x1fa>
 8002362:	231b      	movs	r3, #27
 8002364:	2218      	movs	r2, #24
 8002366:	189b      	adds	r3, r3, r2
 8002368:	19db      	adds	r3, r3, r7
 800236a:	2210      	movs	r2, #16
 800236c:	701a      	strb	r2, [r3, #0]
 800236e:	e080      	b.n	8002472 <UART_SetConfig+0x1fa>
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a99      	ldr	r2, [pc, #612]	@ (80025dc <UART_SetConfig+0x364>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d131      	bne.n	80023de <UART_SetConfig+0x166>
 800237a:	4b97      	ldr	r3, [pc, #604]	@ (80025d8 <UART_SetConfig+0x360>)
 800237c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800237e:	220c      	movs	r2, #12
 8002380:	4013      	ands	r3, r2
 8002382:	2b0c      	cmp	r3, #12
 8002384:	d01d      	beq.n	80023c2 <UART_SetConfig+0x14a>
 8002386:	d823      	bhi.n	80023d0 <UART_SetConfig+0x158>
 8002388:	2b08      	cmp	r3, #8
 800238a:	d00c      	beq.n	80023a6 <UART_SetConfig+0x12e>
 800238c:	d820      	bhi.n	80023d0 <UART_SetConfig+0x158>
 800238e:	2b00      	cmp	r3, #0
 8002390:	d002      	beq.n	8002398 <UART_SetConfig+0x120>
 8002392:	2b04      	cmp	r3, #4
 8002394:	d00e      	beq.n	80023b4 <UART_SetConfig+0x13c>
 8002396:	e01b      	b.n	80023d0 <UART_SetConfig+0x158>
 8002398:	231b      	movs	r3, #27
 800239a:	2218      	movs	r2, #24
 800239c:	189b      	adds	r3, r3, r2
 800239e:	19db      	adds	r3, r3, r7
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
 80023a4:	e065      	b.n	8002472 <UART_SetConfig+0x1fa>
 80023a6:	231b      	movs	r3, #27
 80023a8:	2218      	movs	r2, #24
 80023aa:	189b      	adds	r3, r3, r2
 80023ac:	19db      	adds	r3, r3, r7
 80023ae:	2202      	movs	r2, #2
 80023b0:	701a      	strb	r2, [r3, #0]
 80023b2:	e05e      	b.n	8002472 <UART_SetConfig+0x1fa>
 80023b4:	231b      	movs	r3, #27
 80023b6:	2218      	movs	r2, #24
 80023b8:	189b      	adds	r3, r3, r2
 80023ba:	19db      	adds	r3, r3, r7
 80023bc:	2204      	movs	r2, #4
 80023be:	701a      	strb	r2, [r3, #0]
 80023c0:	e057      	b.n	8002472 <UART_SetConfig+0x1fa>
 80023c2:	231b      	movs	r3, #27
 80023c4:	2218      	movs	r2, #24
 80023c6:	189b      	adds	r3, r3, r2
 80023c8:	19db      	adds	r3, r3, r7
 80023ca:	2208      	movs	r2, #8
 80023cc:	701a      	strb	r2, [r3, #0]
 80023ce:	e050      	b.n	8002472 <UART_SetConfig+0x1fa>
 80023d0:	231b      	movs	r3, #27
 80023d2:	2218      	movs	r2, #24
 80023d4:	189b      	adds	r3, r3, r2
 80023d6:	19db      	adds	r3, r3, r7
 80023d8:	2210      	movs	r2, #16
 80023da:	701a      	strb	r2, [r3, #0]
 80023dc:	e049      	b.n	8002472 <UART_SetConfig+0x1fa>
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a7a      	ldr	r2, [pc, #488]	@ (80025cc <UART_SetConfig+0x354>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d13e      	bne.n	8002466 <UART_SetConfig+0x1ee>
 80023e8:	4b7b      	ldr	r3, [pc, #492]	@ (80025d8 <UART_SetConfig+0x360>)
 80023ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80023ec:	23c0      	movs	r3, #192	@ 0xc0
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	4013      	ands	r3, r2
 80023f2:	22c0      	movs	r2, #192	@ 0xc0
 80023f4:	0112      	lsls	r2, r2, #4
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d027      	beq.n	800244a <UART_SetConfig+0x1d2>
 80023fa:	22c0      	movs	r2, #192	@ 0xc0
 80023fc:	0112      	lsls	r2, r2, #4
 80023fe:	4293      	cmp	r3, r2
 8002400:	d82a      	bhi.n	8002458 <UART_SetConfig+0x1e0>
 8002402:	2280      	movs	r2, #128	@ 0x80
 8002404:	0112      	lsls	r2, r2, #4
 8002406:	4293      	cmp	r3, r2
 8002408:	d011      	beq.n	800242e <UART_SetConfig+0x1b6>
 800240a:	2280      	movs	r2, #128	@ 0x80
 800240c:	0112      	lsls	r2, r2, #4
 800240e:	4293      	cmp	r3, r2
 8002410:	d822      	bhi.n	8002458 <UART_SetConfig+0x1e0>
 8002412:	2b00      	cmp	r3, #0
 8002414:	d004      	beq.n	8002420 <UART_SetConfig+0x1a8>
 8002416:	2280      	movs	r2, #128	@ 0x80
 8002418:	00d2      	lsls	r2, r2, #3
 800241a:	4293      	cmp	r3, r2
 800241c:	d00e      	beq.n	800243c <UART_SetConfig+0x1c4>
 800241e:	e01b      	b.n	8002458 <UART_SetConfig+0x1e0>
 8002420:	231b      	movs	r3, #27
 8002422:	2218      	movs	r2, #24
 8002424:	189b      	adds	r3, r3, r2
 8002426:	19db      	adds	r3, r3, r7
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]
 800242c:	e021      	b.n	8002472 <UART_SetConfig+0x1fa>
 800242e:	231b      	movs	r3, #27
 8002430:	2218      	movs	r2, #24
 8002432:	189b      	adds	r3, r3, r2
 8002434:	19db      	adds	r3, r3, r7
 8002436:	2202      	movs	r2, #2
 8002438:	701a      	strb	r2, [r3, #0]
 800243a:	e01a      	b.n	8002472 <UART_SetConfig+0x1fa>
 800243c:	231b      	movs	r3, #27
 800243e:	2218      	movs	r2, #24
 8002440:	189b      	adds	r3, r3, r2
 8002442:	19db      	adds	r3, r3, r7
 8002444:	2204      	movs	r2, #4
 8002446:	701a      	strb	r2, [r3, #0]
 8002448:	e013      	b.n	8002472 <UART_SetConfig+0x1fa>
 800244a:	231b      	movs	r3, #27
 800244c:	2218      	movs	r2, #24
 800244e:	189b      	adds	r3, r3, r2
 8002450:	19db      	adds	r3, r3, r7
 8002452:	2208      	movs	r2, #8
 8002454:	701a      	strb	r2, [r3, #0]
 8002456:	e00c      	b.n	8002472 <UART_SetConfig+0x1fa>
 8002458:	231b      	movs	r3, #27
 800245a:	2218      	movs	r2, #24
 800245c:	189b      	adds	r3, r3, r2
 800245e:	19db      	adds	r3, r3, r7
 8002460:	2210      	movs	r2, #16
 8002462:	701a      	strb	r2, [r3, #0]
 8002464:	e005      	b.n	8002472 <UART_SetConfig+0x1fa>
 8002466:	231b      	movs	r3, #27
 8002468:	2218      	movs	r2, #24
 800246a:	189b      	adds	r3, r3, r2
 800246c:	19db      	adds	r3, r3, r7
 800246e:	2210      	movs	r2, #16
 8002470:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a55      	ldr	r2, [pc, #340]	@ (80025cc <UART_SetConfig+0x354>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d000      	beq.n	800247e <UART_SetConfig+0x206>
 800247c:	e084      	b.n	8002588 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800247e:	231b      	movs	r3, #27
 8002480:	2218      	movs	r2, #24
 8002482:	189b      	adds	r3, r3, r2
 8002484:	19db      	adds	r3, r3, r7
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b08      	cmp	r3, #8
 800248a:	d01d      	beq.n	80024c8 <UART_SetConfig+0x250>
 800248c:	dc20      	bgt.n	80024d0 <UART_SetConfig+0x258>
 800248e:	2b04      	cmp	r3, #4
 8002490:	d015      	beq.n	80024be <UART_SetConfig+0x246>
 8002492:	dc1d      	bgt.n	80024d0 <UART_SetConfig+0x258>
 8002494:	2b00      	cmp	r3, #0
 8002496:	d002      	beq.n	800249e <UART_SetConfig+0x226>
 8002498:	2b02      	cmp	r3, #2
 800249a:	d005      	beq.n	80024a8 <UART_SetConfig+0x230>
 800249c:	e018      	b.n	80024d0 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800249e:	f7ff fabb 	bl	8001a18 <HAL_RCC_GetPCLK1Freq>
 80024a2:	0003      	movs	r3, r0
 80024a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80024a6:	e01c      	b.n	80024e2 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024a8:	4b4b      	ldr	r3, [pc, #300]	@ (80025d8 <UART_SetConfig+0x360>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2210      	movs	r2, #16
 80024ae:	4013      	ands	r3, r2
 80024b0:	d002      	beq.n	80024b8 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80024b2:	4b4b      	ldr	r3, [pc, #300]	@ (80025e0 <UART_SetConfig+0x368>)
 80024b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80024b6:	e014      	b.n	80024e2 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 80024b8:	4b4a      	ldr	r3, [pc, #296]	@ (80025e4 <UART_SetConfig+0x36c>)
 80024ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80024bc:	e011      	b.n	80024e2 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024be:	f7ff f9fb 	bl	80018b8 <HAL_RCC_GetSysClockFreq>
 80024c2:	0003      	movs	r3, r0
 80024c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80024c6:	e00c      	b.n	80024e2 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024c8:	2380      	movs	r3, #128	@ 0x80
 80024ca:	021b      	lsls	r3, r3, #8
 80024cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80024ce:	e008      	b.n	80024e2 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80024d4:	231a      	movs	r3, #26
 80024d6:	2218      	movs	r2, #24
 80024d8:	189b      	adds	r3, r3, r2
 80024da:	19db      	adds	r3, r3, r7
 80024dc:	2201      	movs	r2, #1
 80024de:	701a      	strb	r2, [r3, #0]
        break;
 80024e0:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80024e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d100      	bne.n	80024ea <UART_SetConfig+0x272>
 80024e8:	e132      	b.n	8002750 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	0013      	movs	r3, r2
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	189b      	adds	r3, r3, r2
 80024f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d305      	bcc.n	8002506 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002500:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002502:	429a      	cmp	r2, r3
 8002504:	d906      	bls.n	8002514 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8002506:	231a      	movs	r3, #26
 8002508:	2218      	movs	r2, #24
 800250a:	189b      	adds	r3, r3, r2
 800250c:	19db      	adds	r3, r3, r7
 800250e:	2201      	movs	r2, #1
 8002510:	701a      	strb	r2, [r3, #0]
 8002512:	e11d      	b.n	8002750 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]
 800251c:	6939      	ldr	r1, [r7, #16]
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	000b      	movs	r3, r1
 8002522:	0e1b      	lsrs	r3, r3, #24
 8002524:	0010      	movs	r0, r2
 8002526:	0205      	lsls	r5, r0, #8
 8002528:	431d      	orrs	r5, r3
 800252a:	000b      	movs	r3, r1
 800252c:	021c      	lsls	r4, r3, #8
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	085b      	lsrs	r3, r3, #1
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	68b8      	ldr	r0, [r7, #8]
 800253c:	68f9      	ldr	r1, [r7, #12]
 800253e:	1900      	adds	r0, r0, r4
 8002540:	4169      	adcs	r1, r5
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	2300      	movs	r3, #0
 800254a:	607b      	str	r3, [r7, #4]
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f7fd fe66 	bl	8000220 <__aeabi_uldivmod>
 8002554:	0002      	movs	r2, r0
 8002556:	000b      	movs	r3, r1
 8002558:	0013      	movs	r3, r2
 800255a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800255c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800255e:	23c0      	movs	r3, #192	@ 0xc0
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	429a      	cmp	r2, r3
 8002564:	d309      	bcc.n	800257a <UART_SetConfig+0x302>
 8002566:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002568:	2380      	movs	r3, #128	@ 0x80
 800256a:	035b      	lsls	r3, r3, #13
 800256c:	429a      	cmp	r2, r3
 800256e:	d204      	bcs.n	800257a <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002576:	60da      	str	r2, [r3, #12]
 8002578:	e0ea      	b.n	8002750 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 800257a:	231a      	movs	r3, #26
 800257c:	2218      	movs	r2, #24
 800257e:	189b      	adds	r3, r3, r2
 8002580:	19db      	adds	r3, r3, r7
 8002582:	2201      	movs	r2, #1
 8002584:	701a      	strb	r2, [r3, #0]
 8002586:	e0e3      	b.n	8002750 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	69da      	ldr	r2, [r3, #28]
 800258c:	2380      	movs	r3, #128	@ 0x80
 800258e:	021b      	lsls	r3, r3, #8
 8002590:	429a      	cmp	r2, r3
 8002592:	d000      	beq.n	8002596 <UART_SetConfig+0x31e>
 8002594:	e085      	b.n	80026a2 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8002596:	231b      	movs	r3, #27
 8002598:	2218      	movs	r2, #24
 800259a:	189b      	adds	r3, r3, r2
 800259c:	19db      	adds	r3, r3, r7
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	d837      	bhi.n	8002614 <UART_SetConfig+0x39c>
 80025a4:	009a      	lsls	r2, r3, #2
 80025a6:	4b10      	ldr	r3, [pc, #64]	@ (80025e8 <UART_SetConfig+0x370>)
 80025a8:	18d3      	adds	r3, r2, r3
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025ae:	f7ff fa33 	bl	8001a18 <HAL_RCC_GetPCLK1Freq>
 80025b2:	0003      	movs	r3, r0
 80025b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80025b6:	e036      	b.n	8002626 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80025b8:	f7ff fa44 	bl	8001a44 <HAL_RCC_GetPCLK2Freq>
 80025bc:	0003      	movs	r3, r0
 80025be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80025c0:	e031      	b.n	8002626 <UART_SetConfig+0x3ae>
 80025c2:	46c0      	nop			@ (mov r8, r8)
 80025c4:	efff69f3 	.word	0xefff69f3
 80025c8:	ffffcfff 	.word	0xffffcfff
 80025cc:	40004800 	.word	0x40004800
 80025d0:	fffff4ff 	.word	0xfffff4ff
 80025d4:	40013800 	.word	0x40013800
 80025d8:	40021000 	.word	0x40021000
 80025dc:	40004400 	.word	0x40004400
 80025e0:	003d0900 	.word	0x003d0900
 80025e4:	00f42400 	.word	0x00f42400
 80025e8:	080038f4 	.word	0x080038f4
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025ec:	4b60      	ldr	r3, [pc, #384]	@ (8002770 <UART_SetConfig+0x4f8>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2210      	movs	r2, #16
 80025f2:	4013      	ands	r3, r2
 80025f4:	d002      	beq.n	80025fc <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80025f6:	4b5f      	ldr	r3, [pc, #380]	@ (8002774 <UART_SetConfig+0x4fc>)
 80025f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80025fa:	e014      	b.n	8002626 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 80025fc:	4b5e      	ldr	r3, [pc, #376]	@ (8002778 <UART_SetConfig+0x500>)
 80025fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002600:	e011      	b.n	8002626 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002602:	f7ff f959 	bl	80018b8 <HAL_RCC_GetSysClockFreq>
 8002606:	0003      	movs	r3, r0
 8002608:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800260a:	e00c      	b.n	8002626 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800260c:	2380      	movs	r3, #128	@ 0x80
 800260e:	021b      	lsls	r3, r3, #8
 8002610:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002612:	e008      	b.n	8002626 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002618:	231a      	movs	r3, #26
 800261a:	2218      	movs	r2, #24
 800261c:	189b      	adds	r3, r3, r2
 800261e:	19db      	adds	r3, r3, r7
 8002620:	2201      	movs	r2, #1
 8002622:	701a      	strb	r2, [r3, #0]
        break;
 8002624:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002628:	2b00      	cmp	r3, #0
 800262a:	d100      	bne.n	800262e <UART_SetConfig+0x3b6>
 800262c:	e090      	b.n	8002750 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800262e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002630:	005a      	lsls	r2, r3, #1
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	085b      	lsrs	r3, r3, #1
 8002638:	18d2      	adds	r2, r2, r3
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	0019      	movs	r1, r3
 8002640:	0010      	movs	r0, r2
 8002642:	f7fd fd61 	bl	8000108 <__udivsi3>
 8002646:	0003      	movs	r3, r0
 8002648:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800264a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800264c:	2b0f      	cmp	r3, #15
 800264e:	d921      	bls.n	8002694 <UART_SetConfig+0x41c>
 8002650:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002652:	2380      	movs	r3, #128	@ 0x80
 8002654:	025b      	lsls	r3, r3, #9
 8002656:	429a      	cmp	r2, r3
 8002658:	d21c      	bcs.n	8002694 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800265a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800265c:	b29a      	uxth	r2, r3
 800265e:	200e      	movs	r0, #14
 8002660:	2418      	movs	r4, #24
 8002662:	1903      	adds	r3, r0, r4
 8002664:	19db      	adds	r3, r3, r7
 8002666:	210f      	movs	r1, #15
 8002668:	438a      	bics	r2, r1
 800266a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800266c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800266e:	085b      	lsrs	r3, r3, #1
 8002670:	b29b      	uxth	r3, r3
 8002672:	2207      	movs	r2, #7
 8002674:	4013      	ands	r3, r2
 8002676:	b299      	uxth	r1, r3
 8002678:	1903      	adds	r3, r0, r4
 800267a:	19db      	adds	r3, r3, r7
 800267c:	1902      	adds	r2, r0, r4
 800267e:	19d2      	adds	r2, r2, r7
 8002680:	8812      	ldrh	r2, [r2, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	1902      	adds	r2, r0, r4
 800268c:	19d2      	adds	r2, r2, r7
 800268e:	8812      	ldrh	r2, [r2, #0]
 8002690:	60da      	str	r2, [r3, #12]
 8002692:	e05d      	b.n	8002750 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002694:	231a      	movs	r3, #26
 8002696:	2218      	movs	r2, #24
 8002698:	189b      	adds	r3, r3, r2
 800269a:	19db      	adds	r3, r3, r7
 800269c:	2201      	movs	r2, #1
 800269e:	701a      	strb	r2, [r3, #0]
 80026a0:	e056      	b.n	8002750 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80026a2:	231b      	movs	r3, #27
 80026a4:	2218      	movs	r2, #24
 80026a6:	189b      	adds	r3, r3, r2
 80026a8:	19db      	adds	r3, r3, r7
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d822      	bhi.n	80026f6 <UART_SetConfig+0x47e>
 80026b0:	009a      	lsls	r2, r3, #2
 80026b2:	4b32      	ldr	r3, [pc, #200]	@ (800277c <UART_SetConfig+0x504>)
 80026b4:	18d3      	adds	r3, r2, r3
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026ba:	f7ff f9ad 	bl	8001a18 <HAL_RCC_GetPCLK1Freq>
 80026be:	0003      	movs	r3, r0
 80026c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80026c2:	e021      	b.n	8002708 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80026c4:	f7ff f9be 	bl	8001a44 <HAL_RCC_GetPCLK2Freq>
 80026c8:	0003      	movs	r3, r0
 80026ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80026cc:	e01c      	b.n	8002708 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026ce:	4b28      	ldr	r3, [pc, #160]	@ (8002770 <UART_SetConfig+0x4f8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2210      	movs	r2, #16
 80026d4:	4013      	ands	r3, r2
 80026d6:	d002      	beq.n	80026de <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80026d8:	4b26      	ldr	r3, [pc, #152]	@ (8002774 <UART_SetConfig+0x4fc>)
 80026da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80026dc:	e014      	b.n	8002708 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 80026de:	4b26      	ldr	r3, [pc, #152]	@ (8002778 <UART_SetConfig+0x500>)
 80026e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80026e2:	e011      	b.n	8002708 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026e4:	f7ff f8e8 	bl	80018b8 <HAL_RCC_GetSysClockFreq>
 80026e8:	0003      	movs	r3, r0
 80026ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80026ec:	e00c      	b.n	8002708 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026ee:	2380      	movs	r3, #128	@ 0x80
 80026f0:	021b      	lsls	r3, r3, #8
 80026f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80026f4:	e008      	b.n	8002708 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80026fa:	231a      	movs	r3, #26
 80026fc:	2218      	movs	r2, #24
 80026fe:	189b      	adds	r3, r3, r2
 8002700:	19db      	adds	r3, r3, r7
 8002702:	2201      	movs	r2, #1
 8002704:	701a      	strb	r2, [r3, #0]
        break;
 8002706:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800270a:	2b00      	cmp	r3, #0
 800270c:	d020      	beq.n	8002750 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	085a      	lsrs	r2, r3, #1
 8002714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002716:	18d2      	adds	r2, r2, r3
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	0019      	movs	r1, r3
 800271e:	0010      	movs	r0, r2
 8002720:	f7fd fcf2 	bl	8000108 <__udivsi3>
 8002724:	0003      	movs	r3, r0
 8002726:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800272a:	2b0f      	cmp	r3, #15
 800272c:	d90a      	bls.n	8002744 <UART_SetConfig+0x4cc>
 800272e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002730:	2380      	movs	r3, #128	@ 0x80
 8002732:	025b      	lsls	r3, r3, #9
 8002734:	429a      	cmp	r2, r3
 8002736:	d205      	bcs.n	8002744 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800273a:	b29a      	uxth	r2, r3
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	60da      	str	r2, [r3, #12]
 8002742:	e005      	b.n	8002750 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002744:	231a      	movs	r3, #26
 8002746:	2218      	movs	r2, #24
 8002748:	189b      	adds	r3, r3, r2
 800274a:	19db      	adds	r3, r3, r7
 800274c:	2201      	movs	r2, #1
 800274e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	2200      	movs	r2, #0
 8002754:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	2200      	movs	r2, #0
 800275a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800275c:	231a      	movs	r3, #26
 800275e:	2218      	movs	r2, #24
 8002760:	189b      	adds	r3, r3, r2
 8002762:	19db      	adds	r3, r3, r7
 8002764:	781b      	ldrb	r3, [r3, #0]
}
 8002766:	0018      	movs	r0, r3
 8002768:	46bd      	mov	sp, r7
 800276a:	b00e      	add	sp, #56	@ 0x38
 800276c:	bdb0      	pop	{r4, r5, r7, pc}
 800276e:	46c0      	nop			@ (mov r8, r8)
 8002770:	40021000 	.word	0x40021000
 8002774:	003d0900 	.word	0x003d0900
 8002778:	00f42400 	.word	0x00f42400
 800277c:	08003918 	.word	0x08003918

08002780 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278c:	2201      	movs	r2, #1
 800278e:	4013      	ands	r3, r2
 8002790:	d00b      	beq.n	80027aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	4a4a      	ldr	r2, [pc, #296]	@ (80028c4 <UART_AdvFeatureConfig+0x144>)
 800279a:	4013      	ands	r3, r2
 800279c:	0019      	movs	r1, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ae:	2202      	movs	r2, #2
 80027b0:	4013      	ands	r3, r2
 80027b2:	d00b      	beq.n	80027cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	4a43      	ldr	r2, [pc, #268]	@ (80028c8 <UART_AdvFeatureConfig+0x148>)
 80027bc:	4013      	ands	r3, r2
 80027be:	0019      	movs	r1, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d0:	2204      	movs	r2, #4
 80027d2:	4013      	ands	r3, r2
 80027d4:	d00b      	beq.n	80027ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	4a3b      	ldr	r2, [pc, #236]	@ (80028cc <UART_AdvFeatureConfig+0x14c>)
 80027de:	4013      	ands	r3, r2
 80027e0:	0019      	movs	r1, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f2:	2208      	movs	r2, #8
 80027f4:	4013      	ands	r3, r2
 80027f6:	d00b      	beq.n	8002810 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	4a34      	ldr	r2, [pc, #208]	@ (80028d0 <UART_AdvFeatureConfig+0x150>)
 8002800:	4013      	ands	r3, r2
 8002802:	0019      	movs	r1, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002814:	2210      	movs	r2, #16
 8002816:	4013      	ands	r3, r2
 8002818:	d00b      	beq.n	8002832 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	4a2c      	ldr	r2, [pc, #176]	@ (80028d4 <UART_AdvFeatureConfig+0x154>)
 8002822:	4013      	ands	r3, r2
 8002824:	0019      	movs	r1, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002836:	2220      	movs	r2, #32
 8002838:	4013      	ands	r3, r2
 800283a:	d00b      	beq.n	8002854 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	4a25      	ldr	r2, [pc, #148]	@ (80028d8 <UART_AdvFeatureConfig+0x158>)
 8002844:	4013      	ands	r3, r2
 8002846:	0019      	movs	r1, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002858:	2240      	movs	r2, #64	@ 0x40
 800285a:	4013      	ands	r3, r2
 800285c:	d01d      	beq.n	800289a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	4a1d      	ldr	r2, [pc, #116]	@ (80028dc <UART_AdvFeatureConfig+0x15c>)
 8002866:	4013      	ands	r3, r2
 8002868:	0019      	movs	r1, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800287a:	2380      	movs	r3, #128	@ 0x80
 800287c:	035b      	lsls	r3, r3, #13
 800287e:	429a      	cmp	r2, r3
 8002880:	d10b      	bne.n	800289a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	4a15      	ldr	r2, [pc, #84]	@ (80028e0 <UART_AdvFeatureConfig+0x160>)
 800288a:	4013      	ands	r3, r2
 800288c:	0019      	movs	r1, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289e:	2280      	movs	r2, #128	@ 0x80
 80028a0:	4013      	ands	r3, r2
 80028a2:	d00b      	beq.n	80028bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	4a0e      	ldr	r2, [pc, #56]	@ (80028e4 <UART_AdvFeatureConfig+0x164>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	0019      	movs	r1, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	605a      	str	r2, [r3, #4]
  }
}
 80028bc:	46c0      	nop			@ (mov r8, r8)
 80028be:	46bd      	mov	sp, r7
 80028c0:	b002      	add	sp, #8
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	fffdffff 	.word	0xfffdffff
 80028c8:	fffeffff 	.word	0xfffeffff
 80028cc:	fffbffff 	.word	0xfffbffff
 80028d0:	ffff7fff 	.word	0xffff7fff
 80028d4:	ffffefff 	.word	0xffffefff
 80028d8:	ffffdfff 	.word	0xffffdfff
 80028dc:	ffefffff 	.word	0xffefffff
 80028e0:	ff9fffff 	.word	0xff9fffff
 80028e4:	fff7ffff 	.word	0xfff7ffff

080028e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b092      	sub	sp, #72	@ 0x48
 80028ec:	af02      	add	r7, sp, #8
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2284      	movs	r2, #132	@ 0x84
 80028f4:	2100      	movs	r1, #0
 80028f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80028f8:	f7fe f886 	bl	8000a08 <HAL_GetTick>
 80028fc:	0003      	movs	r3, r0
 80028fe:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2208      	movs	r2, #8
 8002908:	4013      	ands	r3, r2
 800290a:	2b08      	cmp	r3, #8
 800290c:	d12c      	bne.n	8002968 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800290e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002910:	2280      	movs	r2, #128	@ 0x80
 8002912:	0391      	lsls	r1, r2, #14
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	4a46      	ldr	r2, [pc, #280]	@ (8002a30 <UART_CheckIdleState+0x148>)
 8002918:	9200      	str	r2, [sp, #0]
 800291a:	2200      	movs	r2, #0
 800291c:	f000 f88c 	bl	8002a38 <UART_WaitOnFlagUntilTimeout>
 8002920:	1e03      	subs	r3, r0, #0
 8002922:	d021      	beq.n	8002968 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002924:	f3ef 8310 	mrs	r3, PRIMASK
 8002928:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800292a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800292c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800292e:	2301      	movs	r3, #1
 8002930:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002934:	f383 8810 	msr	PRIMASK, r3
}
 8002938:	46c0      	nop			@ (mov r8, r8)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2180      	movs	r1, #128	@ 0x80
 8002946:	438a      	bics	r2, r1
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800294c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800294e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002950:	f383 8810 	msr	PRIMASK, r3
}
 8002954:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2220      	movs	r2, #32
 800295a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2278      	movs	r2, #120	@ 0x78
 8002960:	2100      	movs	r1, #0
 8002962:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e05f      	b.n	8002a28 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2204      	movs	r2, #4
 8002970:	4013      	ands	r3, r2
 8002972:	2b04      	cmp	r3, #4
 8002974:	d146      	bne.n	8002a04 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002978:	2280      	movs	r2, #128	@ 0x80
 800297a:	03d1      	lsls	r1, r2, #15
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	4a2c      	ldr	r2, [pc, #176]	@ (8002a30 <UART_CheckIdleState+0x148>)
 8002980:	9200      	str	r2, [sp, #0]
 8002982:	2200      	movs	r2, #0
 8002984:	f000 f858 	bl	8002a38 <UART_WaitOnFlagUntilTimeout>
 8002988:	1e03      	subs	r3, r0, #0
 800298a:	d03b      	beq.n	8002a04 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800298c:	f3ef 8310 	mrs	r3, PRIMASK
 8002990:	60fb      	str	r3, [r7, #12]
  return(result);
 8002992:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002994:	637b      	str	r3, [r7, #52]	@ 0x34
 8002996:	2301      	movs	r3, #1
 8002998:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	f383 8810 	msr	PRIMASK, r3
}
 80029a0:	46c0      	nop			@ (mov r8, r8)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4921      	ldr	r1, [pc, #132]	@ (8002a34 <UART_CheckIdleState+0x14c>)
 80029ae:	400a      	ands	r2, r1
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f383 8810 	msr	PRIMASK, r3
}
 80029bc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029be:	f3ef 8310 	mrs	r3, PRIMASK
 80029c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80029c4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80029c8:	2301      	movs	r3, #1
 80029ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f383 8810 	msr	PRIMASK, r3
}
 80029d2:	46c0      	nop			@ (mov r8, r8)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2101      	movs	r1, #1
 80029e0:	438a      	bics	r2, r1
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029e8:	6a3b      	ldr	r3, [r7, #32]
 80029ea:	f383 8810 	msr	PRIMASK, r3
}
 80029ee:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2280      	movs	r2, #128	@ 0x80
 80029f4:	2120      	movs	r1, #32
 80029f6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2278      	movs	r2, #120	@ 0x78
 80029fc:	2100      	movs	r1, #0
 80029fe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e011      	b.n	8002a28 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2220      	movs	r2, #32
 8002a08:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2280      	movs	r2, #128	@ 0x80
 8002a0e:	2120      	movs	r1, #32
 8002a10:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2278      	movs	r2, #120	@ 0x78
 8002a22:	2100      	movs	r1, #0
 8002a24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	0018      	movs	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	b010      	add	sp, #64	@ 0x40
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	01ffffff 	.word	0x01ffffff
 8002a34:	fffffedf 	.word	0xfffffedf

08002a38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	603b      	str	r3, [r7, #0]
 8002a44:	1dfb      	adds	r3, r7, #7
 8002a46:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a48:	e04b      	b.n	8002ae2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	d048      	beq.n	8002ae2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a50:	f7fd ffda 	bl	8000a08 <HAL_GetTick>
 8002a54:	0002      	movs	r2, r0
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d302      	bcc.n	8002a66 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e04b      	b.n	8002b02 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2204      	movs	r2, #4
 8002a72:	4013      	ands	r3, r2
 8002a74:	d035      	beq.n	8002ae2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	2208      	movs	r2, #8
 8002a7e:	4013      	ands	r3, r2
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d111      	bne.n	8002aa8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2208      	movs	r2, #8
 8002a8a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f000 f83c 	bl	8002b0c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2284      	movs	r2, #132	@ 0x84
 8002a98:	2108      	movs	r1, #8
 8002a9a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2278      	movs	r2, #120	@ 0x78
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e02c      	b.n	8002b02 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	69da      	ldr	r2, [r3, #28]
 8002aae:	2380      	movs	r3, #128	@ 0x80
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	401a      	ands	r2, r3
 8002ab4:	2380      	movs	r3, #128	@ 0x80
 8002ab6:	011b      	lsls	r3, r3, #4
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d112      	bne.n	8002ae2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2280      	movs	r2, #128	@ 0x80
 8002ac2:	0112      	lsls	r2, r2, #4
 8002ac4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	0018      	movs	r0, r3
 8002aca:	f000 f81f 	bl	8002b0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2284      	movs	r2, #132	@ 0x84
 8002ad2:	2120      	movs	r1, #32
 8002ad4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2278      	movs	r2, #120	@ 0x78
 8002ada:	2100      	movs	r1, #0
 8002adc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e00f      	b.n	8002b02 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	4013      	ands	r3, r2
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	425a      	negs	r2, r3
 8002af2:	4153      	adcs	r3, r2
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	001a      	movs	r2, r3
 8002af8:	1dfb      	adds	r3, r7, #7
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d0a4      	beq.n	8002a4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	0018      	movs	r0, r3
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b004      	add	sp, #16
 8002b08:	bd80      	pop	{r7, pc}
	...

08002b0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b08e      	sub	sp, #56	@ 0x38
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b14:	f3ef 8310 	mrs	r3, PRIMASK
 8002b18:	617b      	str	r3, [r7, #20]
  return(result);
 8002b1a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b1e:	2301      	movs	r3, #1
 8002b20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	f383 8810 	msr	PRIMASK, r3
}
 8002b28:	46c0      	nop			@ (mov r8, r8)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4926      	ldr	r1, [pc, #152]	@ (8002bd0 <UART_EndRxTransfer+0xc4>)
 8002b36:	400a      	ands	r2, r1
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f383 8810 	msr	PRIMASK, r3
}
 8002b44:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b46:	f3ef 8310 	mrs	r3, PRIMASK
 8002b4a:	623b      	str	r3, [r7, #32]
  return(result);
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b50:	2301      	movs	r3, #1
 8002b52:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b56:	f383 8810 	msr	PRIMASK, r3
}
 8002b5a:	46c0      	nop			@ (mov r8, r8)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689a      	ldr	r2, [r3, #8]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2101      	movs	r1, #1
 8002b68:	438a      	bics	r2, r1
 8002b6a:	609a      	str	r2, [r3, #8]
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b72:	f383 8810 	msr	PRIMASK, r3
}
 8002b76:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d118      	bne.n	8002bb2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b80:	f3ef 8310 	mrs	r3, PRIMASK
 8002b84:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b86:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f383 8810 	msr	PRIMASK, r3
}
 8002b94:	46c0      	nop			@ (mov r8, r8)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2110      	movs	r1, #16
 8002ba2:	438a      	bics	r2, r1
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ba8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	f383 8810 	msr	PRIMASK, r3
}
 8002bb0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2280      	movs	r2, #128	@ 0x80
 8002bb6:	2120      	movs	r1, #32
 8002bb8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002bc6:	46c0      	nop			@ (mov r8, r8)
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	b00e      	add	sp, #56	@ 0x38
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	46c0      	nop			@ (mov r8, r8)
 8002bd0:	fffffedf 	.word	0xfffffedf

08002bd4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3308      	adds	r3, #8
 8002be0:	001a      	movs	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	4252      	negs	r2, r2
 8002bec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3308      	adds	r3, #8
 8002bf2:	001a      	movs	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3308      	adds	r3, #8
 8002bfc:	001a      	movs	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c08:	46c0      	nop			@ (mov r8, r8)
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	b002      	add	sp, #8
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c1e:	46c0      	nop			@ (mov r8, r8)
 8002c20:	46bd      	mov	sp, r7
 8002c22:	b002      	add	sp, #8
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b084      	sub	sp, #16
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	601a      	str	r2, [r3, #0]
}
 8002c62:	46c0      	nop			@ (mov r8, r8)
 8002c64:	46bd      	mov	sp, r7
 8002c66:	b004      	add	sp, #16
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b084      	sub	sp, #16
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6892      	ldr	r2, [r2, #8]
 8002c80:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6852      	ldr	r2, [r2, #4]
 8002c8a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d103      	bne.n	8002c9e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	1e5a      	subs	r2, r3, #1
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
}
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	b004      	add	sp, #16
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002cba:	b590      	push	{r4, r7, lr}
 8002cbc:	b08d      	sub	sp, #52	@ 0x34
 8002cbe:	af04      	add	r7, sp, #16
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	603b      	str	r3, [r7, #0]
 8002cc6:	1dbb      	adds	r3, r7, #6
 8002cc8:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002cca:	1dbb      	adds	r3, r7, #6
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	f000 fbfb 	bl	80034cc <pvPortMalloc>
 8002cd6:	0003      	movs	r3, r0
 8002cd8:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d010      	beq.n	8002d02 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002ce0:	205c      	movs	r0, #92	@ 0x5c
 8002ce2:	f000 fbf3 	bl	80034cc <pvPortMalloc>
 8002ce6:	0003      	movs	r3, r0
 8002ce8:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cf6:	e006      	b.n	8002d06 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f000 fc8e 	bl	800361c <vPortFree>
 8002d00:	e001      	b.n	8002d06 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d01a      	beq.n	8002d42 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	2259      	movs	r2, #89	@ 0x59
 8002d10:	2100      	movs	r1, #0
 8002d12:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d14:	1dbb      	adds	r3, r7, #6
 8002d16:	881a      	ldrh	r2, [r3, #0]
 8002d18:	683c      	ldr	r4, [r7, #0]
 8002d1a:	68b9      	ldr	r1, [r7, #8]
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	2300      	movs	r3, #0
 8002d20:	9303      	str	r3, [sp, #12]
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	9302      	str	r3, [sp, #8]
 8002d26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d28:	9301      	str	r3, [sp, #4]
 8002d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	0023      	movs	r3, r4
 8002d30:	f000 f810 	bl	8002d54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	0018      	movs	r0, r3
 8002d38:	f000 f896 	bl	8002e68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	61bb      	str	r3, [r7, #24]
 8002d40:	e002      	b.n	8002d48 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d42:	2301      	movs	r3, #1
 8002d44:	425b      	negs	r3, r3
 8002d46:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002d48:	69bb      	ldr	r3, [r7, #24]
	}
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	b009      	add	sp, #36	@ 0x24
 8002d50:	bd90      	pop	{r4, r7, pc}
	...

08002d54 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
 8002d60:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d64:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	001a      	movs	r2, r3
 8002d6c:	21a5      	movs	r1, #165	@ 0xa5
 8002d6e:	f000 fd57 	bl	8003820 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	493a      	ldr	r1, [pc, #232]	@ (8002e64 <prvInitialiseNewTask+0x110>)
 8002d7a:	468c      	mov	ip, r1
 8002d7c:	4463      	add	r3, ip
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	18d3      	adds	r3, r2, r3
 8002d82:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	2207      	movs	r2, #7
 8002d88:	4393      	bics	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	2207      	movs	r2, #7
 8002d90:	4013      	ands	r3, r2
 8002d92:	d002      	beq.n	8002d9a <prvInitialiseNewTask+0x46>
 8002d94:	b672      	cpsid	i
 8002d96:	46c0      	nop			@ (mov r8, r8)
 8002d98:	e7fd      	b.n	8002d96 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d020      	beq.n	8002de2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]
 8002da4:	e013      	b.n	8002dce <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	18d3      	adds	r3, r2, r3
 8002dac:	7818      	ldrb	r0, [r3, #0]
 8002dae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002db0:	2134      	movs	r1, #52	@ 0x34
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	18d3      	adds	r3, r2, r3
 8002db6:	185b      	adds	r3, r3, r1
 8002db8:	1c02      	adds	r2, r0, #0
 8002dba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002dbc:	68ba      	ldr	r2, [r7, #8]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	18d3      	adds	r3, r2, r3
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d006      	beq.n	8002dd6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	2b0f      	cmp	r3, #15
 8002dd2:	d9e8      	bls.n	8002da6 <prvInitialiseNewTask+0x52>
 8002dd4:	e000      	b.n	8002dd8 <prvInitialiseNewTask+0x84>
			{
				break;
 8002dd6:	46c0      	nop			@ (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dda:	2243      	movs	r2, #67	@ 0x43
 8002ddc:	2100      	movs	r1, #0
 8002dde:	5499      	strb	r1, [r3, r2]
 8002de0:	e003      	b.n	8002dea <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de4:	2234      	movs	r2, #52	@ 0x34
 8002de6:	2100      	movs	r1, #0
 8002de8:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	2b37      	cmp	r3, #55	@ 0x37
 8002dee:	d901      	bls.n	8002df4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002df0:	2337      	movs	r3, #55	@ 0x37
 8002df2:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df6:	6a3a      	ldr	r2, [r7, #32]
 8002df8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dfc:	6a3a      	ldr	r2, [r7, #32]
 8002dfe:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e02:	2200      	movs	r2, #0
 8002e04:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e08:	3304      	adds	r3, #4
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f7ff ff00 	bl	8002c10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e12:	3318      	adds	r3, #24
 8002e14:	0018      	movs	r0, r3
 8002e16:	f7ff fefb 	bl	8002c10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	2238      	movs	r2, #56	@ 0x38
 8002e24:	1ad2      	subs	r2, r2, r3
 8002e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e2e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e32:	2200      	movs	r2, #0
 8002e34:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e38:	2258      	movs	r2, #88	@ 0x58
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	68f9      	ldr	r1, [r7, #12]
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	0018      	movs	r0, r3
 8002e46:	f000 fa73 	bl	8003330 <pxPortInitialiseStack>
 8002e4a:	0002      	movs	r2, r0
 8002e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e4e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d002      	beq.n	8002e5c <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e5a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e5c:	46c0      	nop			@ (mov r8, r8)
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b006      	add	sp, #24
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	3fffffff 	.word	0x3fffffff

08002e68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e70:	f000 fab6 	bl	80033e0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e74:	4b2a      	ldr	r3, [pc, #168]	@ (8002f20 <prvAddNewTaskToReadyList+0xb8>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	1c5a      	adds	r2, r3, #1
 8002e7a:	4b29      	ldr	r3, [pc, #164]	@ (8002f20 <prvAddNewTaskToReadyList+0xb8>)
 8002e7c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002e7e:	4b29      	ldr	r3, [pc, #164]	@ (8002f24 <prvAddNewTaskToReadyList+0xbc>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d109      	bne.n	8002e9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e86:	4b27      	ldr	r3, [pc, #156]	@ (8002f24 <prvAddNewTaskToReadyList+0xbc>)
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e8c:	4b24      	ldr	r3, [pc, #144]	@ (8002f20 <prvAddNewTaskToReadyList+0xb8>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d110      	bne.n	8002eb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e94:	f000 f9ea 	bl	800326c <prvInitialiseTaskLists>
 8002e98:	e00d      	b.n	8002eb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002e9a:	4b23      	ldr	r3, [pc, #140]	@ (8002f28 <prvAddNewTaskToReadyList+0xc0>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d109      	bne.n	8002eb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ea2:	4b20      	ldr	r3, [pc, #128]	@ (8002f24 <prvAddNewTaskToReadyList+0xbc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d802      	bhi.n	8002eb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002eb0:	4b1c      	ldr	r3, [pc, #112]	@ (8002f24 <prvAddNewTaskToReadyList+0xbc>)
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f2c <prvAddNewTaskToReadyList+0xc4>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	1c5a      	adds	r2, r3, #1
 8002ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8002f2c <prvAddNewTaskToReadyList+0xc4>)
 8002ebe:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8002f2c <prvAddNewTaskToReadyList+0xc4>)
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ecc:	4b18      	ldr	r3, [pc, #96]	@ (8002f30 <prvAddNewTaskToReadyList+0xc8>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d903      	bls.n	8002edc <prvAddNewTaskToReadyList+0x74>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ed8:	4b15      	ldr	r3, [pc, #84]	@ (8002f30 <prvAddNewTaskToReadyList+0xc8>)
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ee0:	0013      	movs	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	189b      	adds	r3, r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4a12      	ldr	r2, [pc, #72]	@ (8002f34 <prvAddNewTaskToReadyList+0xcc>)
 8002eea:	189a      	adds	r2, r3, r2
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	3304      	adds	r3, #4
 8002ef0:	0019      	movs	r1, r3
 8002ef2:	0010      	movs	r0, r2
 8002ef4:	f7ff fe97 	bl	8002c26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002ef8:	f000 fa84 	bl	8003404 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002efc:	4b0a      	ldr	r3, [pc, #40]	@ (8002f28 <prvAddNewTaskToReadyList+0xc0>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d008      	beq.n	8002f16 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f04:	4b07      	ldr	r3, [pc, #28]	@ (8002f24 <prvAddNewTaskToReadyList+0xbc>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d201      	bcs.n	8002f16 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002f12:	f000 fa55 	bl	80033c0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f16:	46c0      	nop			@ (mov r8, r8)
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	b002      	add	sp, #8
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	200005c8 	.word	0x200005c8
 8002f24:	200000f8 	.word	0x200000f8
 8002f28:	200005d4 	.word	0x200005d4
 8002f2c:	200005e4 	.word	0x200005e4
 8002f30:	200005d0 	.word	0x200005d0
 8002f34:	200000fc 	.word	0x200000fc

08002f38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002f3c:	4b03      	ldr	r3, [pc, #12]	@ (8002f4c <vTaskSuspendAll+0x14>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	4b02      	ldr	r3, [pc, #8]	@ (8002f4c <vTaskSuspendAll+0x14>)
 8002f44:	601a      	str	r2, [r3, #0]
	portMEMORY_BARRIER();
}
 8002f46:	46c0      	nop			@ (mov r8, r8)
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	200005ec 	.word	0x200005ec

08002f50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002f5e:	4b3a      	ldr	r3, [pc, #232]	@ (8003048 <xTaskResumeAll+0xf8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d102      	bne.n	8002f6c <xTaskResumeAll+0x1c>
 8002f66:	b672      	cpsid	i
 8002f68:	46c0      	nop			@ (mov r8, r8)
 8002f6a:	e7fd      	b.n	8002f68 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002f6c:	f000 fa38 	bl	80033e0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002f70:	4b35      	ldr	r3, [pc, #212]	@ (8003048 <xTaskResumeAll+0xf8>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	1e5a      	subs	r2, r3, #1
 8002f76:	4b34      	ldr	r3, [pc, #208]	@ (8003048 <xTaskResumeAll+0xf8>)
 8002f78:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f7a:	4b33      	ldr	r3, [pc, #204]	@ (8003048 <xTaskResumeAll+0xf8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d15b      	bne.n	800303a <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f82:	4b32      	ldr	r3, [pc, #200]	@ (800304c <xTaskResumeAll+0xfc>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d057      	beq.n	800303a <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f8a:	e02f      	b.n	8002fec <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f8c:	4b30      	ldr	r3, [pc, #192]	@ (8003050 <xTaskResumeAll+0x100>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	3318      	adds	r3, #24
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f7ff fe66 	bl	8002c6a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f7ff fe61 	bl	8002c6a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fac:	4b29      	ldr	r3, [pc, #164]	@ (8003054 <xTaskResumeAll+0x104>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d903      	bls.n	8002fbc <xTaskResumeAll+0x6c>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fb8:	4b26      	ldr	r3, [pc, #152]	@ (8003054 <xTaskResumeAll+0x104>)
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fc0:	0013      	movs	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	189b      	adds	r3, r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4a23      	ldr	r2, [pc, #140]	@ (8003058 <xTaskResumeAll+0x108>)
 8002fca:	189a      	adds	r2, r3, r2
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	3304      	adds	r3, #4
 8002fd0:	0019      	movs	r1, r3
 8002fd2:	0010      	movs	r0, r2
 8002fd4:	f7ff fe27 	bl	8002c26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800305c <xTaskResumeAll+0x10c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d302      	bcc.n	8002fec <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 8002fe6:	4b1e      	ldr	r3, [pc, #120]	@ (8003060 <xTaskResumeAll+0x110>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fec:	4b18      	ldr	r3, [pc, #96]	@ (8003050 <xTaskResumeAll+0x100>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1cb      	bne.n	8002f8c <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002ffa:	f000 f97b 	bl	80032f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002ffe:	4b19      	ldr	r3, [pc, #100]	@ (8003064 <xTaskResumeAll+0x114>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00f      	beq.n	800302a <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800300a:	f000 f82d 	bl	8003068 <xTaskIncrementTick>
 800300e:	1e03      	subs	r3, r0, #0
 8003010:	d002      	beq.n	8003018 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 8003012:	4b13      	ldr	r3, [pc, #76]	@ (8003060 <xTaskResumeAll+0x110>)
 8003014:	2201      	movs	r2, #1
 8003016:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3b01      	subs	r3, #1
 800301c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1f2      	bne.n	800300a <xTaskResumeAll+0xba>

						uxPendedTicks = 0;
 8003024:	4b0f      	ldr	r3, [pc, #60]	@ (8003064 <xTaskResumeAll+0x114>)
 8003026:	2200      	movs	r2, #0
 8003028:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800302a:	4b0d      	ldr	r3, [pc, #52]	@ (8003060 <xTaskResumeAll+0x110>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003032:	2301      	movs	r3, #1
 8003034:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003036:	f000 f9c3 	bl	80033c0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800303a:	f000 f9e3 	bl	8003404 <vPortExitCritical>

	return xAlreadyYielded;
 800303e:	68bb      	ldr	r3, [r7, #8]
}
 8003040:	0018      	movs	r0, r3
 8003042:	46bd      	mov	sp, r7
 8003044:	b004      	add	sp, #16
 8003046:	bd80      	pop	{r7, pc}
 8003048:	200005ec 	.word	0x200005ec
 800304c:	200005c8 	.word	0x200005c8
 8003050:	2000058c 	.word	0x2000058c
 8003054:	200005d0 	.word	0x200005d0
 8003058:	200000fc 	.word	0x200000fc
 800305c:	200000f8 	.word	0x200000f8
 8003060:	200005dc 	.word	0x200005dc
 8003064:	200005d8 	.word	0x200005d8

08003068 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800306e:	2300      	movs	r3, #0
 8003070:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003072:	4b4a      	ldr	r3, [pc, #296]	@ (800319c <xTaskIncrementTick+0x134>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d000      	beq.n	800307c <xTaskIncrementTick+0x14>
 800307a:	e07f      	b.n	800317c <xTaskIncrementTick+0x114>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800307c:	4b48      	ldr	r3, [pc, #288]	@ (80031a0 <xTaskIncrementTick+0x138>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	3301      	adds	r3, #1
 8003082:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003084:	4b46      	ldr	r3, [pc, #280]	@ (80031a0 <xTaskIncrementTick+0x138>)
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d118      	bne.n	80030c2 <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003090:	4b44      	ldr	r3, [pc, #272]	@ (80031a4 <xTaskIncrementTick+0x13c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d002      	beq.n	80030a0 <xTaskIncrementTick+0x38>
 800309a:	b672      	cpsid	i
 800309c:	46c0      	nop			@ (mov r8, r8)
 800309e:	e7fd      	b.n	800309c <xTaskIncrementTick+0x34>
 80030a0:	4b40      	ldr	r3, [pc, #256]	@ (80031a4 <xTaskIncrementTick+0x13c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	4b40      	ldr	r3, [pc, #256]	@ (80031a8 <xTaskIncrementTick+0x140>)
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	4b3e      	ldr	r3, [pc, #248]	@ (80031a4 <xTaskIncrementTick+0x13c>)
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	4b3e      	ldr	r3, [pc, #248]	@ (80031a8 <xTaskIncrementTick+0x140>)
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	4b3d      	ldr	r3, [pc, #244]	@ (80031ac <xTaskIncrementTick+0x144>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	4b3c      	ldr	r3, [pc, #240]	@ (80031ac <xTaskIncrementTick+0x144>)
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	f000 f919 	bl	80032f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80030c2:	4b3b      	ldr	r3, [pc, #236]	@ (80031b0 <xTaskIncrementTick+0x148>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d349      	bcc.n	8003160 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030cc:	4b35      	ldr	r3, [pc, #212]	@ (80031a4 <xTaskIncrementTick+0x13c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d104      	bne.n	80030e0 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030d6:	4b36      	ldr	r3, [pc, #216]	@ (80031b0 <xTaskIncrementTick+0x148>)
 80030d8:	2201      	movs	r2, #1
 80030da:	4252      	negs	r2, r2
 80030dc:	601a      	str	r2, [r3, #0]
					break;
 80030de:	e03f      	b.n	8003160 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030e0:	4b30      	ldr	r3, [pc, #192]	@ (80031a4 <xTaskIncrementTick+0x13c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d203      	bcs.n	8003100 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80030f8:	4b2d      	ldr	r3, [pc, #180]	@ (80031b0 <xTaskIncrementTick+0x148>)
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80030fe:	e02f      	b.n	8003160 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	3304      	adds	r3, #4
 8003104:	0018      	movs	r0, r3
 8003106:	f7ff fdb0 	bl	8002c6a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800310e:	2b00      	cmp	r3, #0
 8003110:	d004      	beq.n	800311c <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	3318      	adds	r3, #24
 8003116:	0018      	movs	r0, r3
 8003118:	f7ff fda7 	bl	8002c6a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003120:	4b24      	ldr	r3, [pc, #144]	@ (80031b4 <xTaskIncrementTick+0x14c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d903      	bls.n	8003130 <xTaskIncrementTick+0xc8>
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800312c:	4b21      	ldr	r3, [pc, #132]	@ (80031b4 <xTaskIncrementTick+0x14c>)
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003134:	0013      	movs	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	189b      	adds	r3, r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4a1e      	ldr	r2, [pc, #120]	@ (80031b8 <xTaskIncrementTick+0x150>)
 800313e:	189a      	adds	r2, r3, r2
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	3304      	adds	r3, #4
 8003144:	0019      	movs	r1, r3
 8003146:	0010      	movs	r0, r2
 8003148:	f7ff fd6d 	bl	8002c26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003150:	4b1a      	ldr	r3, [pc, #104]	@ (80031bc <xTaskIncrementTick+0x154>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003156:	429a      	cmp	r2, r3
 8003158:	d3b8      	bcc.n	80030cc <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 800315a:	2301      	movs	r3, #1
 800315c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800315e:	e7b5      	b.n	80030cc <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003160:	4b16      	ldr	r3, [pc, #88]	@ (80031bc <xTaskIncrementTick+0x154>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003166:	4914      	ldr	r1, [pc, #80]	@ (80031b8 <xTaskIncrementTick+0x150>)
 8003168:	0013      	movs	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	189b      	adds	r3, r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	585b      	ldr	r3, [r3, r1]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d907      	bls.n	8003186 <xTaskIncrementTick+0x11e>
			{
				xSwitchRequired = pdTRUE;
 8003176:	2301      	movs	r3, #1
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	e004      	b.n	8003186 <xTaskIncrementTick+0x11e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800317c:	4b10      	ldr	r3, [pc, #64]	@ (80031c0 <xTaskIncrementTick+0x158>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	4b0f      	ldr	r3, [pc, #60]	@ (80031c0 <xTaskIncrementTick+0x158>)
 8003184:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003186:	4b0f      	ldr	r3, [pc, #60]	@ (80031c4 <xTaskIncrementTick+0x15c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <xTaskIncrementTick+0x12a>
		{
			xSwitchRequired = pdTRUE;
 800318e:	2301      	movs	r3, #1
 8003190:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003192:	697b      	ldr	r3, [r7, #20]
}
 8003194:	0018      	movs	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	b006      	add	sp, #24
 800319a:	bd80      	pop	{r7, pc}
 800319c:	200005ec 	.word	0x200005ec
 80031a0:	200005cc 	.word	0x200005cc
 80031a4:	20000584 	.word	0x20000584
 80031a8:	20000588 	.word	0x20000588
 80031ac:	200005e0 	.word	0x200005e0
 80031b0:	200005e8 	.word	0x200005e8
 80031b4:	200005d0 	.word	0x200005d0
 80031b8:	200000fc 	.word	0x200000fc
 80031bc:	200000f8 	.word	0x200000f8
 80031c0:	200005d8 	.word	0x200005d8
 80031c4:	200005dc 	.word	0x200005dc

080031c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80031ce:	4b22      	ldr	r3, [pc, #136]	@ (8003258 <vTaskSwitchContext+0x90>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80031d6:	4b21      	ldr	r3, [pc, #132]	@ (800325c <vTaskSwitchContext+0x94>)
 80031d8:	2201      	movs	r2, #1
 80031da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80031dc:	e038      	b.n	8003250 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 80031de:	4b1f      	ldr	r3, [pc, #124]	@ (800325c <vTaskSwitchContext+0x94>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031e4:	4b1e      	ldr	r3, [pc, #120]	@ (8003260 <vTaskSwitchContext+0x98>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	607b      	str	r3, [r7, #4]
 80031ea:	e008      	b.n	80031fe <vTaskSwitchContext+0x36>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d102      	bne.n	80031f8 <vTaskSwitchContext+0x30>
 80031f2:	b672      	cpsid	i
 80031f4:	46c0      	nop			@ (mov r8, r8)
 80031f6:	e7fd      	b.n	80031f4 <vTaskSwitchContext+0x2c>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3b01      	subs	r3, #1
 80031fc:	607b      	str	r3, [r7, #4]
 80031fe:	4919      	ldr	r1, [pc, #100]	@ (8003264 <vTaskSwitchContext+0x9c>)
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	0013      	movs	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	189b      	adds	r3, r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	585b      	ldr	r3, [r3, r1]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0ed      	beq.n	80031ec <vTaskSwitchContext+0x24>
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	0013      	movs	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	189b      	adds	r3, r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4a12      	ldr	r2, [pc, #72]	@ (8003264 <vTaskSwitchContext+0x9c>)
 800321c:	189b      	adds	r3, r3, r2
 800321e:	603b      	str	r3, [r7, #0]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	605a      	str	r2, [r3, #4]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	3308      	adds	r3, #8
 8003232:	429a      	cmp	r2, r3
 8003234:	d104      	bne.n	8003240 <vTaskSwitchContext+0x78>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	605a      	str	r2, [r3, #4]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	4b08      	ldr	r3, [pc, #32]	@ (8003268 <vTaskSwitchContext+0xa0>)
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	4b05      	ldr	r3, [pc, #20]	@ (8003260 <vTaskSwitchContext+0x98>)
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	601a      	str	r2, [r3, #0]
}
 8003250:	46c0      	nop			@ (mov r8, r8)
 8003252:	46bd      	mov	sp, r7
 8003254:	b002      	add	sp, #8
 8003256:	bd80      	pop	{r7, pc}
 8003258:	200005ec 	.word	0x200005ec
 800325c:	200005dc 	.word	0x200005dc
 8003260:	200005d0 	.word	0x200005d0
 8003264:	200000fc 	.word	0x200000fc
 8003268:	200000f8 	.word	0x200000f8

0800326c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003272:	2300      	movs	r3, #0
 8003274:	607b      	str	r3, [r7, #4]
 8003276:	e00c      	b.n	8003292 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	0013      	movs	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	189b      	adds	r3, r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4a14      	ldr	r2, [pc, #80]	@ (80032d4 <prvInitialiseTaskLists+0x68>)
 8003284:	189b      	adds	r3, r3, r2
 8003286:	0018      	movs	r0, r3
 8003288:	f7ff fca4 	bl	8002bd4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3301      	adds	r3, #1
 8003290:	607b      	str	r3, [r7, #4]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b37      	cmp	r3, #55	@ 0x37
 8003296:	d9ef      	bls.n	8003278 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003298:	4b0f      	ldr	r3, [pc, #60]	@ (80032d8 <prvInitialiseTaskLists+0x6c>)
 800329a:	0018      	movs	r0, r3
 800329c:	f7ff fc9a 	bl	8002bd4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80032a0:	4b0e      	ldr	r3, [pc, #56]	@ (80032dc <prvInitialiseTaskLists+0x70>)
 80032a2:	0018      	movs	r0, r3
 80032a4:	f7ff fc96 	bl	8002bd4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80032a8:	4b0d      	ldr	r3, [pc, #52]	@ (80032e0 <prvInitialiseTaskLists+0x74>)
 80032aa:	0018      	movs	r0, r3
 80032ac:	f7ff fc92 	bl	8002bd4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80032b0:	4b0c      	ldr	r3, [pc, #48]	@ (80032e4 <prvInitialiseTaskLists+0x78>)
 80032b2:	0018      	movs	r0, r3
 80032b4:	f7ff fc8e 	bl	8002bd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80032b8:	4b0b      	ldr	r3, [pc, #44]	@ (80032e8 <prvInitialiseTaskLists+0x7c>)
 80032ba:	0018      	movs	r0, r3
 80032bc:	f7ff fc8a 	bl	8002bd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80032c0:	4b0a      	ldr	r3, [pc, #40]	@ (80032ec <prvInitialiseTaskLists+0x80>)
 80032c2:	4a05      	ldr	r2, [pc, #20]	@ (80032d8 <prvInitialiseTaskLists+0x6c>)
 80032c4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80032c6:	4b0a      	ldr	r3, [pc, #40]	@ (80032f0 <prvInitialiseTaskLists+0x84>)
 80032c8:	4a04      	ldr	r2, [pc, #16]	@ (80032dc <prvInitialiseTaskLists+0x70>)
 80032ca:	601a      	str	r2, [r3, #0]
}
 80032cc:	46c0      	nop			@ (mov r8, r8)
 80032ce:	46bd      	mov	sp, r7
 80032d0:	b002      	add	sp, #8
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	200000fc 	.word	0x200000fc
 80032d8:	2000055c 	.word	0x2000055c
 80032dc:	20000570 	.word	0x20000570
 80032e0:	2000058c 	.word	0x2000058c
 80032e4:	200005a0 	.word	0x200005a0
 80032e8:	200005b4 	.word	0x200005b4
 80032ec:	20000584 	.word	0x20000584
 80032f0:	20000588 	.word	0x20000588

080032f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003328 <prvResetNextTaskUnblockTime+0x34>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d104      	bne.n	800330e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003304:	4b09      	ldr	r3, [pc, #36]	@ (800332c <prvResetNextTaskUnblockTime+0x38>)
 8003306:	2201      	movs	r2, #1
 8003308:	4252      	negs	r2, r2
 800330a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800330c:	e008      	b.n	8003320 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800330e:	4b06      	ldr	r3, [pc, #24]	@ (8003328 <prvResetNextTaskUnblockTime+0x34>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	4b03      	ldr	r3, [pc, #12]	@ (800332c <prvResetNextTaskUnblockTime+0x38>)
 800331e:	601a      	str	r2, [r3, #0]
}
 8003320:	46c0      	nop			@ (mov r8, r8)
 8003322:	46bd      	mov	sp, r7
 8003324:	b002      	add	sp, #8
 8003326:	bd80      	pop	{r7, pc}
 8003328:	20000584 	.word	0x20000584
 800332c:	200005e8 	.word	0x200005e8

08003330 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	3b04      	subs	r3, #4
 8003340:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2280      	movs	r2, #128	@ 0x80
 8003346:	0452      	lsls	r2, r2, #17
 8003348:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	3b04      	subs	r3, #4
 800334e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	3b04      	subs	r3, #4
 800335a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800335c:	4a08      	ldr	r2, [pc, #32]	@ (8003380 <pxPortInitialiseStack+0x50>)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	3b14      	subs	r3, #20
 8003366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	3b20      	subs	r3, #32
 8003372:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003374:	68fb      	ldr	r3, [r7, #12]
}
 8003376:	0018      	movs	r0, r3
 8003378:	46bd      	mov	sp, r7
 800337a:	b004      	add	sp, #16
 800337c:	bd80      	pop	{r7, pc}
 800337e:	46c0      	nop			@ (mov r8, r8)
 8003380:	08003385 	.word	0x08003385

08003384 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800338a:	2300      	movs	r3, #0
 800338c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800338e:	4b08      	ldr	r3, [pc, #32]	@ (80033b0 <prvTaskExitError+0x2c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	3301      	adds	r3, #1
 8003394:	d002      	beq.n	800339c <prvTaskExitError+0x18>
 8003396:	b672      	cpsid	i
 8003398:	46c0      	nop			@ (mov r8, r8)
 800339a:	e7fd      	b.n	8003398 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800339c:	b672      	cpsid	i
	while( ulDummy == 0 )
 800339e:	46c0      	nop			@ (mov r8, r8)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0fc      	beq.n	80033a0 <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	46c0      	nop			@ (mov r8, r8)
 80033aa:	46bd      	mov	sp, r7
 80033ac:	b002      	add	sp, #8
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	2000000c 	.word	0x2000000c

080033b4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80033b8:	46c0      	nop			@ (mov r8, r8)
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80033c4:	4b05      	ldr	r3, [pc, #20]	@ (80033dc <vPortYield+0x1c>)
 80033c6:	2280      	movs	r2, #128	@ 0x80
 80033c8:	0552      	lsls	r2, r2, #21
 80033ca:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80033cc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80033d0:	f3bf 8f6f 	isb	sy
}
 80033d4:	46c0      	nop			@ (mov r8, r8)
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	46c0      	nop			@ (mov r8, r8)
 80033dc:	e000ed04 	.word	0xe000ed04

080033e0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80033e4:	b672      	cpsid	i
    uxCriticalNesting++;
 80033e6:	4b06      	ldr	r3, [pc, #24]	@ (8003400 <vPortEnterCritical+0x20>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	1c5a      	adds	r2, r3, #1
 80033ec:	4b04      	ldr	r3, [pc, #16]	@ (8003400 <vPortEnterCritical+0x20>)
 80033ee:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80033f0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80033f4:	f3bf 8f6f 	isb	sy
}
 80033f8:	46c0      	nop			@ (mov r8, r8)
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	46c0      	nop			@ (mov r8, r8)
 8003400:	2000000c 	.word	0x2000000c

08003404 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003408:	4b09      	ldr	r3, [pc, #36]	@ (8003430 <vPortExitCritical+0x2c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d102      	bne.n	8003416 <vPortExitCritical+0x12>
 8003410:	b672      	cpsid	i
 8003412:	46c0      	nop			@ (mov r8, r8)
 8003414:	e7fd      	b.n	8003412 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8003416:	4b06      	ldr	r3, [pc, #24]	@ (8003430 <vPortExitCritical+0x2c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	1e5a      	subs	r2, r3, #1
 800341c:	4b04      	ldr	r3, [pc, #16]	@ (8003430 <vPortExitCritical+0x2c>)
 800341e:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8003420:	4b03      	ldr	r3, [pc, #12]	@ (8003430 <vPortExitCritical+0x2c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d100      	bne.n	800342a <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 8003428:	b662      	cpsie	i
    }
}
 800342a:	46c0      	nop			@ (mov r8, r8)
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	2000000c 	.word	0x2000000c

08003434 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8003434:	f3ef 8010 	mrs	r0, PRIMASK
 8003438:	b672      	cpsid	i
 800343a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800343c:	46c0      	nop			@ (mov r8, r8)
 800343e:	0018      	movs	r0, r3

08003440 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8003440:	f380 8810 	msr	PRIMASK, r0
 8003444:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8003446:	46c0      	nop			@ (mov r8, r8)
	...

08003450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003450:	f3ef 8009 	mrs	r0, PSP
 8003454:	4b0e      	ldr	r3, [pc, #56]	@ (8003490 <pxCurrentTCBConst>)
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	3820      	subs	r0, #32
 800345a:	6010      	str	r0, [r2, #0]
 800345c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800345e:	4644      	mov	r4, r8
 8003460:	464d      	mov	r5, r9
 8003462:	4656      	mov	r6, sl
 8003464:	465f      	mov	r7, fp
 8003466:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003468:	b508      	push	{r3, lr}
 800346a:	b672      	cpsid	i
 800346c:	f7ff feac 	bl	80031c8 <vTaskSwitchContext>
 8003470:	b662      	cpsie	i
 8003472:	bc0c      	pop	{r2, r3}
 8003474:	6811      	ldr	r1, [r2, #0]
 8003476:	6808      	ldr	r0, [r1, #0]
 8003478:	3010      	adds	r0, #16
 800347a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800347c:	46a0      	mov	r8, r4
 800347e:	46a9      	mov	r9, r5
 8003480:	46b2      	mov	sl, r6
 8003482:	46bb      	mov	fp, r7
 8003484:	f380 8809 	msr	PSP, r0
 8003488:	3820      	subs	r0, #32
 800348a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800348c:	4718      	bx	r3
 800348e:	46c0      	nop			@ (mov r8, r8)

08003490 <pxCurrentTCBConst>:
 8003490:	200000f8 	.word	0x200000f8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8003494:	46c0      	nop			@ (mov r8, r8)
 8003496:	46c0      	nop			@ (mov r8, r8)

08003498 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800349e:	f7ff ffc9 	bl	8003434 <ulSetInterruptMaskFromISR>
 80034a2:	0003      	movs	r3, r0
 80034a4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80034a6:	f7ff fddf 	bl	8003068 <xTaskIncrementTick>
 80034aa:	1e03      	subs	r3, r0, #0
 80034ac:	d003      	beq.n	80034b6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80034ae:	4b06      	ldr	r3, [pc, #24]	@ (80034c8 <SysTick_Handler+0x30>)
 80034b0:	2280      	movs	r2, #128	@ 0x80
 80034b2:	0552      	lsls	r2, r2, #21
 80034b4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	0018      	movs	r0, r3
 80034ba:	f7ff ffc1 	bl	8003440 <vClearInterruptMaskFromISR>
}
 80034be:	46c0      	nop			@ (mov r8, r8)
 80034c0:	46bd      	mov	sp, r7
 80034c2:	b002      	add	sp, #8
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	46c0      	nop			@ (mov r8, r8)
 80034c8:	e000ed04 	.word	0xe000ed04

080034cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80034d8:	f7ff fd2e 	bl	8002f38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80034dc:	4b4a      	ldr	r3, [pc, #296]	@ (8003608 <pvPortMalloc+0x13c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80034e4:	f000 f8e4 	bl	80036b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80034e8:	4b48      	ldr	r3, [pc, #288]	@ (800360c <pvPortMalloc+0x140>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	4013      	ands	r3, r2
 80034f0:	d000      	beq.n	80034f4 <pvPortMalloc+0x28>
 80034f2:	e07b      	b.n	80035ec <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d013      	beq.n	8003522 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 80034fa:	2208      	movs	r2, #8
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	189b      	adds	r3, r3, r2
 8003500:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2207      	movs	r2, #7
 8003506:	4013      	ands	r3, r2
 8003508:	d00b      	beq.n	8003522 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2207      	movs	r2, #7
 800350e:	4393      	bics	r3, r2
 8003510:	3308      	adds	r3, #8
 8003512:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2207      	movs	r2, #7
 8003518:	4013      	ands	r3, r2
 800351a:	d002      	beq.n	8003522 <pvPortMalloc+0x56>
 800351c:	b672      	cpsid	i
 800351e:	46c0      	nop			@ (mov r8, r8)
 8003520:	e7fd      	b.n	800351e <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d061      	beq.n	80035ec <pvPortMalloc+0x120>
 8003528:	4b39      	ldr	r3, [pc, #228]	@ (8003610 <pvPortMalloc+0x144>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	429a      	cmp	r2, r3
 8003530:	d85c      	bhi.n	80035ec <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003532:	4b38      	ldr	r3, [pc, #224]	@ (8003614 <pvPortMalloc+0x148>)
 8003534:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8003536:	4b37      	ldr	r3, [pc, #220]	@ (8003614 <pvPortMalloc+0x148>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800353c:	e004      	b.n	8003548 <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	429a      	cmp	r2, r3
 8003550:	d903      	bls.n	800355a <pvPortMalloc+0x8e>
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1f1      	bne.n	800353e <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800355a:	4b2b      	ldr	r3, [pc, #172]	@ (8003608 <pvPortMalloc+0x13c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	429a      	cmp	r2, r3
 8003562:	d043      	beq.n	80035ec <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2208      	movs	r2, #8
 800356a:	189b      	adds	r3, r3, r2
 800356c:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	1ad2      	subs	r2, r2, r3
 800357e:	2308      	movs	r3, #8
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	429a      	cmp	r2, r3
 8003584:	d917      	bls.n	80035b6 <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	18d3      	adds	r3, r2, r3
 800358c:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	2207      	movs	r2, #7
 8003592:	4013      	ands	r3, r2
 8003594:	d002      	beq.n	800359c <pvPortMalloc+0xd0>
 8003596:	b672      	cpsid	i
 8003598:	46c0      	nop			@ (mov r8, r8)
 800359a:	e7fd      	b.n	8003598 <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	1ad2      	subs	r2, r2, r3
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	0018      	movs	r0, r3
 80035b2:	f000 f8dd 	bl	8003770 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80035b6:	4b16      	ldr	r3, [pc, #88]	@ (8003610 <pvPortMalloc+0x144>)
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	1ad2      	subs	r2, r2, r3
 80035c0:	4b13      	ldr	r3, [pc, #76]	@ (8003610 <pvPortMalloc+0x144>)
 80035c2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80035c4:	4b12      	ldr	r3, [pc, #72]	@ (8003610 <pvPortMalloc+0x144>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	4b13      	ldr	r3, [pc, #76]	@ (8003618 <pvPortMalloc+0x14c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d203      	bcs.n	80035d8 <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80035d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003610 <pvPortMalloc+0x144>)
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	4b10      	ldr	r3, [pc, #64]	@ (8003618 <pvPortMalloc+0x14c>)
 80035d6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	4b0b      	ldr	r3, [pc, #44]	@ (800360c <pvPortMalloc+0x140>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	431a      	orrs	r2, r3
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80035ec:	f7ff fcb0 	bl	8002f50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2207      	movs	r2, #7
 80035f4:	4013      	ands	r3, r2
 80035f6:	d002      	beq.n	80035fe <pvPortMalloc+0x132>
 80035f8:	b672      	cpsid	i
 80035fa:	46c0      	nop			@ (mov r8, r8)
 80035fc:	e7fd      	b.n	80035fa <pvPortMalloc+0x12e>
	return pvReturn;
 80035fe:	68fb      	ldr	r3, [r7, #12]
}
 8003600:	0018      	movs	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	b006      	add	sp, #24
 8003606:	bd80      	pop	{r7, pc}
 8003608:	200011f8 	.word	0x200011f8
 800360c:	20001204 	.word	0x20001204
 8003610:	200011fc 	.word	0x200011fc
 8003614:	200011f0 	.word	0x200011f0
 8003618:	20001200 	.word	0x20001200

0800361c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d037      	beq.n	800369e <vPortFree+0x82>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800362e:	2308      	movs	r3, #8
 8003630:	425b      	negs	r3, r3
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	18d3      	adds	r3, r2, r3
 8003636:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	4b19      	ldr	r3, [pc, #100]	@ (80036a8 <vPortFree+0x8c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4013      	ands	r3, r2
 8003646:	d102      	bne.n	800364e <vPortFree+0x32>
 8003648:	b672      	cpsid	i
 800364a:	46c0      	nop			@ (mov r8, r8)
 800364c:	e7fd      	b.n	800364a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <vPortFree+0x40>
 8003656:	b672      	cpsid	i
 8003658:	46c0      	nop			@ (mov r8, r8)
 800365a:	e7fd      	b.n	8003658 <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	4b11      	ldr	r3, [pc, #68]	@ (80036a8 <vPortFree+0x8c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4013      	ands	r3, r2
 8003666:	d01a      	beq.n	800369e <vPortFree+0x82>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d116      	bne.n	800369e <vPortFree+0x82>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	4b0c      	ldr	r3, [pc, #48]	@ (80036a8 <vPortFree+0x8c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	43db      	mvns	r3, r3
 800367a:	401a      	ands	r2, r3
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003680:	f7ff fc5a 	bl	8002f38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	4b08      	ldr	r3, [pc, #32]	@ (80036ac <vPortFree+0x90>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	18d2      	adds	r2, r2, r3
 800368e:	4b07      	ldr	r3, [pc, #28]	@ (80036ac <vPortFree+0x90>)
 8003690:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	0018      	movs	r0, r3
 8003696:	f000 f86b 	bl	8003770 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800369a:	f7ff fc59 	bl	8002f50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800369e:	46c0      	nop			@ (mov r8, r8)
 80036a0:	46bd      	mov	sp, r7
 80036a2:	b004      	add	sp, #16
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	46c0      	nop			@ (mov r8, r8)
 80036a8:	20001204 	.word	0x20001204
 80036ac:	200011fc 	.word	0x200011fc

080036b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80036b6:	23c0      	movs	r3, #192	@ 0xc0
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80036bc:	4b26      	ldr	r3, [pc, #152]	@ (8003758 <prvHeapInit+0xa8>)
 80036be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2207      	movs	r2, #7
 80036c4:	4013      	ands	r3, r2
 80036c6:	d00c      	beq.n	80036e2 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	3307      	adds	r3, #7
 80036cc:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2207      	movs	r2, #7
 80036d2:	4393      	bics	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	1ad2      	subs	r2, r2, r3
 80036dc:	4b1e      	ldr	r3, [pc, #120]	@ (8003758 <prvHeapInit+0xa8>)
 80036de:	18d3      	adds	r3, r2, r3
 80036e0:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80036e6:	4b1d      	ldr	r3, [pc, #116]	@ (800375c <prvHeapInit+0xac>)
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80036ec:	4b1b      	ldr	r3, [pc, #108]	@ (800375c <prvHeapInit+0xac>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	18d3      	adds	r3, r2, r3
 80036f8:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80036fa:	2208      	movs	r2, #8
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	1a9b      	subs	r3, r3, r2
 8003700:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2207      	movs	r2, #7
 8003706:	4393      	bics	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	4b14      	ldr	r3, [pc, #80]	@ (8003760 <prvHeapInit+0xb0>)
 800370e:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8003710:	4b13      	ldr	r3, [pc, #76]	@ (8003760 <prvHeapInit+0xb0>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2200      	movs	r2, #0
 8003716:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003718:	4b11      	ldr	r3, [pc, #68]	@ (8003760 <prvHeapInit+0xb0>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	1ad2      	subs	r2, r2, r3
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800372e:	4b0c      	ldr	r3, [pc, #48]	@ (8003760 <prvHeapInit+0xb0>)
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	4b0a      	ldr	r3, [pc, #40]	@ (8003764 <prvHeapInit+0xb4>)
 800373c:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	4b09      	ldr	r3, [pc, #36]	@ (8003768 <prvHeapInit+0xb8>)
 8003744:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003746:	4b09      	ldr	r3, [pc, #36]	@ (800376c <prvHeapInit+0xbc>)
 8003748:	2280      	movs	r2, #128	@ 0x80
 800374a:	0612      	lsls	r2, r2, #24
 800374c:	601a      	str	r2, [r3, #0]
}
 800374e:	46c0      	nop			@ (mov r8, r8)
 8003750:	46bd      	mov	sp, r7
 8003752:	b004      	add	sp, #16
 8003754:	bd80      	pop	{r7, pc}
 8003756:	46c0      	nop			@ (mov r8, r8)
 8003758:	200005f0 	.word	0x200005f0
 800375c:	200011f0 	.word	0x200011f0
 8003760:	200011f8 	.word	0x200011f8
 8003764:	20001200 	.word	0x20001200
 8003768:	200011fc 	.word	0x200011fc
 800376c:	20001204 	.word	0x20001204

08003770 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003778:	4b27      	ldr	r3, [pc, #156]	@ (8003818 <prvInsertBlockIntoFreeList+0xa8>)
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	e002      	b.n	8003784 <prvInsertBlockIntoFreeList+0x14>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	429a      	cmp	r2, r3
 800378c:	d8f7      	bhi.n	800377e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	18d3      	adds	r3, r2, r3
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	429a      	cmp	r2, r3
 800379e:	d108      	bne.n	80037b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	18d2      	adds	r2, r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	18d2      	adds	r2, r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d118      	bne.n	80037f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	4b14      	ldr	r3, [pc, #80]	@ (800381c <prvInsertBlockIntoFreeList+0xac>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d00d      	beq.n	80037ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	18d2      	adds	r2, r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	e008      	b.n	8003800 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80037ee:	4b0b      	ldr	r3, [pc, #44]	@ (800381c <prvInsertBlockIntoFreeList+0xac>)
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	e003      	b.n	8003800 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	429a      	cmp	r2, r3
 8003806:	d002      	beq.n	800380e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800380e:	46c0      	nop			@ (mov r8, r8)
 8003810:	46bd      	mov	sp, r7
 8003812:	b004      	add	sp, #16
 8003814:	bd80      	pop	{r7, pc}
 8003816:	46c0      	nop			@ (mov r8, r8)
 8003818:	200011f0 	.word	0x200011f0
 800381c:	200011f8 	.word	0x200011f8

08003820 <memset>:
 8003820:	0003      	movs	r3, r0
 8003822:	1882      	adds	r2, r0, r2
 8003824:	4293      	cmp	r3, r2
 8003826:	d100      	bne.n	800382a <memset+0xa>
 8003828:	4770      	bx	lr
 800382a:	7019      	strb	r1, [r3, #0]
 800382c:	3301      	adds	r3, #1
 800382e:	e7f9      	b.n	8003824 <memset+0x4>

08003830 <__libc_init_array>:
 8003830:	b570      	push	{r4, r5, r6, lr}
 8003832:	2600      	movs	r6, #0
 8003834:	4c0c      	ldr	r4, [pc, #48]	@ (8003868 <__libc_init_array+0x38>)
 8003836:	4d0d      	ldr	r5, [pc, #52]	@ (800386c <__libc_init_array+0x3c>)
 8003838:	1b64      	subs	r4, r4, r5
 800383a:	10a4      	asrs	r4, r4, #2
 800383c:	42a6      	cmp	r6, r4
 800383e:	d109      	bne.n	8003854 <__libc_init_array+0x24>
 8003840:	2600      	movs	r6, #0
 8003842:	f000 f819 	bl	8003878 <_init>
 8003846:	4c0a      	ldr	r4, [pc, #40]	@ (8003870 <__libc_init_array+0x40>)
 8003848:	4d0a      	ldr	r5, [pc, #40]	@ (8003874 <__libc_init_array+0x44>)
 800384a:	1b64      	subs	r4, r4, r5
 800384c:	10a4      	asrs	r4, r4, #2
 800384e:	42a6      	cmp	r6, r4
 8003850:	d105      	bne.n	800385e <__libc_init_array+0x2e>
 8003852:	bd70      	pop	{r4, r5, r6, pc}
 8003854:	00b3      	lsls	r3, r6, #2
 8003856:	58eb      	ldr	r3, [r5, r3]
 8003858:	4798      	blx	r3
 800385a:	3601      	adds	r6, #1
 800385c:	e7ee      	b.n	800383c <__libc_init_array+0xc>
 800385e:	00b3      	lsls	r3, r6, #2
 8003860:	58eb      	ldr	r3, [r5, r3]
 8003862:	4798      	blx	r3
 8003864:	3601      	adds	r6, #1
 8003866:	e7f2      	b.n	800384e <__libc_init_array+0x1e>
 8003868:	08003944 	.word	0x08003944
 800386c:	08003944 	.word	0x08003944
 8003870:	08003948 	.word	0x08003948
 8003874:	08003944 	.word	0x08003944

08003878 <_init>:
 8003878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387a:	46c0      	nop			@ (mov r8, r8)
 800387c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800387e:	bc08      	pop	{r3}
 8003880:	469e      	mov	lr, r3
 8003882:	4770      	bx	lr

08003884 <_fini>:
 8003884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003886:	46c0      	nop			@ (mov r8, r8)
 8003888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800388a:	bc08      	pop	{r3}
 800388c:	469e      	mov	lr, r3
 800388e:	4770      	bx	lr
