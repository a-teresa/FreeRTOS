
8_ADC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000147c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800161c  0800161c  0001161c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016f4  080016f4  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080016f4  080016f4  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016f4  080016f4  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016f4  080016f4  000116f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016f8  080016f8  000116f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080016fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000064  08001760  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08001760  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002ec0  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000898  00000000  00000000  00022f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000170  00000000  00000000  000237f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000118  00000000  00000000  00023960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fe55  00000000  00000000  00023a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001fa4  00000000  00000000  000338cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005546e  00000000  00000000  00035871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0008acdf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c10  00000000  00000000  0008ad34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001604 	.word	0x08001604

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08001604 	.word	0x08001604

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <adc_dma_init>:


uint16_t adc_raw_data[NUM_OF_CHANNELS];

void adc_dma_init(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	/************GPIO Configuration**********/
	/*Enable clock access to ADC GPIO Pin's Port*/
	RCC->AHB1ENR |= GPIOAEN;
 8000284:	4b50      	ldr	r3, [pc, #320]	; (80003c8 <adc_dma_init+0x148>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000288:	4a4f      	ldr	r2, [pc, #316]	; (80003c8 <adc_dma_init+0x148>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA0 and PA1 mode to analog mode*/
	GPIOA->MODER |= (1U<<0);
 8000290:	4b4e      	ldr	r3, [pc, #312]	; (80003cc <adc_dma_init+0x14c>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a4d      	ldr	r2, [pc, #308]	; (80003cc <adc_dma_init+0x14c>)
 8000296:	f043 0301 	orr.w	r3, r3, #1
 800029a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<1);
 800029c:	4b4b      	ldr	r3, [pc, #300]	; (80003cc <adc_dma_init+0x14c>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a4a      	ldr	r2, [pc, #296]	; (80003cc <adc_dma_init+0x14c>)
 80002a2:	f043 0302 	orr.w	r3, r3, #2
 80002a6:	6013      	str	r3, [r2, #0]

	GPIOA->MODER |= (1U<<2);
 80002a8:	4b48      	ldr	r3, [pc, #288]	; (80003cc <adc_dma_init+0x14c>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a47      	ldr	r2, [pc, #284]	; (80003cc <adc_dma_init+0x14c>)
 80002ae:	f043 0304 	orr.w	r3, r3, #4
 80002b2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<3);
 80002b4:	4b45      	ldr	r3, [pc, #276]	; (80003cc <adc_dma_init+0x14c>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a44      	ldr	r2, [pc, #272]	; (80003cc <adc_dma_init+0x14c>)
 80002ba:	f043 0308 	orr.w	r3, r3, #8
 80002be:	6013      	str	r3, [r2, #0]

	/************ADC Configuration**********/
	/*Enable clock access to ADC*/
	RCC->APB2ENR |= ADC1EN;
 80002c0:	4b41      	ldr	r3, [pc, #260]	; (80003c8 <adc_dma_init+0x148>)
 80002c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002c4:	4a40      	ldr	r2, [pc, #256]	; (80003c8 <adc_dma_init+0x148>)
 80002c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ca:	6453      	str	r3, [r2, #68]	; 0x44

	/*Set sequence length*/
	ADC1->SQR1 |= (1U<<20);
 80002cc:	4b40      	ldr	r3, [pc, #256]	; (80003d0 <adc_dma_init+0x150>)
 80002ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002d0:	4a3f      	ldr	r2, [pc, #252]	; (80003d0 <adc_dma_init+0x150>)
 80002d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d6:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR1 &= ~(1U<<21);
 80002d8:	4b3d      	ldr	r3, [pc, #244]	; (80003d0 <adc_dma_init+0x150>)
 80002da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002dc:	4a3c      	ldr	r2, [pc, #240]	; (80003d0 <adc_dma_init+0x150>)
 80002de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80002e2:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR1 &= ~(1U<<22);
 80002e4:	4b3a      	ldr	r3, [pc, #232]	; (80003d0 <adc_dma_init+0x150>)
 80002e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002e8:	4a39      	ldr	r2, [pc, #228]	; (80003d0 <adc_dma_init+0x150>)
 80002ea:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80002ee:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR1 &= ~(1U<<23);
 80002f0:	4b37      	ldr	r3, [pc, #220]	; (80003d0 <adc_dma_init+0x150>)
 80002f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002f4:	4a36      	ldr	r2, [pc, #216]	; (80003d0 <adc_dma_init+0x150>)
 80002f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80002fa:	62d3      	str	r3, [r2, #44]	; 0x2c

	/*Set sequence*/
	ADC1->SQR3 = (0U<<0) | (1U<<5);
 80002fc:	4b34      	ldr	r3, [pc, #208]	; (80003d0 <adc_dma_init+0x150>)
 80002fe:	2220      	movs	r2, #32
 8000300:	635a      	str	r2, [r3, #52]	; 0x34

	/*Enable scan mode*/
	ADC1->CR1 = CR1_SCAN;
 8000302:	4b33      	ldr	r3, [pc, #204]	; (80003d0 <adc_dma_init+0x150>)
 8000304:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000308:	605a      	str	r2, [r3, #4]

	/*Select to use DMA*/
	ADC1->CR2 |=CR2_CONT |CR2_DMA|CR2_DDS;
 800030a:	4b31      	ldr	r3, [pc, #196]	; (80003d0 <adc_dma_init+0x150>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	4a30      	ldr	r2, [pc, #192]	; (80003d0 <adc_dma_init+0x150>)
 8000310:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000314:	f043 0302 	orr.w	r3, r3, #2
 8000318:	6093      	str	r3, [r2, #8]


	/************DMA Configuration**********/
	/*Enable clock access to DMA*/
	RCC->AHB1ENR |=DMA2EN;
 800031a:	4b2b      	ldr	r3, [pc, #172]	; (80003c8 <adc_dma_init+0x148>)
 800031c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800031e:	4a2a      	ldr	r2, [pc, #168]	; (80003c8 <adc_dma_init+0x148>)
 8000320:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000324:	6313      	str	r3, [r2, #48]	; 0x30


	/*Disable DMA stream*/
	DMA2_Stream0->CR &=~DMA_SCR_EN;
 8000326:	4b2b      	ldr	r3, [pc, #172]	; (80003d4 <adc_dma_init+0x154>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a2a      	ldr	r2, [pc, #168]	; (80003d4 <adc_dma_init+0x154>)
 800032c:	f023 0301 	bic.w	r3, r3, #1
 8000330:	6013      	str	r3, [r2, #0]

	/*Wait till DMA is disabled*/
	while((DMA2_Stream0->CR & DMA_SCR_EN)){}
 8000332:	bf00      	nop
 8000334:	4b27      	ldr	r3, [pc, #156]	; (80003d4 <adc_dma_init+0x154>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	f003 0301 	and.w	r3, r3, #1
 800033c:	2b00      	cmp	r3, #0
 800033e:	d1f9      	bne.n	8000334 <adc_dma_init+0xb4>

	/*Enable Circular mode*/
	DMA2_Stream0->CR |=DMA_SCR_CIRC;
 8000340:	4b24      	ldr	r3, [pc, #144]	; (80003d4 <adc_dma_init+0x154>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a23      	ldr	r2, [pc, #140]	; (80003d4 <adc_dma_init+0x154>)
 8000346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800034a:	6013      	str	r3, [r2, #0]

	/*Set MSIZE i.e Memory data size to half-word*/

	DMA2_Stream0->CR |= (1U<<13);
 800034c:	4b21      	ldr	r3, [pc, #132]	; (80003d4 <adc_dma_init+0x154>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a20      	ldr	r2, [pc, #128]	; (80003d4 <adc_dma_init+0x154>)
 8000352:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000356:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~(1U<<14);
 8000358:	4b1e      	ldr	r3, [pc, #120]	; (80003d4 <adc_dma_init+0x154>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a1d      	ldr	r2, [pc, #116]	; (80003d4 <adc_dma_init+0x154>)
 800035e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000362:	6013      	str	r3, [r2, #0]

	/*Set PSIZE i.e Peripheral data size to half-word*/
	DMA2_Stream0->CR |= (1U<<11);
 8000364:	4b1b      	ldr	r3, [pc, #108]	; (80003d4 <adc_dma_init+0x154>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a1a      	ldr	r2, [pc, #104]	; (80003d4 <adc_dma_init+0x154>)
 800036a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800036e:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~(1U<<12);
 8000370:	4b18      	ldr	r3, [pc, #96]	; (80003d4 <adc_dma_init+0x154>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a17      	ldr	r2, [pc, #92]	; (80003d4 <adc_dma_init+0x154>)
 8000376:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800037a:	6013      	str	r3, [r2, #0]

	/*Enable memory addr increment*/
	DMA2_Stream0->CR |=DMA_SCR_MINC;
 800037c:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <adc_dma_init+0x154>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a14      	ldr	r2, [pc, #80]	; (80003d4 <adc_dma_init+0x154>)
 8000382:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000386:	6013      	str	r3, [r2, #0]

	/*Set periph address*/
	DMA2_Stream0->PAR = (uint32_t)(&(ADC1->DR));
 8000388:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <adc_dma_init+0x154>)
 800038a:	4a13      	ldr	r2, [pc, #76]	; (80003d8 <adc_dma_init+0x158>)
 800038c:	609a      	str	r2, [r3, #8]
	/*Set mem address*/
	DMA2_Stream0->M0AR = (uint32_t)(&adc_raw_data);
 800038e:	4b11      	ldr	r3, [pc, #68]	; (80003d4 <adc_dma_init+0x154>)
 8000390:	4a12      	ldr	r2, [pc, #72]	; (80003dc <adc_dma_init+0x15c>)
 8000392:	60da      	str	r2, [r3, #12]

	/*Set number of transfer*/
	DMA2_Stream0->NDTR = (uint16_t)NUM_OF_CHANNELS;
 8000394:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <adc_dma_init+0x154>)
 8000396:	2202      	movs	r2, #2
 8000398:	605a      	str	r2, [r3, #4]

	/*Enable DMA stream*/
	DMA2_Stream0->CR |= DMA_SCR_EN;
 800039a:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <adc_dma_init+0x154>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a0d      	ldr	r2, [pc, #52]	; (80003d4 <adc_dma_init+0x154>)
 80003a0:	f043 0301 	orr.w	r3, r3, #1
 80003a4:	6013      	str	r3, [r2, #0]

	/************ADC Configuration**********/
	/*Enable ADC*/
	ADC1->CR2 |=CR2_ADCON;
 80003a6:	4b0a      	ldr	r3, [pc, #40]	; (80003d0 <adc_dma_init+0x150>)
 80003a8:	689b      	ldr	r3, [r3, #8]
 80003aa:	4a09      	ldr	r2, [pc, #36]	; (80003d0 <adc_dma_init+0x150>)
 80003ac:	f043 0301 	orr.w	r3, r3, #1
 80003b0:	6093      	str	r3, [r2, #8]

	/*Start ADC*/
	ADC1->CR2 |=CR2_SWSTART;
 80003b2:	4b07      	ldr	r3, [pc, #28]	; (80003d0 <adc_dma_init+0x150>)
 80003b4:	689b      	ldr	r3, [r3, #8]
 80003b6:	4a06      	ldr	r2, [pc, #24]	; (80003d0 <adc_dma_init+0x150>)
 80003b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80003bc:	6093      	str	r3, [r2, #8]


}
 80003be:	bf00      	nop
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr
 80003c8:	40023800 	.word	0x40023800
 80003cc:	40020000 	.word	0x40020000
 80003d0:	40012000 	.word	0x40012000
 80003d4:	40026410 	.word	0x40026410
 80003d8:	4001204c 	.word	0x4001204c
 80003dc:	2000008c 	.word	0x2000008c

080003e0 <main>:
extern uint16_t adc_raw_data[NUM_OF_CHANNELS];



int main(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0

	uart2_tx_init();
 80003e6:	f000 f8d1 	bl	800058c <uart2_tx_init>
	adc_dma_init();
 80003ea:	f7ff ff49 	bl	8000280 <adc_dma_init>

	while(1)
	{
			printf("Value from sensor one : %d \n\r ",adc_raw_data[0]);
 80003ee:	4b0b      	ldr	r3, [pc, #44]	; (800041c <main+0x3c>)
 80003f0:	881b      	ldrh	r3, [r3, #0]
 80003f2:	4619      	mov	r1, r3
 80003f4:	480a      	ldr	r0, [pc, #40]	; (8000420 <main+0x40>)
 80003f6:	f000 f9af 	bl	8000758 <iprintf>
			printf("Value from sensor two : %d \n\r ",adc_raw_data[1]);
 80003fa:	4b08      	ldr	r3, [pc, #32]	; (800041c <main+0x3c>)
 80003fc:	885b      	ldrh	r3, [r3, #2]
 80003fe:	4619      	mov	r1, r3
 8000400:	4808      	ldr	r0, [pc, #32]	; (8000424 <main+0x44>)
 8000402:	f000 f9a9 	bl	8000758 <iprintf>

			for( int i = 0; i < 90000; i++){}
 8000406:	2300      	movs	r3, #0
 8000408:	607b      	str	r3, [r7, #4]
 800040a:	e002      	b.n	8000412 <main+0x32>
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	3301      	adds	r3, #1
 8000410:	607b      	str	r3, [r7, #4]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4a04      	ldr	r2, [pc, #16]	; (8000428 <main+0x48>)
 8000416:	4293      	cmp	r3, r2
 8000418:	ddf8      	ble.n	800040c <main+0x2c>
			printf("Value from sensor one : %d \n\r ",adc_raw_data[0]);
 800041a:	e7e8      	b.n	80003ee <main+0xe>
 800041c:	2000008c 	.word	0x2000008c
 8000420:	0800161c 	.word	0x0800161c
 8000424:	0800163c 	.word	0x0800163c
 8000428:	00015f8f 	.word	0x00015f8f

0800042c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b086      	sub	sp, #24
 8000430:	af00      	add	r7, sp, #0
 8000432:	60f8      	str	r0, [r7, #12]
 8000434:	60b9      	str	r1, [r7, #8]
 8000436:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000438:	2300      	movs	r3, #0
 800043a:	617b      	str	r3, [r7, #20]
 800043c:	e00a      	b.n	8000454 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800043e:	f3af 8000 	nop.w
 8000442:	4601      	mov	r1, r0
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	1c5a      	adds	r2, r3, #1
 8000448:	60ba      	str	r2, [r7, #8]
 800044a:	b2ca      	uxtb	r2, r1
 800044c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800044e:	697b      	ldr	r3, [r7, #20]
 8000450:	3301      	adds	r3, #1
 8000452:	617b      	str	r3, [r7, #20]
 8000454:	697a      	ldr	r2, [r7, #20]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	429a      	cmp	r2, r3
 800045a:	dbf0      	blt.n	800043e <_read+0x12>
	}

return len;
 800045c:	687b      	ldr	r3, [r7, #4]
}
 800045e:	4618      	mov	r0, r3
 8000460:	3718      	adds	r7, #24
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}

08000466 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000466:	b580      	push	{r7, lr}
 8000468:	b086      	sub	sp, #24
 800046a:	af00      	add	r7, sp, #0
 800046c:	60f8      	str	r0, [r7, #12]
 800046e:	60b9      	str	r1, [r7, #8]
 8000470:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000472:	2300      	movs	r3, #0
 8000474:	617b      	str	r3, [r7, #20]
 8000476:	e009      	b.n	800048c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	1c5a      	adds	r2, r3, #1
 800047c:	60ba      	str	r2, [r7, #8]
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	4618      	mov	r0, r3
 8000482:	f000 f877 	bl	8000574 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000486:	697b      	ldr	r3, [r7, #20]
 8000488:	3301      	adds	r3, #1
 800048a:	617b      	str	r3, [r7, #20]
 800048c:	697a      	ldr	r2, [r7, #20]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	429a      	cmp	r2, r3
 8000492:	dbf1      	blt.n	8000478 <_write+0x12>
	}
	return len;
 8000494:	687b      	ldr	r3, [r7, #4]
}
 8000496:	4618      	mov	r0, r3
 8000498:	3718      	adds	r7, #24
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}

0800049e <_close>:

int _close(int file)
{
 800049e:	b480      	push	{r7}
 80004a0:	b083      	sub	sp, #12
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	6078      	str	r0, [r7, #4]
	return -1;
 80004a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr

080004b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004b6:	b480      	push	{r7}
 80004b8:	b083      	sub	sp, #12
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
 80004be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004c6:	605a      	str	r2, [r3, #4]
	return 0;
 80004c8:	2300      	movs	r3, #0
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	370c      	adds	r7, #12
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr

080004d6 <_isatty>:

int _isatty(int file)
{
 80004d6:	b480      	push	{r7}
 80004d8:	b083      	sub	sp, #12
 80004da:	af00      	add	r7, sp, #0
 80004dc:	6078      	str	r0, [r7, #4]
	return 1;
 80004de:	2301      	movs	r3, #1
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
	return 0;
 80004f8:	2300      	movs	r3, #0
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
	...

08000508 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000510:	4a14      	ldr	r2, [pc, #80]	; (8000564 <_sbrk+0x5c>)
 8000512:	4b15      	ldr	r3, [pc, #84]	; (8000568 <_sbrk+0x60>)
 8000514:	1ad3      	subs	r3, r2, r3
 8000516:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000518:	697b      	ldr	r3, [r7, #20]
 800051a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800051c:	4b13      	ldr	r3, [pc, #76]	; (800056c <_sbrk+0x64>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d102      	bne.n	800052a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000524:	4b11      	ldr	r3, [pc, #68]	; (800056c <_sbrk+0x64>)
 8000526:	4a12      	ldr	r2, [pc, #72]	; (8000570 <_sbrk+0x68>)
 8000528:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800052a:	4b10      	ldr	r3, [pc, #64]	; (800056c <_sbrk+0x64>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4413      	add	r3, r2
 8000532:	693a      	ldr	r2, [r7, #16]
 8000534:	429a      	cmp	r2, r3
 8000536:	d207      	bcs.n	8000548 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000538:	f000 f8dc 	bl	80006f4 <__errno>
 800053c:	4603      	mov	r3, r0
 800053e:	220c      	movs	r2, #12
 8000540:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000542:	f04f 33ff 	mov.w	r3, #4294967295
 8000546:	e009      	b.n	800055c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000548:	4b08      	ldr	r3, [pc, #32]	; (800056c <_sbrk+0x64>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800054e:	4b07      	ldr	r3, [pc, #28]	; (800056c <_sbrk+0x64>)
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4413      	add	r3, r2
 8000556:	4a05      	ldr	r2, [pc, #20]	; (800056c <_sbrk+0x64>)
 8000558:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800055a:	68fb      	ldr	r3, [r7, #12]
}
 800055c:	4618      	mov	r0, r3
 800055e:	3718      	adds	r7, #24
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20020000 	.word	0x20020000
 8000568:	00000400 	.word	0x00000400
 800056c:	20000080 	.word	0x20000080
 8000570:	200000a0 	.word	0x200000a0

08000574 <__io_putchar>:
static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void uart2_write(int ch);


int __io_putchar(int ch)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f000 f84f 	bl	8000620 <uart2_write>
	return ch;
 8000582:	687b      	ldr	r3, [r7, #4]
}
 8000584:	4618      	mov	r0, r3
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <uart2_tx_init>:
void uart2_tx_init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	/*************Configure UART GPIO pin********************/
	/*1.Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000590:	4b1f      	ldr	r3, [pc, #124]	; (8000610 <uart2_tx_init+0x84>)
 8000592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000594:	4a1e      	ldr	r2, [pc, #120]	; (8000610 <uart2_tx_init+0x84>)
 8000596:	f043 0301 	orr.w	r3, r3, #1
 800059a:	6313      	str	r3, [r2, #48]	; 0x30

	/*2.Set PA2 mode to alternate function mode*/
	GPIOA->MODER &= ~(1U<<4);
 800059c:	4b1d      	ldr	r3, [pc, #116]	; (8000614 <uart2_tx_init+0x88>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a1c      	ldr	r2, [pc, #112]	; (8000614 <uart2_tx_init+0x88>)
 80005a2:	f023 0310 	bic.w	r3, r3, #16
 80005a6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=	 (1U<<5);
 80005a8:	4b1a      	ldr	r3, [pc, #104]	; (8000614 <uart2_tx_init+0x88>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a19      	ldr	r2, [pc, #100]	; (8000614 <uart2_tx_init+0x88>)
 80005ae:	f043 0320 	orr.w	r3, r3, #32
 80005b2:	6013      	str	r3, [r2, #0]

	/*3.Set PA2 alternate function function type to AF7(UART2_TX)*/
	GPIOA->AFR[0] |= (1U<<8);
 80005b4:	4b17      	ldr	r3, [pc, #92]	; (8000614 <uart2_tx_init+0x88>)
 80005b6:	6a1b      	ldr	r3, [r3, #32]
 80005b8:	4a16      	ldr	r2, [pc, #88]	; (8000614 <uart2_tx_init+0x88>)
 80005ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005be:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 80005c0:	4b14      	ldr	r3, [pc, #80]	; (8000614 <uart2_tx_init+0x88>)
 80005c2:	6a1b      	ldr	r3, [r3, #32]
 80005c4:	4a13      	ldr	r2, [pc, #76]	; (8000614 <uart2_tx_init+0x88>)
 80005c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ca:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 80005cc:	4b11      	ldr	r3, [pc, #68]	; (8000614 <uart2_tx_init+0x88>)
 80005ce:	6a1b      	ldr	r3, [r3, #32]
 80005d0:	4a10      	ldr	r2, [pc, #64]	; (8000614 <uart2_tx_init+0x88>)
 80005d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005d6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 80005d8:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <uart2_tx_init+0x88>)
 80005da:	6a1b      	ldr	r3, [r3, #32]
 80005dc:	4a0d      	ldr	r2, [pc, #52]	; (8000614 <uart2_tx_init+0x88>)
 80005de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80005e2:	6213      	str	r3, [r2, #32]

	/*************Configure UART Module********************/
	/*4. Enable clock access to UART2*/
	RCC->APB1ENR |= UART2EN;
 80005e4:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <uart2_tx_init+0x84>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	4a09      	ldr	r2, [pc, #36]	; (8000610 <uart2_tx_init+0x84>)
 80005ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40

	/*5. Set baudrate*/
	uart_set_baudrate(CLK,UART_BAUDRATE);
 80005f0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80005f4:	4808      	ldr	r0, [pc, #32]	; (8000618 <uart2_tx_init+0x8c>)
 80005f6:	f000 f83f 	bl	8000678 <uart_set_baudrate>

	/*6. Set transfer direction*/
	 USART2->CR1 = CR1_TE;
 80005fa:	4b08      	ldr	r3, [pc, #32]	; (800061c <uart2_tx_init+0x90>)
 80005fc:	2208      	movs	r2, #8
 80005fe:	60da      	str	r2, [r3, #12]

	/*7. Enable uart module*/
	 USART2->CR1 |= CR1_UE;
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <uart2_tx_init+0x90>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	4a05      	ldr	r2, [pc, #20]	; (800061c <uart2_tx_init+0x90>)
 8000606:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800060a:	60d3      	str	r3, [r2, #12]

}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40023800 	.word	0x40023800
 8000614:	40020000 	.word	0x40020000
 8000618:	00f42400 	.word	0x00f42400
 800061c:	40004400 	.word	0x40004400

08000620 <uart2_write>:

static void uart2_write(int ch)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 8000628:	bf00      	nop
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <uart2_write+0x2c>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000632:	2b00      	cmp	r3, #0
 8000634:	d0f9      	beq.n	800062a <uart2_write+0xa>

	/*Write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4a04      	ldr	r2, [pc, #16]	; (800064c <uart2_write+0x2c>)
 800063a:	b2db      	uxtb	r3, r3
 800063c:	6053      	str	r3, [r2, #4]
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	40004400 	.word	0x40004400

08000650 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
	return ((periph_clk +( baudrate/2U ))/baudrate);
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	085a      	lsrs	r2, r3, #1
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	441a      	add	r2, r3
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	fbb2 f3f3 	udiv	r3, r2, r3
 8000668:	b29b      	uxth	r3, r3
}
 800066a:	4618      	mov	r0, r3
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
	...

08000678 <uart_set_baudrate>:


static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	6039      	str	r1, [r7, #0]
	USART2->BRR  = compute_uart_bd(periph_clk,baudrate);
 8000682:	6839      	ldr	r1, [r7, #0]
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f7ff ffe3 	bl	8000650 <compute_uart_bd>
 800068a:	4603      	mov	r3, r0
 800068c:	461a      	mov	r2, r3
 800068e:	4b03      	ldr	r3, [pc, #12]	; (800069c <uart_set_baudrate+0x24>)
 8000690:	609a      	str	r2, [r3, #8]
}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40004400 	.word	0x40004400

080006a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006a0:	480d      	ldr	r0, [pc, #52]	; (80006d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006a2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a8:	480c      	ldr	r0, [pc, #48]	; (80006dc <LoopForever+0x6>)
  ldr r1, =_edata
 80006aa:	490d      	ldr	r1, [pc, #52]	; (80006e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006ac:	4a0d      	ldr	r2, [pc, #52]	; (80006e4 <LoopForever+0xe>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b0:	e002      	b.n	80006b8 <LoopCopyDataInit>

080006b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b6:	3304      	adds	r3, #4

080006b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006bc:	d3f9      	bcc.n	80006b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006be:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c0:	4c0a      	ldr	r4, [pc, #40]	; (80006ec <LoopForever+0x16>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c4:	e001      	b.n	80006ca <LoopFillZerobss>

080006c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c8:	3204      	adds	r2, #4

080006ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006cc:	d3fb      	bcc.n	80006c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006ce:	f000 f817 	bl	8000700 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006d2:	f7ff fe85 	bl	80003e0 <main>

080006d6 <LoopForever>:

LoopForever:
    b LoopForever
 80006d6:	e7fe      	b.n	80006d6 <LoopForever>
  ldr   r0, =_estack
 80006d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80006e4:	080016fc 	.word	0x080016fc
  ldr r2, =_sbss
 80006e8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80006ec:	200000a0 	.word	0x200000a0

080006f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f0:	e7fe      	b.n	80006f0 <ADC_IRQHandler>
	...

080006f4 <__errno>:
 80006f4:	4b01      	ldr	r3, [pc, #4]	; (80006fc <__errno+0x8>)
 80006f6:	6818      	ldr	r0, [r3, #0]
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	20000000 	.word	0x20000000

08000700 <__libc_init_array>:
 8000700:	b570      	push	{r4, r5, r6, lr}
 8000702:	4d0d      	ldr	r5, [pc, #52]	; (8000738 <__libc_init_array+0x38>)
 8000704:	4c0d      	ldr	r4, [pc, #52]	; (800073c <__libc_init_array+0x3c>)
 8000706:	1b64      	subs	r4, r4, r5
 8000708:	10a4      	asrs	r4, r4, #2
 800070a:	2600      	movs	r6, #0
 800070c:	42a6      	cmp	r6, r4
 800070e:	d109      	bne.n	8000724 <__libc_init_array+0x24>
 8000710:	4d0b      	ldr	r5, [pc, #44]	; (8000740 <__libc_init_array+0x40>)
 8000712:	4c0c      	ldr	r4, [pc, #48]	; (8000744 <__libc_init_array+0x44>)
 8000714:	f000 ff76 	bl	8001604 <_init>
 8000718:	1b64      	subs	r4, r4, r5
 800071a:	10a4      	asrs	r4, r4, #2
 800071c:	2600      	movs	r6, #0
 800071e:	42a6      	cmp	r6, r4
 8000720:	d105      	bne.n	800072e <__libc_init_array+0x2e>
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f855 3b04 	ldr.w	r3, [r5], #4
 8000728:	4798      	blx	r3
 800072a:	3601      	adds	r6, #1
 800072c:	e7ee      	b.n	800070c <__libc_init_array+0xc>
 800072e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000732:	4798      	blx	r3
 8000734:	3601      	adds	r6, #1
 8000736:	e7f2      	b.n	800071e <__libc_init_array+0x1e>
 8000738:	080016f4 	.word	0x080016f4
 800073c:	080016f4 	.word	0x080016f4
 8000740:	080016f4 	.word	0x080016f4
 8000744:	080016f8 	.word	0x080016f8

08000748 <memset>:
 8000748:	4402      	add	r2, r0
 800074a:	4603      	mov	r3, r0
 800074c:	4293      	cmp	r3, r2
 800074e:	d100      	bne.n	8000752 <memset+0xa>
 8000750:	4770      	bx	lr
 8000752:	f803 1b01 	strb.w	r1, [r3], #1
 8000756:	e7f9      	b.n	800074c <memset+0x4>

08000758 <iprintf>:
 8000758:	b40f      	push	{r0, r1, r2, r3}
 800075a:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <iprintf+0x2c>)
 800075c:	b513      	push	{r0, r1, r4, lr}
 800075e:	681c      	ldr	r4, [r3, #0]
 8000760:	b124      	cbz	r4, 800076c <iprintf+0x14>
 8000762:	69a3      	ldr	r3, [r4, #24]
 8000764:	b913      	cbnz	r3, 800076c <iprintf+0x14>
 8000766:	4620      	mov	r0, r4
 8000768:	f000 f866 	bl	8000838 <__sinit>
 800076c:	ab05      	add	r3, sp, #20
 800076e:	9a04      	ldr	r2, [sp, #16]
 8000770:	68a1      	ldr	r1, [r4, #8]
 8000772:	9301      	str	r3, [sp, #4]
 8000774:	4620      	mov	r0, r4
 8000776:	f000 f983 	bl	8000a80 <_vfiprintf_r>
 800077a:	b002      	add	sp, #8
 800077c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000780:	b004      	add	sp, #16
 8000782:	4770      	bx	lr
 8000784:	20000000 	.word	0x20000000

08000788 <std>:
 8000788:	2300      	movs	r3, #0
 800078a:	b510      	push	{r4, lr}
 800078c:	4604      	mov	r4, r0
 800078e:	e9c0 3300 	strd	r3, r3, [r0]
 8000792:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000796:	6083      	str	r3, [r0, #8]
 8000798:	8181      	strh	r1, [r0, #12]
 800079a:	6643      	str	r3, [r0, #100]	; 0x64
 800079c:	81c2      	strh	r2, [r0, #14]
 800079e:	6183      	str	r3, [r0, #24]
 80007a0:	4619      	mov	r1, r3
 80007a2:	2208      	movs	r2, #8
 80007a4:	305c      	adds	r0, #92	; 0x5c
 80007a6:	f7ff ffcf 	bl	8000748 <memset>
 80007aa:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <std+0x38>)
 80007ac:	6263      	str	r3, [r4, #36]	; 0x24
 80007ae:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <std+0x3c>)
 80007b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80007b2:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <std+0x40>)
 80007b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80007b6:	4b05      	ldr	r3, [pc, #20]	; (80007cc <std+0x44>)
 80007b8:	6224      	str	r4, [r4, #32]
 80007ba:	6323      	str	r3, [r4, #48]	; 0x30
 80007bc:	bd10      	pop	{r4, pc}
 80007be:	bf00      	nop
 80007c0:	08001029 	.word	0x08001029
 80007c4:	0800104b 	.word	0x0800104b
 80007c8:	08001083 	.word	0x08001083
 80007cc:	080010a7 	.word	0x080010a7

080007d0 <_cleanup_r>:
 80007d0:	4901      	ldr	r1, [pc, #4]	; (80007d8 <_cleanup_r+0x8>)
 80007d2:	f000 b8af 	b.w	8000934 <_fwalk_reent>
 80007d6:	bf00      	nop
 80007d8:	08001381 	.word	0x08001381

080007dc <__sfmoreglue>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	1e4a      	subs	r2, r1, #1
 80007e0:	2568      	movs	r5, #104	; 0x68
 80007e2:	4355      	muls	r5, r2
 80007e4:	460e      	mov	r6, r1
 80007e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80007ea:	f000 f8c5 	bl	8000978 <_malloc_r>
 80007ee:	4604      	mov	r4, r0
 80007f0:	b140      	cbz	r0, 8000804 <__sfmoreglue+0x28>
 80007f2:	2100      	movs	r1, #0
 80007f4:	e9c0 1600 	strd	r1, r6, [r0]
 80007f8:	300c      	adds	r0, #12
 80007fa:	60a0      	str	r0, [r4, #8]
 80007fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000800:	f7ff ffa2 	bl	8000748 <memset>
 8000804:	4620      	mov	r0, r4
 8000806:	bd70      	pop	{r4, r5, r6, pc}

08000808 <__sfp_lock_acquire>:
 8000808:	4801      	ldr	r0, [pc, #4]	; (8000810 <__sfp_lock_acquire+0x8>)
 800080a:	f000 b8b3 	b.w	8000974 <__retarget_lock_acquire_recursive>
 800080e:	bf00      	nop
 8000810:	20000098 	.word	0x20000098

08000814 <__sfp_lock_release>:
 8000814:	4801      	ldr	r0, [pc, #4]	; (800081c <__sfp_lock_release+0x8>)
 8000816:	f000 b8ae 	b.w	8000976 <__retarget_lock_release_recursive>
 800081a:	bf00      	nop
 800081c:	20000098 	.word	0x20000098

08000820 <__sinit_lock_acquire>:
 8000820:	4801      	ldr	r0, [pc, #4]	; (8000828 <__sinit_lock_acquire+0x8>)
 8000822:	f000 b8a7 	b.w	8000974 <__retarget_lock_acquire_recursive>
 8000826:	bf00      	nop
 8000828:	20000093 	.word	0x20000093

0800082c <__sinit_lock_release>:
 800082c:	4801      	ldr	r0, [pc, #4]	; (8000834 <__sinit_lock_release+0x8>)
 800082e:	f000 b8a2 	b.w	8000976 <__retarget_lock_release_recursive>
 8000832:	bf00      	nop
 8000834:	20000093 	.word	0x20000093

08000838 <__sinit>:
 8000838:	b510      	push	{r4, lr}
 800083a:	4604      	mov	r4, r0
 800083c:	f7ff fff0 	bl	8000820 <__sinit_lock_acquire>
 8000840:	69a3      	ldr	r3, [r4, #24]
 8000842:	b11b      	cbz	r3, 800084c <__sinit+0x14>
 8000844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000848:	f7ff bff0 	b.w	800082c <__sinit_lock_release>
 800084c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000850:	6523      	str	r3, [r4, #80]	; 0x50
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <__sinit+0x68>)
 8000854:	4a13      	ldr	r2, [pc, #76]	; (80008a4 <__sinit+0x6c>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	62a2      	str	r2, [r4, #40]	; 0x28
 800085a:	42a3      	cmp	r3, r4
 800085c:	bf04      	itt	eq
 800085e:	2301      	moveq	r3, #1
 8000860:	61a3      	streq	r3, [r4, #24]
 8000862:	4620      	mov	r0, r4
 8000864:	f000 f820 	bl	80008a8 <__sfp>
 8000868:	6060      	str	r0, [r4, #4]
 800086a:	4620      	mov	r0, r4
 800086c:	f000 f81c 	bl	80008a8 <__sfp>
 8000870:	60a0      	str	r0, [r4, #8]
 8000872:	4620      	mov	r0, r4
 8000874:	f000 f818 	bl	80008a8 <__sfp>
 8000878:	2200      	movs	r2, #0
 800087a:	60e0      	str	r0, [r4, #12]
 800087c:	2104      	movs	r1, #4
 800087e:	6860      	ldr	r0, [r4, #4]
 8000880:	f7ff ff82 	bl	8000788 <std>
 8000884:	68a0      	ldr	r0, [r4, #8]
 8000886:	2201      	movs	r2, #1
 8000888:	2109      	movs	r1, #9
 800088a:	f7ff ff7d 	bl	8000788 <std>
 800088e:	68e0      	ldr	r0, [r4, #12]
 8000890:	2202      	movs	r2, #2
 8000892:	2112      	movs	r1, #18
 8000894:	f7ff ff78 	bl	8000788 <std>
 8000898:	2301      	movs	r3, #1
 800089a:	61a3      	str	r3, [r4, #24]
 800089c:	e7d2      	b.n	8000844 <__sinit+0xc>
 800089e:	bf00      	nop
 80008a0:	0800165c 	.word	0x0800165c
 80008a4:	080007d1 	.word	0x080007d1

080008a8 <__sfp>:
 80008a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008aa:	4607      	mov	r7, r0
 80008ac:	f7ff ffac 	bl	8000808 <__sfp_lock_acquire>
 80008b0:	4b1e      	ldr	r3, [pc, #120]	; (800092c <__sfp+0x84>)
 80008b2:	681e      	ldr	r6, [r3, #0]
 80008b4:	69b3      	ldr	r3, [r6, #24]
 80008b6:	b913      	cbnz	r3, 80008be <__sfp+0x16>
 80008b8:	4630      	mov	r0, r6
 80008ba:	f7ff ffbd 	bl	8000838 <__sinit>
 80008be:	3648      	adds	r6, #72	; 0x48
 80008c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80008c4:	3b01      	subs	r3, #1
 80008c6:	d503      	bpl.n	80008d0 <__sfp+0x28>
 80008c8:	6833      	ldr	r3, [r6, #0]
 80008ca:	b30b      	cbz	r3, 8000910 <__sfp+0x68>
 80008cc:	6836      	ldr	r6, [r6, #0]
 80008ce:	e7f7      	b.n	80008c0 <__sfp+0x18>
 80008d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80008d4:	b9d5      	cbnz	r5, 800090c <__sfp+0x64>
 80008d6:	4b16      	ldr	r3, [pc, #88]	; (8000930 <__sfp+0x88>)
 80008d8:	60e3      	str	r3, [r4, #12]
 80008da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80008de:	6665      	str	r5, [r4, #100]	; 0x64
 80008e0:	f000 f847 	bl	8000972 <__retarget_lock_init_recursive>
 80008e4:	f7ff ff96 	bl	8000814 <__sfp_lock_release>
 80008e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80008ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80008f0:	6025      	str	r5, [r4, #0]
 80008f2:	61a5      	str	r5, [r4, #24]
 80008f4:	2208      	movs	r2, #8
 80008f6:	4629      	mov	r1, r5
 80008f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80008fc:	f7ff ff24 	bl	8000748 <memset>
 8000900:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000904:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000908:	4620      	mov	r0, r4
 800090a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800090c:	3468      	adds	r4, #104	; 0x68
 800090e:	e7d9      	b.n	80008c4 <__sfp+0x1c>
 8000910:	2104      	movs	r1, #4
 8000912:	4638      	mov	r0, r7
 8000914:	f7ff ff62 	bl	80007dc <__sfmoreglue>
 8000918:	4604      	mov	r4, r0
 800091a:	6030      	str	r0, [r6, #0]
 800091c:	2800      	cmp	r0, #0
 800091e:	d1d5      	bne.n	80008cc <__sfp+0x24>
 8000920:	f7ff ff78 	bl	8000814 <__sfp_lock_release>
 8000924:	230c      	movs	r3, #12
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	e7ee      	b.n	8000908 <__sfp+0x60>
 800092a:	bf00      	nop
 800092c:	0800165c 	.word	0x0800165c
 8000930:	ffff0001 	.word	0xffff0001

08000934 <_fwalk_reent>:
 8000934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000938:	4606      	mov	r6, r0
 800093a:	4688      	mov	r8, r1
 800093c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000940:	2700      	movs	r7, #0
 8000942:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000946:	f1b9 0901 	subs.w	r9, r9, #1
 800094a:	d505      	bpl.n	8000958 <_fwalk_reent+0x24>
 800094c:	6824      	ldr	r4, [r4, #0]
 800094e:	2c00      	cmp	r4, #0
 8000950:	d1f7      	bne.n	8000942 <_fwalk_reent+0xe>
 8000952:	4638      	mov	r0, r7
 8000954:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000958:	89ab      	ldrh	r3, [r5, #12]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d907      	bls.n	800096e <_fwalk_reent+0x3a>
 800095e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000962:	3301      	adds	r3, #1
 8000964:	d003      	beq.n	800096e <_fwalk_reent+0x3a>
 8000966:	4629      	mov	r1, r5
 8000968:	4630      	mov	r0, r6
 800096a:	47c0      	blx	r8
 800096c:	4307      	orrs	r7, r0
 800096e:	3568      	adds	r5, #104	; 0x68
 8000970:	e7e9      	b.n	8000946 <_fwalk_reent+0x12>

08000972 <__retarget_lock_init_recursive>:
 8000972:	4770      	bx	lr

08000974 <__retarget_lock_acquire_recursive>:
 8000974:	4770      	bx	lr

08000976 <__retarget_lock_release_recursive>:
 8000976:	4770      	bx	lr

08000978 <_malloc_r>:
 8000978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800097a:	1ccd      	adds	r5, r1, #3
 800097c:	f025 0503 	bic.w	r5, r5, #3
 8000980:	3508      	adds	r5, #8
 8000982:	2d0c      	cmp	r5, #12
 8000984:	bf38      	it	cc
 8000986:	250c      	movcc	r5, #12
 8000988:	2d00      	cmp	r5, #0
 800098a:	4606      	mov	r6, r0
 800098c:	db01      	blt.n	8000992 <_malloc_r+0x1a>
 800098e:	42a9      	cmp	r1, r5
 8000990:	d903      	bls.n	800099a <_malloc_r+0x22>
 8000992:	230c      	movs	r3, #12
 8000994:	6033      	str	r3, [r6, #0]
 8000996:	2000      	movs	r0, #0
 8000998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800099a:	f000 fda3 	bl	80014e4 <__malloc_lock>
 800099e:	4921      	ldr	r1, [pc, #132]	; (8000a24 <_malloc_r+0xac>)
 80009a0:	680a      	ldr	r2, [r1, #0]
 80009a2:	4614      	mov	r4, r2
 80009a4:	b99c      	cbnz	r4, 80009ce <_malloc_r+0x56>
 80009a6:	4f20      	ldr	r7, [pc, #128]	; (8000a28 <_malloc_r+0xb0>)
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	b923      	cbnz	r3, 80009b6 <_malloc_r+0x3e>
 80009ac:	4621      	mov	r1, r4
 80009ae:	4630      	mov	r0, r6
 80009b0:	f000 fb2a 	bl	8001008 <_sbrk_r>
 80009b4:	6038      	str	r0, [r7, #0]
 80009b6:	4629      	mov	r1, r5
 80009b8:	4630      	mov	r0, r6
 80009ba:	f000 fb25 	bl	8001008 <_sbrk_r>
 80009be:	1c43      	adds	r3, r0, #1
 80009c0:	d123      	bne.n	8000a0a <_malloc_r+0x92>
 80009c2:	230c      	movs	r3, #12
 80009c4:	6033      	str	r3, [r6, #0]
 80009c6:	4630      	mov	r0, r6
 80009c8:	f000 fd92 	bl	80014f0 <__malloc_unlock>
 80009cc:	e7e3      	b.n	8000996 <_malloc_r+0x1e>
 80009ce:	6823      	ldr	r3, [r4, #0]
 80009d0:	1b5b      	subs	r3, r3, r5
 80009d2:	d417      	bmi.n	8000a04 <_malloc_r+0x8c>
 80009d4:	2b0b      	cmp	r3, #11
 80009d6:	d903      	bls.n	80009e0 <_malloc_r+0x68>
 80009d8:	6023      	str	r3, [r4, #0]
 80009da:	441c      	add	r4, r3
 80009dc:	6025      	str	r5, [r4, #0]
 80009de:	e004      	b.n	80009ea <_malloc_r+0x72>
 80009e0:	6863      	ldr	r3, [r4, #4]
 80009e2:	42a2      	cmp	r2, r4
 80009e4:	bf0c      	ite	eq
 80009e6:	600b      	streq	r3, [r1, #0]
 80009e8:	6053      	strne	r3, [r2, #4]
 80009ea:	4630      	mov	r0, r6
 80009ec:	f000 fd80 	bl	80014f0 <__malloc_unlock>
 80009f0:	f104 000b 	add.w	r0, r4, #11
 80009f4:	1d23      	adds	r3, r4, #4
 80009f6:	f020 0007 	bic.w	r0, r0, #7
 80009fa:	1ac2      	subs	r2, r0, r3
 80009fc:	d0cc      	beq.n	8000998 <_malloc_r+0x20>
 80009fe:	1a1b      	subs	r3, r3, r0
 8000a00:	50a3      	str	r3, [r4, r2]
 8000a02:	e7c9      	b.n	8000998 <_malloc_r+0x20>
 8000a04:	4622      	mov	r2, r4
 8000a06:	6864      	ldr	r4, [r4, #4]
 8000a08:	e7cc      	b.n	80009a4 <_malloc_r+0x2c>
 8000a0a:	1cc4      	adds	r4, r0, #3
 8000a0c:	f024 0403 	bic.w	r4, r4, #3
 8000a10:	42a0      	cmp	r0, r4
 8000a12:	d0e3      	beq.n	80009dc <_malloc_r+0x64>
 8000a14:	1a21      	subs	r1, r4, r0
 8000a16:	4630      	mov	r0, r6
 8000a18:	f000 faf6 	bl	8001008 <_sbrk_r>
 8000a1c:	3001      	adds	r0, #1
 8000a1e:	d1dd      	bne.n	80009dc <_malloc_r+0x64>
 8000a20:	e7cf      	b.n	80009c2 <_malloc_r+0x4a>
 8000a22:	bf00      	nop
 8000a24:	20000084 	.word	0x20000084
 8000a28:	20000088 	.word	0x20000088

08000a2c <__sfputc_r>:
 8000a2c:	6893      	ldr	r3, [r2, #8]
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	b410      	push	{r4}
 8000a34:	6093      	str	r3, [r2, #8]
 8000a36:	da08      	bge.n	8000a4a <__sfputc_r+0x1e>
 8000a38:	6994      	ldr	r4, [r2, #24]
 8000a3a:	42a3      	cmp	r3, r4
 8000a3c:	db01      	blt.n	8000a42 <__sfputc_r+0x16>
 8000a3e:	290a      	cmp	r1, #10
 8000a40:	d103      	bne.n	8000a4a <__sfputc_r+0x1e>
 8000a42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a46:	f000 bb33 	b.w	80010b0 <__swbuf_r>
 8000a4a:	6813      	ldr	r3, [r2, #0]
 8000a4c:	1c58      	adds	r0, r3, #1
 8000a4e:	6010      	str	r0, [r2, #0]
 8000a50:	7019      	strb	r1, [r3, #0]
 8000a52:	4608      	mov	r0, r1
 8000a54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <__sfputs_r>:
 8000a5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a5c:	4606      	mov	r6, r0
 8000a5e:	460f      	mov	r7, r1
 8000a60:	4614      	mov	r4, r2
 8000a62:	18d5      	adds	r5, r2, r3
 8000a64:	42ac      	cmp	r4, r5
 8000a66:	d101      	bne.n	8000a6c <__sfputs_r+0x12>
 8000a68:	2000      	movs	r0, #0
 8000a6a:	e007      	b.n	8000a7c <__sfputs_r+0x22>
 8000a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a70:	463a      	mov	r2, r7
 8000a72:	4630      	mov	r0, r6
 8000a74:	f7ff ffda 	bl	8000a2c <__sfputc_r>
 8000a78:	1c43      	adds	r3, r0, #1
 8000a7a:	d1f3      	bne.n	8000a64 <__sfputs_r+0xa>
 8000a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000a80 <_vfiprintf_r>:
 8000a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a84:	460d      	mov	r5, r1
 8000a86:	b09d      	sub	sp, #116	; 0x74
 8000a88:	4614      	mov	r4, r2
 8000a8a:	4698      	mov	r8, r3
 8000a8c:	4606      	mov	r6, r0
 8000a8e:	b118      	cbz	r0, 8000a98 <_vfiprintf_r+0x18>
 8000a90:	6983      	ldr	r3, [r0, #24]
 8000a92:	b90b      	cbnz	r3, 8000a98 <_vfiprintf_r+0x18>
 8000a94:	f7ff fed0 	bl	8000838 <__sinit>
 8000a98:	4b89      	ldr	r3, [pc, #548]	; (8000cc0 <_vfiprintf_r+0x240>)
 8000a9a:	429d      	cmp	r5, r3
 8000a9c:	d11b      	bne.n	8000ad6 <_vfiprintf_r+0x56>
 8000a9e:	6875      	ldr	r5, [r6, #4]
 8000aa0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000aa2:	07d9      	lsls	r1, r3, #31
 8000aa4:	d405      	bmi.n	8000ab2 <_vfiprintf_r+0x32>
 8000aa6:	89ab      	ldrh	r3, [r5, #12]
 8000aa8:	059a      	lsls	r2, r3, #22
 8000aaa:	d402      	bmi.n	8000ab2 <_vfiprintf_r+0x32>
 8000aac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000aae:	f7ff ff61 	bl	8000974 <__retarget_lock_acquire_recursive>
 8000ab2:	89ab      	ldrh	r3, [r5, #12]
 8000ab4:	071b      	lsls	r3, r3, #28
 8000ab6:	d501      	bpl.n	8000abc <_vfiprintf_r+0x3c>
 8000ab8:	692b      	ldr	r3, [r5, #16]
 8000aba:	b9eb      	cbnz	r3, 8000af8 <_vfiprintf_r+0x78>
 8000abc:	4629      	mov	r1, r5
 8000abe:	4630      	mov	r0, r6
 8000ac0:	f000 fb5a 	bl	8001178 <__swsetup_r>
 8000ac4:	b1c0      	cbz	r0, 8000af8 <_vfiprintf_r+0x78>
 8000ac6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ac8:	07dc      	lsls	r4, r3, #31
 8000aca:	d50e      	bpl.n	8000aea <_vfiprintf_r+0x6a>
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad0:	b01d      	add	sp, #116	; 0x74
 8000ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ad6:	4b7b      	ldr	r3, [pc, #492]	; (8000cc4 <_vfiprintf_r+0x244>)
 8000ad8:	429d      	cmp	r5, r3
 8000ada:	d101      	bne.n	8000ae0 <_vfiprintf_r+0x60>
 8000adc:	68b5      	ldr	r5, [r6, #8]
 8000ade:	e7df      	b.n	8000aa0 <_vfiprintf_r+0x20>
 8000ae0:	4b79      	ldr	r3, [pc, #484]	; (8000cc8 <_vfiprintf_r+0x248>)
 8000ae2:	429d      	cmp	r5, r3
 8000ae4:	bf08      	it	eq
 8000ae6:	68f5      	ldreq	r5, [r6, #12]
 8000ae8:	e7da      	b.n	8000aa0 <_vfiprintf_r+0x20>
 8000aea:	89ab      	ldrh	r3, [r5, #12]
 8000aec:	0598      	lsls	r0, r3, #22
 8000aee:	d4ed      	bmi.n	8000acc <_vfiprintf_r+0x4c>
 8000af0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000af2:	f7ff ff40 	bl	8000976 <__retarget_lock_release_recursive>
 8000af6:	e7e9      	b.n	8000acc <_vfiprintf_r+0x4c>
 8000af8:	2300      	movs	r3, #0
 8000afa:	9309      	str	r3, [sp, #36]	; 0x24
 8000afc:	2320      	movs	r3, #32
 8000afe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000b02:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b06:	2330      	movs	r3, #48	; 0x30
 8000b08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000ccc <_vfiprintf_r+0x24c>
 8000b0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000b10:	f04f 0901 	mov.w	r9, #1
 8000b14:	4623      	mov	r3, r4
 8000b16:	469a      	mov	sl, r3
 8000b18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b1c:	b10a      	cbz	r2, 8000b22 <_vfiprintf_r+0xa2>
 8000b1e:	2a25      	cmp	r2, #37	; 0x25
 8000b20:	d1f9      	bne.n	8000b16 <_vfiprintf_r+0x96>
 8000b22:	ebba 0b04 	subs.w	fp, sl, r4
 8000b26:	d00b      	beq.n	8000b40 <_vfiprintf_r+0xc0>
 8000b28:	465b      	mov	r3, fp
 8000b2a:	4622      	mov	r2, r4
 8000b2c:	4629      	mov	r1, r5
 8000b2e:	4630      	mov	r0, r6
 8000b30:	f7ff ff93 	bl	8000a5a <__sfputs_r>
 8000b34:	3001      	adds	r0, #1
 8000b36:	f000 80aa 	beq.w	8000c8e <_vfiprintf_r+0x20e>
 8000b3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000b3c:	445a      	add	r2, fp
 8000b3e:	9209      	str	r2, [sp, #36]	; 0x24
 8000b40:	f89a 3000 	ldrb.w	r3, [sl]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	f000 80a2 	beq.w	8000c8e <_vfiprintf_r+0x20e>
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b54:	f10a 0a01 	add.w	sl, sl, #1
 8000b58:	9304      	str	r3, [sp, #16]
 8000b5a:	9307      	str	r3, [sp, #28]
 8000b5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000b60:	931a      	str	r3, [sp, #104]	; 0x68
 8000b62:	4654      	mov	r4, sl
 8000b64:	2205      	movs	r2, #5
 8000b66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b6a:	4858      	ldr	r0, [pc, #352]	; (8000ccc <_vfiprintf_r+0x24c>)
 8000b6c:	f7ff fb38 	bl	80001e0 <memchr>
 8000b70:	9a04      	ldr	r2, [sp, #16]
 8000b72:	b9d8      	cbnz	r0, 8000bac <_vfiprintf_r+0x12c>
 8000b74:	06d1      	lsls	r1, r2, #27
 8000b76:	bf44      	itt	mi
 8000b78:	2320      	movmi	r3, #32
 8000b7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b7e:	0713      	lsls	r3, r2, #28
 8000b80:	bf44      	itt	mi
 8000b82:	232b      	movmi	r3, #43	; 0x2b
 8000b84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b88:	f89a 3000 	ldrb.w	r3, [sl]
 8000b8c:	2b2a      	cmp	r3, #42	; 0x2a
 8000b8e:	d015      	beq.n	8000bbc <_vfiprintf_r+0x13c>
 8000b90:	9a07      	ldr	r2, [sp, #28]
 8000b92:	4654      	mov	r4, sl
 8000b94:	2000      	movs	r0, #0
 8000b96:	f04f 0c0a 	mov.w	ip, #10
 8000b9a:	4621      	mov	r1, r4
 8000b9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ba0:	3b30      	subs	r3, #48	; 0x30
 8000ba2:	2b09      	cmp	r3, #9
 8000ba4:	d94e      	bls.n	8000c44 <_vfiprintf_r+0x1c4>
 8000ba6:	b1b0      	cbz	r0, 8000bd6 <_vfiprintf_r+0x156>
 8000ba8:	9207      	str	r2, [sp, #28]
 8000baa:	e014      	b.n	8000bd6 <_vfiprintf_r+0x156>
 8000bac:	eba0 0308 	sub.w	r3, r0, r8
 8000bb0:	fa09 f303 	lsl.w	r3, r9, r3
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	9304      	str	r3, [sp, #16]
 8000bb8:	46a2      	mov	sl, r4
 8000bba:	e7d2      	b.n	8000b62 <_vfiprintf_r+0xe2>
 8000bbc:	9b03      	ldr	r3, [sp, #12]
 8000bbe:	1d19      	adds	r1, r3, #4
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	9103      	str	r1, [sp, #12]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	bfbb      	ittet	lt
 8000bc8:	425b      	neglt	r3, r3
 8000bca:	f042 0202 	orrlt.w	r2, r2, #2
 8000bce:	9307      	strge	r3, [sp, #28]
 8000bd0:	9307      	strlt	r3, [sp, #28]
 8000bd2:	bfb8      	it	lt
 8000bd4:	9204      	strlt	r2, [sp, #16]
 8000bd6:	7823      	ldrb	r3, [r4, #0]
 8000bd8:	2b2e      	cmp	r3, #46	; 0x2e
 8000bda:	d10c      	bne.n	8000bf6 <_vfiprintf_r+0x176>
 8000bdc:	7863      	ldrb	r3, [r4, #1]
 8000bde:	2b2a      	cmp	r3, #42	; 0x2a
 8000be0:	d135      	bne.n	8000c4e <_vfiprintf_r+0x1ce>
 8000be2:	9b03      	ldr	r3, [sp, #12]
 8000be4:	1d1a      	adds	r2, r3, #4
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	9203      	str	r2, [sp, #12]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	bfb8      	it	lt
 8000bee:	f04f 33ff 	movlt.w	r3, #4294967295
 8000bf2:	3402      	adds	r4, #2
 8000bf4:	9305      	str	r3, [sp, #20]
 8000bf6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000cdc <_vfiprintf_r+0x25c>
 8000bfa:	7821      	ldrb	r1, [r4, #0]
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	4650      	mov	r0, sl
 8000c00:	f7ff faee 	bl	80001e0 <memchr>
 8000c04:	b140      	cbz	r0, 8000c18 <_vfiprintf_r+0x198>
 8000c06:	2340      	movs	r3, #64	; 0x40
 8000c08:	eba0 000a 	sub.w	r0, r0, sl
 8000c0c:	fa03 f000 	lsl.w	r0, r3, r0
 8000c10:	9b04      	ldr	r3, [sp, #16]
 8000c12:	4303      	orrs	r3, r0
 8000c14:	3401      	adds	r4, #1
 8000c16:	9304      	str	r3, [sp, #16]
 8000c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c1c:	482c      	ldr	r0, [pc, #176]	; (8000cd0 <_vfiprintf_r+0x250>)
 8000c1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000c22:	2206      	movs	r2, #6
 8000c24:	f7ff fadc 	bl	80001e0 <memchr>
 8000c28:	2800      	cmp	r0, #0
 8000c2a:	d03f      	beq.n	8000cac <_vfiprintf_r+0x22c>
 8000c2c:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <_vfiprintf_r+0x254>)
 8000c2e:	bb1b      	cbnz	r3, 8000c78 <_vfiprintf_r+0x1f8>
 8000c30:	9b03      	ldr	r3, [sp, #12]
 8000c32:	3307      	adds	r3, #7
 8000c34:	f023 0307 	bic.w	r3, r3, #7
 8000c38:	3308      	adds	r3, #8
 8000c3a:	9303      	str	r3, [sp, #12]
 8000c3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c3e:	443b      	add	r3, r7
 8000c40:	9309      	str	r3, [sp, #36]	; 0x24
 8000c42:	e767      	b.n	8000b14 <_vfiprintf_r+0x94>
 8000c44:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c48:	460c      	mov	r4, r1
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	e7a5      	b.n	8000b9a <_vfiprintf_r+0x11a>
 8000c4e:	2300      	movs	r3, #0
 8000c50:	3401      	adds	r4, #1
 8000c52:	9305      	str	r3, [sp, #20]
 8000c54:	4619      	mov	r1, r3
 8000c56:	f04f 0c0a 	mov.w	ip, #10
 8000c5a:	4620      	mov	r0, r4
 8000c5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c60:	3a30      	subs	r2, #48	; 0x30
 8000c62:	2a09      	cmp	r2, #9
 8000c64:	d903      	bls.n	8000c6e <_vfiprintf_r+0x1ee>
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d0c5      	beq.n	8000bf6 <_vfiprintf_r+0x176>
 8000c6a:	9105      	str	r1, [sp, #20]
 8000c6c:	e7c3      	b.n	8000bf6 <_vfiprintf_r+0x176>
 8000c6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c72:	4604      	mov	r4, r0
 8000c74:	2301      	movs	r3, #1
 8000c76:	e7f0      	b.n	8000c5a <_vfiprintf_r+0x1da>
 8000c78:	ab03      	add	r3, sp, #12
 8000c7a:	9300      	str	r3, [sp, #0]
 8000c7c:	462a      	mov	r2, r5
 8000c7e:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <_vfiprintf_r+0x258>)
 8000c80:	a904      	add	r1, sp, #16
 8000c82:	4630      	mov	r0, r6
 8000c84:	f3af 8000 	nop.w
 8000c88:	4607      	mov	r7, r0
 8000c8a:	1c78      	adds	r0, r7, #1
 8000c8c:	d1d6      	bne.n	8000c3c <_vfiprintf_r+0x1bc>
 8000c8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c90:	07d9      	lsls	r1, r3, #31
 8000c92:	d405      	bmi.n	8000ca0 <_vfiprintf_r+0x220>
 8000c94:	89ab      	ldrh	r3, [r5, #12]
 8000c96:	059a      	lsls	r2, r3, #22
 8000c98:	d402      	bmi.n	8000ca0 <_vfiprintf_r+0x220>
 8000c9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c9c:	f7ff fe6b 	bl	8000976 <__retarget_lock_release_recursive>
 8000ca0:	89ab      	ldrh	r3, [r5, #12]
 8000ca2:	065b      	lsls	r3, r3, #25
 8000ca4:	f53f af12 	bmi.w	8000acc <_vfiprintf_r+0x4c>
 8000ca8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000caa:	e711      	b.n	8000ad0 <_vfiprintf_r+0x50>
 8000cac:	ab03      	add	r3, sp, #12
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	462a      	mov	r2, r5
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <_vfiprintf_r+0x258>)
 8000cb4:	a904      	add	r1, sp, #16
 8000cb6:	4630      	mov	r0, r6
 8000cb8:	f000 f880 	bl	8000dbc <_printf_i>
 8000cbc:	e7e4      	b.n	8000c88 <_vfiprintf_r+0x208>
 8000cbe:	bf00      	nop
 8000cc0:	08001680 	.word	0x08001680
 8000cc4:	080016a0 	.word	0x080016a0
 8000cc8:	08001660 	.word	0x08001660
 8000ccc:	080016c0 	.word	0x080016c0
 8000cd0:	080016ca 	.word	0x080016ca
 8000cd4:	00000000 	.word	0x00000000
 8000cd8:	08000a5b 	.word	0x08000a5b
 8000cdc:	080016c6 	.word	0x080016c6

08000ce0 <_printf_common>:
 8000ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce4:	4616      	mov	r6, r2
 8000ce6:	4699      	mov	r9, r3
 8000ce8:	688a      	ldr	r2, [r1, #8]
 8000cea:	690b      	ldr	r3, [r1, #16]
 8000cec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	bfb8      	it	lt
 8000cf4:	4613      	movlt	r3, r2
 8000cf6:	6033      	str	r3, [r6, #0]
 8000cf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000cfc:	4607      	mov	r7, r0
 8000cfe:	460c      	mov	r4, r1
 8000d00:	b10a      	cbz	r2, 8000d06 <_printf_common+0x26>
 8000d02:	3301      	adds	r3, #1
 8000d04:	6033      	str	r3, [r6, #0]
 8000d06:	6823      	ldr	r3, [r4, #0]
 8000d08:	0699      	lsls	r1, r3, #26
 8000d0a:	bf42      	ittt	mi
 8000d0c:	6833      	ldrmi	r3, [r6, #0]
 8000d0e:	3302      	addmi	r3, #2
 8000d10:	6033      	strmi	r3, [r6, #0]
 8000d12:	6825      	ldr	r5, [r4, #0]
 8000d14:	f015 0506 	ands.w	r5, r5, #6
 8000d18:	d106      	bne.n	8000d28 <_printf_common+0x48>
 8000d1a:	f104 0a19 	add.w	sl, r4, #25
 8000d1e:	68e3      	ldr	r3, [r4, #12]
 8000d20:	6832      	ldr	r2, [r6, #0]
 8000d22:	1a9b      	subs	r3, r3, r2
 8000d24:	42ab      	cmp	r3, r5
 8000d26:	dc26      	bgt.n	8000d76 <_printf_common+0x96>
 8000d28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000d2c:	1e13      	subs	r3, r2, #0
 8000d2e:	6822      	ldr	r2, [r4, #0]
 8000d30:	bf18      	it	ne
 8000d32:	2301      	movne	r3, #1
 8000d34:	0692      	lsls	r2, r2, #26
 8000d36:	d42b      	bmi.n	8000d90 <_printf_common+0xb0>
 8000d38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000d3c:	4649      	mov	r1, r9
 8000d3e:	4638      	mov	r0, r7
 8000d40:	47c0      	blx	r8
 8000d42:	3001      	adds	r0, #1
 8000d44:	d01e      	beq.n	8000d84 <_printf_common+0xa4>
 8000d46:	6823      	ldr	r3, [r4, #0]
 8000d48:	68e5      	ldr	r5, [r4, #12]
 8000d4a:	6832      	ldr	r2, [r6, #0]
 8000d4c:	f003 0306 	and.w	r3, r3, #6
 8000d50:	2b04      	cmp	r3, #4
 8000d52:	bf08      	it	eq
 8000d54:	1aad      	subeq	r5, r5, r2
 8000d56:	68a3      	ldr	r3, [r4, #8]
 8000d58:	6922      	ldr	r2, [r4, #16]
 8000d5a:	bf0c      	ite	eq
 8000d5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d60:	2500      	movne	r5, #0
 8000d62:	4293      	cmp	r3, r2
 8000d64:	bfc4      	itt	gt
 8000d66:	1a9b      	subgt	r3, r3, r2
 8000d68:	18ed      	addgt	r5, r5, r3
 8000d6a:	2600      	movs	r6, #0
 8000d6c:	341a      	adds	r4, #26
 8000d6e:	42b5      	cmp	r5, r6
 8000d70:	d11a      	bne.n	8000da8 <_printf_common+0xc8>
 8000d72:	2000      	movs	r0, #0
 8000d74:	e008      	b.n	8000d88 <_printf_common+0xa8>
 8000d76:	2301      	movs	r3, #1
 8000d78:	4652      	mov	r2, sl
 8000d7a:	4649      	mov	r1, r9
 8000d7c:	4638      	mov	r0, r7
 8000d7e:	47c0      	blx	r8
 8000d80:	3001      	adds	r0, #1
 8000d82:	d103      	bne.n	8000d8c <_printf_common+0xac>
 8000d84:	f04f 30ff 	mov.w	r0, #4294967295
 8000d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8c:	3501      	adds	r5, #1
 8000d8e:	e7c6      	b.n	8000d1e <_printf_common+0x3e>
 8000d90:	18e1      	adds	r1, r4, r3
 8000d92:	1c5a      	adds	r2, r3, #1
 8000d94:	2030      	movs	r0, #48	; 0x30
 8000d96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000d9a:	4422      	add	r2, r4
 8000d9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000da0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000da4:	3302      	adds	r3, #2
 8000da6:	e7c7      	b.n	8000d38 <_printf_common+0x58>
 8000da8:	2301      	movs	r3, #1
 8000daa:	4622      	mov	r2, r4
 8000dac:	4649      	mov	r1, r9
 8000dae:	4638      	mov	r0, r7
 8000db0:	47c0      	blx	r8
 8000db2:	3001      	adds	r0, #1
 8000db4:	d0e6      	beq.n	8000d84 <_printf_common+0xa4>
 8000db6:	3601      	adds	r6, #1
 8000db8:	e7d9      	b.n	8000d6e <_printf_common+0x8e>
	...

08000dbc <_printf_i>:
 8000dbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc0:	460c      	mov	r4, r1
 8000dc2:	4691      	mov	r9, r2
 8000dc4:	7e27      	ldrb	r7, [r4, #24]
 8000dc6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000dc8:	2f78      	cmp	r7, #120	; 0x78
 8000dca:	4680      	mov	r8, r0
 8000dcc:	469a      	mov	sl, r3
 8000dce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000dd2:	d807      	bhi.n	8000de4 <_printf_i+0x28>
 8000dd4:	2f62      	cmp	r7, #98	; 0x62
 8000dd6:	d80a      	bhi.n	8000dee <_printf_i+0x32>
 8000dd8:	2f00      	cmp	r7, #0
 8000dda:	f000 80d8 	beq.w	8000f8e <_printf_i+0x1d2>
 8000dde:	2f58      	cmp	r7, #88	; 0x58
 8000de0:	f000 80a3 	beq.w	8000f2a <_printf_i+0x16e>
 8000de4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000de8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000dec:	e03a      	b.n	8000e64 <_printf_i+0xa8>
 8000dee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000df2:	2b15      	cmp	r3, #21
 8000df4:	d8f6      	bhi.n	8000de4 <_printf_i+0x28>
 8000df6:	a001      	add	r0, pc, #4	; (adr r0, 8000dfc <_printf_i+0x40>)
 8000df8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8000dfc:	08000e55 	.word	0x08000e55
 8000e00:	08000e69 	.word	0x08000e69
 8000e04:	08000de5 	.word	0x08000de5
 8000e08:	08000de5 	.word	0x08000de5
 8000e0c:	08000de5 	.word	0x08000de5
 8000e10:	08000de5 	.word	0x08000de5
 8000e14:	08000e69 	.word	0x08000e69
 8000e18:	08000de5 	.word	0x08000de5
 8000e1c:	08000de5 	.word	0x08000de5
 8000e20:	08000de5 	.word	0x08000de5
 8000e24:	08000de5 	.word	0x08000de5
 8000e28:	08000f75 	.word	0x08000f75
 8000e2c:	08000e99 	.word	0x08000e99
 8000e30:	08000f57 	.word	0x08000f57
 8000e34:	08000de5 	.word	0x08000de5
 8000e38:	08000de5 	.word	0x08000de5
 8000e3c:	08000f97 	.word	0x08000f97
 8000e40:	08000de5 	.word	0x08000de5
 8000e44:	08000e99 	.word	0x08000e99
 8000e48:	08000de5 	.word	0x08000de5
 8000e4c:	08000de5 	.word	0x08000de5
 8000e50:	08000f5f 	.word	0x08000f5f
 8000e54:	680b      	ldr	r3, [r1, #0]
 8000e56:	1d1a      	adds	r2, r3, #4
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	600a      	str	r2, [r1, #0]
 8000e5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000e60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000e64:	2301      	movs	r3, #1
 8000e66:	e0a3      	b.n	8000fb0 <_printf_i+0x1f4>
 8000e68:	6825      	ldr	r5, [r4, #0]
 8000e6a:	6808      	ldr	r0, [r1, #0]
 8000e6c:	062e      	lsls	r6, r5, #24
 8000e6e:	f100 0304 	add.w	r3, r0, #4
 8000e72:	d50a      	bpl.n	8000e8a <_printf_i+0xce>
 8000e74:	6805      	ldr	r5, [r0, #0]
 8000e76:	600b      	str	r3, [r1, #0]
 8000e78:	2d00      	cmp	r5, #0
 8000e7a:	da03      	bge.n	8000e84 <_printf_i+0xc8>
 8000e7c:	232d      	movs	r3, #45	; 0x2d
 8000e7e:	426d      	negs	r5, r5
 8000e80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000e84:	485e      	ldr	r0, [pc, #376]	; (8001000 <_printf_i+0x244>)
 8000e86:	230a      	movs	r3, #10
 8000e88:	e019      	b.n	8000ebe <_printf_i+0x102>
 8000e8a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8000e8e:	6805      	ldr	r5, [r0, #0]
 8000e90:	600b      	str	r3, [r1, #0]
 8000e92:	bf18      	it	ne
 8000e94:	b22d      	sxthne	r5, r5
 8000e96:	e7ef      	b.n	8000e78 <_printf_i+0xbc>
 8000e98:	680b      	ldr	r3, [r1, #0]
 8000e9a:	6825      	ldr	r5, [r4, #0]
 8000e9c:	1d18      	adds	r0, r3, #4
 8000e9e:	6008      	str	r0, [r1, #0]
 8000ea0:	0628      	lsls	r0, r5, #24
 8000ea2:	d501      	bpl.n	8000ea8 <_printf_i+0xec>
 8000ea4:	681d      	ldr	r5, [r3, #0]
 8000ea6:	e002      	b.n	8000eae <_printf_i+0xf2>
 8000ea8:	0669      	lsls	r1, r5, #25
 8000eaa:	d5fb      	bpl.n	8000ea4 <_printf_i+0xe8>
 8000eac:	881d      	ldrh	r5, [r3, #0]
 8000eae:	4854      	ldr	r0, [pc, #336]	; (8001000 <_printf_i+0x244>)
 8000eb0:	2f6f      	cmp	r7, #111	; 0x6f
 8000eb2:	bf0c      	ite	eq
 8000eb4:	2308      	moveq	r3, #8
 8000eb6:	230a      	movne	r3, #10
 8000eb8:	2100      	movs	r1, #0
 8000eba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000ebe:	6866      	ldr	r6, [r4, #4]
 8000ec0:	60a6      	str	r6, [r4, #8]
 8000ec2:	2e00      	cmp	r6, #0
 8000ec4:	bfa2      	ittt	ge
 8000ec6:	6821      	ldrge	r1, [r4, #0]
 8000ec8:	f021 0104 	bicge.w	r1, r1, #4
 8000ecc:	6021      	strge	r1, [r4, #0]
 8000ece:	b90d      	cbnz	r5, 8000ed4 <_printf_i+0x118>
 8000ed0:	2e00      	cmp	r6, #0
 8000ed2:	d04d      	beq.n	8000f70 <_printf_i+0x1b4>
 8000ed4:	4616      	mov	r6, r2
 8000ed6:	fbb5 f1f3 	udiv	r1, r5, r3
 8000eda:	fb03 5711 	mls	r7, r3, r1, r5
 8000ede:	5dc7      	ldrb	r7, [r0, r7]
 8000ee0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000ee4:	462f      	mov	r7, r5
 8000ee6:	42bb      	cmp	r3, r7
 8000ee8:	460d      	mov	r5, r1
 8000eea:	d9f4      	bls.n	8000ed6 <_printf_i+0x11a>
 8000eec:	2b08      	cmp	r3, #8
 8000eee:	d10b      	bne.n	8000f08 <_printf_i+0x14c>
 8000ef0:	6823      	ldr	r3, [r4, #0]
 8000ef2:	07df      	lsls	r7, r3, #31
 8000ef4:	d508      	bpl.n	8000f08 <_printf_i+0x14c>
 8000ef6:	6923      	ldr	r3, [r4, #16]
 8000ef8:	6861      	ldr	r1, [r4, #4]
 8000efa:	4299      	cmp	r1, r3
 8000efc:	bfde      	ittt	le
 8000efe:	2330      	movle	r3, #48	; 0x30
 8000f00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000f04:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000f08:	1b92      	subs	r2, r2, r6
 8000f0a:	6122      	str	r2, [r4, #16]
 8000f0c:	f8cd a000 	str.w	sl, [sp]
 8000f10:	464b      	mov	r3, r9
 8000f12:	aa03      	add	r2, sp, #12
 8000f14:	4621      	mov	r1, r4
 8000f16:	4640      	mov	r0, r8
 8000f18:	f7ff fee2 	bl	8000ce0 <_printf_common>
 8000f1c:	3001      	adds	r0, #1
 8000f1e:	d14c      	bne.n	8000fba <_printf_i+0x1fe>
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	b004      	add	sp, #16
 8000f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f2a:	4835      	ldr	r0, [pc, #212]	; (8001000 <_printf_i+0x244>)
 8000f2c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000f30:	6823      	ldr	r3, [r4, #0]
 8000f32:	680e      	ldr	r6, [r1, #0]
 8000f34:	061f      	lsls	r7, r3, #24
 8000f36:	f856 5b04 	ldr.w	r5, [r6], #4
 8000f3a:	600e      	str	r6, [r1, #0]
 8000f3c:	d514      	bpl.n	8000f68 <_printf_i+0x1ac>
 8000f3e:	07d9      	lsls	r1, r3, #31
 8000f40:	bf44      	itt	mi
 8000f42:	f043 0320 	orrmi.w	r3, r3, #32
 8000f46:	6023      	strmi	r3, [r4, #0]
 8000f48:	b91d      	cbnz	r5, 8000f52 <_printf_i+0x196>
 8000f4a:	6823      	ldr	r3, [r4, #0]
 8000f4c:	f023 0320 	bic.w	r3, r3, #32
 8000f50:	6023      	str	r3, [r4, #0]
 8000f52:	2310      	movs	r3, #16
 8000f54:	e7b0      	b.n	8000eb8 <_printf_i+0xfc>
 8000f56:	6823      	ldr	r3, [r4, #0]
 8000f58:	f043 0320 	orr.w	r3, r3, #32
 8000f5c:	6023      	str	r3, [r4, #0]
 8000f5e:	2378      	movs	r3, #120	; 0x78
 8000f60:	4828      	ldr	r0, [pc, #160]	; (8001004 <_printf_i+0x248>)
 8000f62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000f66:	e7e3      	b.n	8000f30 <_printf_i+0x174>
 8000f68:	065e      	lsls	r6, r3, #25
 8000f6a:	bf48      	it	mi
 8000f6c:	b2ad      	uxthmi	r5, r5
 8000f6e:	e7e6      	b.n	8000f3e <_printf_i+0x182>
 8000f70:	4616      	mov	r6, r2
 8000f72:	e7bb      	b.n	8000eec <_printf_i+0x130>
 8000f74:	680b      	ldr	r3, [r1, #0]
 8000f76:	6826      	ldr	r6, [r4, #0]
 8000f78:	6960      	ldr	r0, [r4, #20]
 8000f7a:	1d1d      	adds	r5, r3, #4
 8000f7c:	600d      	str	r5, [r1, #0]
 8000f7e:	0635      	lsls	r5, r6, #24
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	d501      	bpl.n	8000f88 <_printf_i+0x1cc>
 8000f84:	6018      	str	r0, [r3, #0]
 8000f86:	e002      	b.n	8000f8e <_printf_i+0x1d2>
 8000f88:	0671      	lsls	r1, r6, #25
 8000f8a:	d5fb      	bpl.n	8000f84 <_printf_i+0x1c8>
 8000f8c:	8018      	strh	r0, [r3, #0]
 8000f8e:	2300      	movs	r3, #0
 8000f90:	6123      	str	r3, [r4, #16]
 8000f92:	4616      	mov	r6, r2
 8000f94:	e7ba      	b.n	8000f0c <_printf_i+0x150>
 8000f96:	680b      	ldr	r3, [r1, #0]
 8000f98:	1d1a      	adds	r2, r3, #4
 8000f9a:	600a      	str	r2, [r1, #0]
 8000f9c:	681e      	ldr	r6, [r3, #0]
 8000f9e:	6862      	ldr	r2, [r4, #4]
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4630      	mov	r0, r6
 8000fa4:	f7ff f91c 	bl	80001e0 <memchr>
 8000fa8:	b108      	cbz	r0, 8000fae <_printf_i+0x1f2>
 8000faa:	1b80      	subs	r0, r0, r6
 8000fac:	6060      	str	r0, [r4, #4]
 8000fae:	6863      	ldr	r3, [r4, #4]
 8000fb0:	6123      	str	r3, [r4, #16]
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000fb8:	e7a8      	b.n	8000f0c <_printf_i+0x150>
 8000fba:	6923      	ldr	r3, [r4, #16]
 8000fbc:	4632      	mov	r2, r6
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	4640      	mov	r0, r8
 8000fc2:	47d0      	blx	sl
 8000fc4:	3001      	adds	r0, #1
 8000fc6:	d0ab      	beq.n	8000f20 <_printf_i+0x164>
 8000fc8:	6823      	ldr	r3, [r4, #0]
 8000fca:	079b      	lsls	r3, r3, #30
 8000fcc:	d413      	bmi.n	8000ff6 <_printf_i+0x23a>
 8000fce:	68e0      	ldr	r0, [r4, #12]
 8000fd0:	9b03      	ldr	r3, [sp, #12]
 8000fd2:	4298      	cmp	r0, r3
 8000fd4:	bfb8      	it	lt
 8000fd6:	4618      	movlt	r0, r3
 8000fd8:	e7a4      	b.n	8000f24 <_printf_i+0x168>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	4632      	mov	r2, r6
 8000fde:	4649      	mov	r1, r9
 8000fe0:	4640      	mov	r0, r8
 8000fe2:	47d0      	blx	sl
 8000fe4:	3001      	adds	r0, #1
 8000fe6:	d09b      	beq.n	8000f20 <_printf_i+0x164>
 8000fe8:	3501      	adds	r5, #1
 8000fea:	68e3      	ldr	r3, [r4, #12]
 8000fec:	9903      	ldr	r1, [sp, #12]
 8000fee:	1a5b      	subs	r3, r3, r1
 8000ff0:	42ab      	cmp	r3, r5
 8000ff2:	dcf2      	bgt.n	8000fda <_printf_i+0x21e>
 8000ff4:	e7eb      	b.n	8000fce <_printf_i+0x212>
 8000ff6:	2500      	movs	r5, #0
 8000ff8:	f104 0619 	add.w	r6, r4, #25
 8000ffc:	e7f5      	b.n	8000fea <_printf_i+0x22e>
 8000ffe:	bf00      	nop
 8001000:	080016d1 	.word	0x080016d1
 8001004:	080016e2 	.word	0x080016e2

08001008 <_sbrk_r>:
 8001008:	b538      	push	{r3, r4, r5, lr}
 800100a:	4d06      	ldr	r5, [pc, #24]	; (8001024 <_sbrk_r+0x1c>)
 800100c:	2300      	movs	r3, #0
 800100e:	4604      	mov	r4, r0
 8001010:	4608      	mov	r0, r1
 8001012:	602b      	str	r3, [r5, #0]
 8001014:	f7ff fa78 	bl	8000508 <_sbrk>
 8001018:	1c43      	adds	r3, r0, #1
 800101a:	d102      	bne.n	8001022 <_sbrk_r+0x1a>
 800101c:	682b      	ldr	r3, [r5, #0]
 800101e:	b103      	cbz	r3, 8001022 <_sbrk_r+0x1a>
 8001020:	6023      	str	r3, [r4, #0]
 8001022:	bd38      	pop	{r3, r4, r5, pc}
 8001024:	2000009c 	.word	0x2000009c

08001028 <__sread>:
 8001028:	b510      	push	{r4, lr}
 800102a:	460c      	mov	r4, r1
 800102c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001030:	f000 fab4 	bl	800159c <_read_r>
 8001034:	2800      	cmp	r0, #0
 8001036:	bfab      	itete	ge
 8001038:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800103a:	89a3      	ldrhlt	r3, [r4, #12]
 800103c:	181b      	addge	r3, r3, r0
 800103e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001042:	bfac      	ite	ge
 8001044:	6563      	strge	r3, [r4, #84]	; 0x54
 8001046:	81a3      	strhlt	r3, [r4, #12]
 8001048:	bd10      	pop	{r4, pc}

0800104a <__swrite>:
 800104a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800104e:	461f      	mov	r7, r3
 8001050:	898b      	ldrh	r3, [r1, #12]
 8001052:	05db      	lsls	r3, r3, #23
 8001054:	4605      	mov	r5, r0
 8001056:	460c      	mov	r4, r1
 8001058:	4616      	mov	r6, r2
 800105a:	d505      	bpl.n	8001068 <__swrite+0x1e>
 800105c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001060:	2302      	movs	r3, #2
 8001062:	2200      	movs	r2, #0
 8001064:	f000 f9c8 	bl	80013f8 <_lseek_r>
 8001068:	89a3      	ldrh	r3, [r4, #12]
 800106a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800106e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001072:	81a3      	strh	r3, [r4, #12]
 8001074:	4632      	mov	r2, r6
 8001076:	463b      	mov	r3, r7
 8001078:	4628      	mov	r0, r5
 800107a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800107e:	f000 b869 	b.w	8001154 <_write_r>

08001082 <__sseek>:
 8001082:	b510      	push	{r4, lr}
 8001084:	460c      	mov	r4, r1
 8001086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800108a:	f000 f9b5 	bl	80013f8 <_lseek_r>
 800108e:	1c43      	adds	r3, r0, #1
 8001090:	89a3      	ldrh	r3, [r4, #12]
 8001092:	bf15      	itete	ne
 8001094:	6560      	strne	r0, [r4, #84]	; 0x54
 8001096:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800109a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800109e:	81a3      	strheq	r3, [r4, #12]
 80010a0:	bf18      	it	ne
 80010a2:	81a3      	strhne	r3, [r4, #12]
 80010a4:	bd10      	pop	{r4, pc}

080010a6 <__sclose>:
 80010a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010aa:	f000 b8d3 	b.w	8001254 <_close_r>
	...

080010b0 <__swbuf_r>:
 80010b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010b2:	460e      	mov	r6, r1
 80010b4:	4614      	mov	r4, r2
 80010b6:	4605      	mov	r5, r0
 80010b8:	b118      	cbz	r0, 80010c2 <__swbuf_r+0x12>
 80010ba:	6983      	ldr	r3, [r0, #24]
 80010bc:	b90b      	cbnz	r3, 80010c2 <__swbuf_r+0x12>
 80010be:	f7ff fbbb 	bl	8000838 <__sinit>
 80010c2:	4b21      	ldr	r3, [pc, #132]	; (8001148 <__swbuf_r+0x98>)
 80010c4:	429c      	cmp	r4, r3
 80010c6:	d12b      	bne.n	8001120 <__swbuf_r+0x70>
 80010c8:	686c      	ldr	r4, [r5, #4]
 80010ca:	69a3      	ldr	r3, [r4, #24]
 80010cc:	60a3      	str	r3, [r4, #8]
 80010ce:	89a3      	ldrh	r3, [r4, #12]
 80010d0:	071a      	lsls	r2, r3, #28
 80010d2:	d52f      	bpl.n	8001134 <__swbuf_r+0x84>
 80010d4:	6923      	ldr	r3, [r4, #16]
 80010d6:	b36b      	cbz	r3, 8001134 <__swbuf_r+0x84>
 80010d8:	6923      	ldr	r3, [r4, #16]
 80010da:	6820      	ldr	r0, [r4, #0]
 80010dc:	1ac0      	subs	r0, r0, r3
 80010de:	6963      	ldr	r3, [r4, #20]
 80010e0:	b2f6      	uxtb	r6, r6
 80010e2:	4283      	cmp	r3, r0
 80010e4:	4637      	mov	r7, r6
 80010e6:	dc04      	bgt.n	80010f2 <__swbuf_r+0x42>
 80010e8:	4621      	mov	r1, r4
 80010ea:	4628      	mov	r0, r5
 80010ec:	f000 f948 	bl	8001380 <_fflush_r>
 80010f0:	bb30      	cbnz	r0, 8001140 <__swbuf_r+0x90>
 80010f2:	68a3      	ldr	r3, [r4, #8]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	60a3      	str	r3, [r4, #8]
 80010f8:	6823      	ldr	r3, [r4, #0]
 80010fa:	1c5a      	adds	r2, r3, #1
 80010fc:	6022      	str	r2, [r4, #0]
 80010fe:	701e      	strb	r6, [r3, #0]
 8001100:	6963      	ldr	r3, [r4, #20]
 8001102:	3001      	adds	r0, #1
 8001104:	4283      	cmp	r3, r0
 8001106:	d004      	beq.n	8001112 <__swbuf_r+0x62>
 8001108:	89a3      	ldrh	r3, [r4, #12]
 800110a:	07db      	lsls	r3, r3, #31
 800110c:	d506      	bpl.n	800111c <__swbuf_r+0x6c>
 800110e:	2e0a      	cmp	r6, #10
 8001110:	d104      	bne.n	800111c <__swbuf_r+0x6c>
 8001112:	4621      	mov	r1, r4
 8001114:	4628      	mov	r0, r5
 8001116:	f000 f933 	bl	8001380 <_fflush_r>
 800111a:	b988      	cbnz	r0, 8001140 <__swbuf_r+0x90>
 800111c:	4638      	mov	r0, r7
 800111e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001120:	4b0a      	ldr	r3, [pc, #40]	; (800114c <__swbuf_r+0x9c>)
 8001122:	429c      	cmp	r4, r3
 8001124:	d101      	bne.n	800112a <__swbuf_r+0x7a>
 8001126:	68ac      	ldr	r4, [r5, #8]
 8001128:	e7cf      	b.n	80010ca <__swbuf_r+0x1a>
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <__swbuf_r+0xa0>)
 800112c:	429c      	cmp	r4, r3
 800112e:	bf08      	it	eq
 8001130:	68ec      	ldreq	r4, [r5, #12]
 8001132:	e7ca      	b.n	80010ca <__swbuf_r+0x1a>
 8001134:	4621      	mov	r1, r4
 8001136:	4628      	mov	r0, r5
 8001138:	f000 f81e 	bl	8001178 <__swsetup_r>
 800113c:	2800      	cmp	r0, #0
 800113e:	d0cb      	beq.n	80010d8 <__swbuf_r+0x28>
 8001140:	f04f 37ff 	mov.w	r7, #4294967295
 8001144:	e7ea      	b.n	800111c <__swbuf_r+0x6c>
 8001146:	bf00      	nop
 8001148:	08001680 	.word	0x08001680
 800114c:	080016a0 	.word	0x080016a0
 8001150:	08001660 	.word	0x08001660

08001154 <_write_r>:
 8001154:	b538      	push	{r3, r4, r5, lr}
 8001156:	4d07      	ldr	r5, [pc, #28]	; (8001174 <_write_r+0x20>)
 8001158:	4604      	mov	r4, r0
 800115a:	4608      	mov	r0, r1
 800115c:	4611      	mov	r1, r2
 800115e:	2200      	movs	r2, #0
 8001160:	602a      	str	r2, [r5, #0]
 8001162:	461a      	mov	r2, r3
 8001164:	f7ff f97f 	bl	8000466 <_write>
 8001168:	1c43      	adds	r3, r0, #1
 800116a:	d102      	bne.n	8001172 <_write_r+0x1e>
 800116c:	682b      	ldr	r3, [r5, #0]
 800116e:	b103      	cbz	r3, 8001172 <_write_r+0x1e>
 8001170:	6023      	str	r3, [r4, #0]
 8001172:	bd38      	pop	{r3, r4, r5, pc}
 8001174:	2000009c 	.word	0x2000009c

08001178 <__swsetup_r>:
 8001178:	4b32      	ldr	r3, [pc, #200]	; (8001244 <__swsetup_r+0xcc>)
 800117a:	b570      	push	{r4, r5, r6, lr}
 800117c:	681d      	ldr	r5, [r3, #0]
 800117e:	4606      	mov	r6, r0
 8001180:	460c      	mov	r4, r1
 8001182:	b125      	cbz	r5, 800118e <__swsetup_r+0x16>
 8001184:	69ab      	ldr	r3, [r5, #24]
 8001186:	b913      	cbnz	r3, 800118e <__swsetup_r+0x16>
 8001188:	4628      	mov	r0, r5
 800118a:	f7ff fb55 	bl	8000838 <__sinit>
 800118e:	4b2e      	ldr	r3, [pc, #184]	; (8001248 <__swsetup_r+0xd0>)
 8001190:	429c      	cmp	r4, r3
 8001192:	d10f      	bne.n	80011b4 <__swsetup_r+0x3c>
 8001194:	686c      	ldr	r4, [r5, #4]
 8001196:	89a3      	ldrh	r3, [r4, #12]
 8001198:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800119c:	0719      	lsls	r1, r3, #28
 800119e:	d42c      	bmi.n	80011fa <__swsetup_r+0x82>
 80011a0:	06dd      	lsls	r5, r3, #27
 80011a2:	d411      	bmi.n	80011c8 <__swsetup_r+0x50>
 80011a4:	2309      	movs	r3, #9
 80011a6:	6033      	str	r3, [r6, #0]
 80011a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80011ac:	81a3      	strh	r3, [r4, #12]
 80011ae:	f04f 30ff 	mov.w	r0, #4294967295
 80011b2:	e03e      	b.n	8001232 <__swsetup_r+0xba>
 80011b4:	4b25      	ldr	r3, [pc, #148]	; (800124c <__swsetup_r+0xd4>)
 80011b6:	429c      	cmp	r4, r3
 80011b8:	d101      	bne.n	80011be <__swsetup_r+0x46>
 80011ba:	68ac      	ldr	r4, [r5, #8]
 80011bc:	e7eb      	b.n	8001196 <__swsetup_r+0x1e>
 80011be:	4b24      	ldr	r3, [pc, #144]	; (8001250 <__swsetup_r+0xd8>)
 80011c0:	429c      	cmp	r4, r3
 80011c2:	bf08      	it	eq
 80011c4:	68ec      	ldreq	r4, [r5, #12]
 80011c6:	e7e6      	b.n	8001196 <__swsetup_r+0x1e>
 80011c8:	0758      	lsls	r0, r3, #29
 80011ca:	d512      	bpl.n	80011f2 <__swsetup_r+0x7a>
 80011cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80011ce:	b141      	cbz	r1, 80011e2 <__swsetup_r+0x6a>
 80011d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80011d4:	4299      	cmp	r1, r3
 80011d6:	d002      	beq.n	80011de <__swsetup_r+0x66>
 80011d8:	4630      	mov	r0, r6
 80011da:	f000 f98f 	bl	80014fc <_free_r>
 80011de:	2300      	movs	r3, #0
 80011e0:	6363      	str	r3, [r4, #52]	; 0x34
 80011e2:	89a3      	ldrh	r3, [r4, #12]
 80011e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80011e8:	81a3      	strh	r3, [r4, #12]
 80011ea:	2300      	movs	r3, #0
 80011ec:	6063      	str	r3, [r4, #4]
 80011ee:	6923      	ldr	r3, [r4, #16]
 80011f0:	6023      	str	r3, [r4, #0]
 80011f2:	89a3      	ldrh	r3, [r4, #12]
 80011f4:	f043 0308 	orr.w	r3, r3, #8
 80011f8:	81a3      	strh	r3, [r4, #12]
 80011fa:	6923      	ldr	r3, [r4, #16]
 80011fc:	b94b      	cbnz	r3, 8001212 <__swsetup_r+0x9a>
 80011fe:	89a3      	ldrh	r3, [r4, #12]
 8001200:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001208:	d003      	beq.n	8001212 <__swsetup_r+0x9a>
 800120a:	4621      	mov	r1, r4
 800120c:	4630      	mov	r0, r6
 800120e:	f000 f929 	bl	8001464 <__smakebuf_r>
 8001212:	89a0      	ldrh	r0, [r4, #12]
 8001214:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001218:	f010 0301 	ands.w	r3, r0, #1
 800121c:	d00a      	beq.n	8001234 <__swsetup_r+0xbc>
 800121e:	2300      	movs	r3, #0
 8001220:	60a3      	str	r3, [r4, #8]
 8001222:	6963      	ldr	r3, [r4, #20]
 8001224:	425b      	negs	r3, r3
 8001226:	61a3      	str	r3, [r4, #24]
 8001228:	6923      	ldr	r3, [r4, #16]
 800122a:	b943      	cbnz	r3, 800123e <__swsetup_r+0xc6>
 800122c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001230:	d1ba      	bne.n	80011a8 <__swsetup_r+0x30>
 8001232:	bd70      	pop	{r4, r5, r6, pc}
 8001234:	0781      	lsls	r1, r0, #30
 8001236:	bf58      	it	pl
 8001238:	6963      	ldrpl	r3, [r4, #20]
 800123a:	60a3      	str	r3, [r4, #8]
 800123c:	e7f4      	b.n	8001228 <__swsetup_r+0xb0>
 800123e:	2000      	movs	r0, #0
 8001240:	e7f7      	b.n	8001232 <__swsetup_r+0xba>
 8001242:	bf00      	nop
 8001244:	20000000 	.word	0x20000000
 8001248:	08001680 	.word	0x08001680
 800124c:	080016a0 	.word	0x080016a0
 8001250:	08001660 	.word	0x08001660

08001254 <_close_r>:
 8001254:	b538      	push	{r3, r4, r5, lr}
 8001256:	4d06      	ldr	r5, [pc, #24]	; (8001270 <_close_r+0x1c>)
 8001258:	2300      	movs	r3, #0
 800125a:	4604      	mov	r4, r0
 800125c:	4608      	mov	r0, r1
 800125e:	602b      	str	r3, [r5, #0]
 8001260:	f7ff f91d 	bl	800049e <_close>
 8001264:	1c43      	adds	r3, r0, #1
 8001266:	d102      	bne.n	800126e <_close_r+0x1a>
 8001268:	682b      	ldr	r3, [r5, #0]
 800126a:	b103      	cbz	r3, 800126e <_close_r+0x1a>
 800126c:	6023      	str	r3, [r4, #0]
 800126e:	bd38      	pop	{r3, r4, r5, pc}
 8001270:	2000009c 	.word	0x2000009c

08001274 <__sflush_r>:
 8001274:	898a      	ldrh	r2, [r1, #12]
 8001276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800127a:	4605      	mov	r5, r0
 800127c:	0710      	lsls	r0, r2, #28
 800127e:	460c      	mov	r4, r1
 8001280:	d458      	bmi.n	8001334 <__sflush_r+0xc0>
 8001282:	684b      	ldr	r3, [r1, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	dc05      	bgt.n	8001294 <__sflush_r+0x20>
 8001288:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800128a:	2b00      	cmp	r3, #0
 800128c:	dc02      	bgt.n	8001294 <__sflush_r+0x20>
 800128e:	2000      	movs	r0, #0
 8001290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001294:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001296:	2e00      	cmp	r6, #0
 8001298:	d0f9      	beq.n	800128e <__sflush_r+0x1a>
 800129a:	2300      	movs	r3, #0
 800129c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80012a0:	682f      	ldr	r7, [r5, #0]
 80012a2:	602b      	str	r3, [r5, #0]
 80012a4:	d032      	beq.n	800130c <__sflush_r+0x98>
 80012a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80012a8:	89a3      	ldrh	r3, [r4, #12]
 80012aa:	075a      	lsls	r2, r3, #29
 80012ac:	d505      	bpl.n	80012ba <__sflush_r+0x46>
 80012ae:	6863      	ldr	r3, [r4, #4]
 80012b0:	1ac0      	subs	r0, r0, r3
 80012b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012b4:	b10b      	cbz	r3, 80012ba <__sflush_r+0x46>
 80012b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012b8:	1ac0      	subs	r0, r0, r3
 80012ba:	2300      	movs	r3, #0
 80012bc:	4602      	mov	r2, r0
 80012be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012c0:	6a21      	ldr	r1, [r4, #32]
 80012c2:	4628      	mov	r0, r5
 80012c4:	47b0      	blx	r6
 80012c6:	1c43      	adds	r3, r0, #1
 80012c8:	89a3      	ldrh	r3, [r4, #12]
 80012ca:	d106      	bne.n	80012da <__sflush_r+0x66>
 80012cc:	6829      	ldr	r1, [r5, #0]
 80012ce:	291d      	cmp	r1, #29
 80012d0:	d82c      	bhi.n	800132c <__sflush_r+0xb8>
 80012d2:	4a2a      	ldr	r2, [pc, #168]	; (800137c <__sflush_r+0x108>)
 80012d4:	40ca      	lsrs	r2, r1
 80012d6:	07d6      	lsls	r6, r2, #31
 80012d8:	d528      	bpl.n	800132c <__sflush_r+0xb8>
 80012da:	2200      	movs	r2, #0
 80012dc:	6062      	str	r2, [r4, #4]
 80012de:	04d9      	lsls	r1, r3, #19
 80012e0:	6922      	ldr	r2, [r4, #16]
 80012e2:	6022      	str	r2, [r4, #0]
 80012e4:	d504      	bpl.n	80012f0 <__sflush_r+0x7c>
 80012e6:	1c42      	adds	r2, r0, #1
 80012e8:	d101      	bne.n	80012ee <__sflush_r+0x7a>
 80012ea:	682b      	ldr	r3, [r5, #0]
 80012ec:	b903      	cbnz	r3, 80012f0 <__sflush_r+0x7c>
 80012ee:	6560      	str	r0, [r4, #84]	; 0x54
 80012f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012f2:	602f      	str	r7, [r5, #0]
 80012f4:	2900      	cmp	r1, #0
 80012f6:	d0ca      	beq.n	800128e <__sflush_r+0x1a>
 80012f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80012fc:	4299      	cmp	r1, r3
 80012fe:	d002      	beq.n	8001306 <__sflush_r+0x92>
 8001300:	4628      	mov	r0, r5
 8001302:	f000 f8fb 	bl	80014fc <_free_r>
 8001306:	2000      	movs	r0, #0
 8001308:	6360      	str	r0, [r4, #52]	; 0x34
 800130a:	e7c1      	b.n	8001290 <__sflush_r+0x1c>
 800130c:	6a21      	ldr	r1, [r4, #32]
 800130e:	2301      	movs	r3, #1
 8001310:	4628      	mov	r0, r5
 8001312:	47b0      	blx	r6
 8001314:	1c41      	adds	r1, r0, #1
 8001316:	d1c7      	bne.n	80012a8 <__sflush_r+0x34>
 8001318:	682b      	ldr	r3, [r5, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0c4      	beq.n	80012a8 <__sflush_r+0x34>
 800131e:	2b1d      	cmp	r3, #29
 8001320:	d001      	beq.n	8001326 <__sflush_r+0xb2>
 8001322:	2b16      	cmp	r3, #22
 8001324:	d101      	bne.n	800132a <__sflush_r+0xb6>
 8001326:	602f      	str	r7, [r5, #0]
 8001328:	e7b1      	b.n	800128e <__sflush_r+0x1a>
 800132a:	89a3      	ldrh	r3, [r4, #12]
 800132c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001330:	81a3      	strh	r3, [r4, #12]
 8001332:	e7ad      	b.n	8001290 <__sflush_r+0x1c>
 8001334:	690f      	ldr	r7, [r1, #16]
 8001336:	2f00      	cmp	r7, #0
 8001338:	d0a9      	beq.n	800128e <__sflush_r+0x1a>
 800133a:	0793      	lsls	r3, r2, #30
 800133c:	680e      	ldr	r6, [r1, #0]
 800133e:	bf08      	it	eq
 8001340:	694b      	ldreq	r3, [r1, #20]
 8001342:	600f      	str	r7, [r1, #0]
 8001344:	bf18      	it	ne
 8001346:	2300      	movne	r3, #0
 8001348:	eba6 0807 	sub.w	r8, r6, r7
 800134c:	608b      	str	r3, [r1, #8]
 800134e:	f1b8 0f00 	cmp.w	r8, #0
 8001352:	dd9c      	ble.n	800128e <__sflush_r+0x1a>
 8001354:	6a21      	ldr	r1, [r4, #32]
 8001356:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001358:	4643      	mov	r3, r8
 800135a:	463a      	mov	r2, r7
 800135c:	4628      	mov	r0, r5
 800135e:	47b0      	blx	r6
 8001360:	2800      	cmp	r0, #0
 8001362:	dc06      	bgt.n	8001372 <__sflush_r+0xfe>
 8001364:	89a3      	ldrh	r3, [r4, #12]
 8001366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800136a:	81a3      	strh	r3, [r4, #12]
 800136c:	f04f 30ff 	mov.w	r0, #4294967295
 8001370:	e78e      	b.n	8001290 <__sflush_r+0x1c>
 8001372:	4407      	add	r7, r0
 8001374:	eba8 0800 	sub.w	r8, r8, r0
 8001378:	e7e9      	b.n	800134e <__sflush_r+0xda>
 800137a:	bf00      	nop
 800137c:	20400001 	.word	0x20400001

08001380 <_fflush_r>:
 8001380:	b538      	push	{r3, r4, r5, lr}
 8001382:	690b      	ldr	r3, [r1, #16]
 8001384:	4605      	mov	r5, r0
 8001386:	460c      	mov	r4, r1
 8001388:	b913      	cbnz	r3, 8001390 <_fflush_r+0x10>
 800138a:	2500      	movs	r5, #0
 800138c:	4628      	mov	r0, r5
 800138e:	bd38      	pop	{r3, r4, r5, pc}
 8001390:	b118      	cbz	r0, 800139a <_fflush_r+0x1a>
 8001392:	6983      	ldr	r3, [r0, #24]
 8001394:	b90b      	cbnz	r3, 800139a <_fflush_r+0x1a>
 8001396:	f7ff fa4f 	bl	8000838 <__sinit>
 800139a:	4b14      	ldr	r3, [pc, #80]	; (80013ec <_fflush_r+0x6c>)
 800139c:	429c      	cmp	r4, r3
 800139e:	d11b      	bne.n	80013d8 <_fflush_r+0x58>
 80013a0:	686c      	ldr	r4, [r5, #4]
 80013a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0ef      	beq.n	800138a <_fflush_r+0xa>
 80013aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80013ac:	07d0      	lsls	r0, r2, #31
 80013ae:	d404      	bmi.n	80013ba <_fflush_r+0x3a>
 80013b0:	0599      	lsls	r1, r3, #22
 80013b2:	d402      	bmi.n	80013ba <_fflush_r+0x3a>
 80013b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013b6:	f7ff fadd 	bl	8000974 <__retarget_lock_acquire_recursive>
 80013ba:	4628      	mov	r0, r5
 80013bc:	4621      	mov	r1, r4
 80013be:	f7ff ff59 	bl	8001274 <__sflush_r>
 80013c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013c4:	07da      	lsls	r2, r3, #31
 80013c6:	4605      	mov	r5, r0
 80013c8:	d4e0      	bmi.n	800138c <_fflush_r+0xc>
 80013ca:	89a3      	ldrh	r3, [r4, #12]
 80013cc:	059b      	lsls	r3, r3, #22
 80013ce:	d4dd      	bmi.n	800138c <_fflush_r+0xc>
 80013d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013d2:	f7ff fad0 	bl	8000976 <__retarget_lock_release_recursive>
 80013d6:	e7d9      	b.n	800138c <_fflush_r+0xc>
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <_fflush_r+0x70>)
 80013da:	429c      	cmp	r4, r3
 80013dc:	d101      	bne.n	80013e2 <_fflush_r+0x62>
 80013de:	68ac      	ldr	r4, [r5, #8]
 80013e0:	e7df      	b.n	80013a2 <_fflush_r+0x22>
 80013e2:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <_fflush_r+0x74>)
 80013e4:	429c      	cmp	r4, r3
 80013e6:	bf08      	it	eq
 80013e8:	68ec      	ldreq	r4, [r5, #12]
 80013ea:	e7da      	b.n	80013a2 <_fflush_r+0x22>
 80013ec:	08001680 	.word	0x08001680
 80013f0:	080016a0 	.word	0x080016a0
 80013f4:	08001660 	.word	0x08001660

080013f8 <_lseek_r>:
 80013f8:	b538      	push	{r3, r4, r5, lr}
 80013fa:	4d07      	ldr	r5, [pc, #28]	; (8001418 <_lseek_r+0x20>)
 80013fc:	4604      	mov	r4, r0
 80013fe:	4608      	mov	r0, r1
 8001400:	4611      	mov	r1, r2
 8001402:	2200      	movs	r2, #0
 8001404:	602a      	str	r2, [r5, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	f7ff f870 	bl	80004ec <_lseek>
 800140c:	1c43      	adds	r3, r0, #1
 800140e:	d102      	bne.n	8001416 <_lseek_r+0x1e>
 8001410:	682b      	ldr	r3, [r5, #0]
 8001412:	b103      	cbz	r3, 8001416 <_lseek_r+0x1e>
 8001414:	6023      	str	r3, [r4, #0]
 8001416:	bd38      	pop	{r3, r4, r5, pc}
 8001418:	2000009c 	.word	0x2000009c

0800141c <__swhatbuf_r>:
 800141c:	b570      	push	{r4, r5, r6, lr}
 800141e:	460e      	mov	r6, r1
 8001420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001424:	2900      	cmp	r1, #0
 8001426:	b096      	sub	sp, #88	; 0x58
 8001428:	4614      	mov	r4, r2
 800142a:	461d      	mov	r5, r3
 800142c:	da07      	bge.n	800143e <__swhatbuf_r+0x22>
 800142e:	2300      	movs	r3, #0
 8001430:	602b      	str	r3, [r5, #0]
 8001432:	89b3      	ldrh	r3, [r6, #12]
 8001434:	061a      	lsls	r2, r3, #24
 8001436:	d410      	bmi.n	800145a <__swhatbuf_r+0x3e>
 8001438:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800143c:	e00e      	b.n	800145c <__swhatbuf_r+0x40>
 800143e:	466a      	mov	r2, sp
 8001440:	f000 f8be 	bl	80015c0 <_fstat_r>
 8001444:	2800      	cmp	r0, #0
 8001446:	dbf2      	blt.n	800142e <__swhatbuf_r+0x12>
 8001448:	9a01      	ldr	r2, [sp, #4]
 800144a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800144e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001452:	425a      	negs	r2, r3
 8001454:	415a      	adcs	r2, r3
 8001456:	602a      	str	r2, [r5, #0]
 8001458:	e7ee      	b.n	8001438 <__swhatbuf_r+0x1c>
 800145a:	2340      	movs	r3, #64	; 0x40
 800145c:	2000      	movs	r0, #0
 800145e:	6023      	str	r3, [r4, #0]
 8001460:	b016      	add	sp, #88	; 0x58
 8001462:	bd70      	pop	{r4, r5, r6, pc}

08001464 <__smakebuf_r>:
 8001464:	898b      	ldrh	r3, [r1, #12]
 8001466:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001468:	079d      	lsls	r5, r3, #30
 800146a:	4606      	mov	r6, r0
 800146c:	460c      	mov	r4, r1
 800146e:	d507      	bpl.n	8001480 <__smakebuf_r+0x1c>
 8001470:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001474:	6023      	str	r3, [r4, #0]
 8001476:	6123      	str	r3, [r4, #16]
 8001478:	2301      	movs	r3, #1
 800147a:	6163      	str	r3, [r4, #20]
 800147c:	b002      	add	sp, #8
 800147e:	bd70      	pop	{r4, r5, r6, pc}
 8001480:	ab01      	add	r3, sp, #4
 8001482:	466a      	mov	r2, sp
 8001484:	f7ff ffca 	bl	800141c <__swhatbuf_r>
 8001488:	9900      	ldr	r1, [sp, #0]
 800148a:	4605      	mov	r5, r0
 800148c:	4630      	mov	r0, r6
 800148e:	f7ff fa73 	bl	8000978 <_malloc_r>
 8001492:	b948      	cbnz	r0, 80014a8 <__smakebuf_r+0x44>
 8001494:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001498:	059a      	lsls	r2, r3, #22
 800149a:	d4ef      	bmi.n	800147c <__smakebuf_r+0x18>
 800149c:	f023 0303 	bic.w	r3, r3, #3
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	81a3      	strh	r3, [r4, #12]
 80014a6:	e7e3      	b.n	8001470 <__smakebuf_r+0xc>
 80014a8:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <__smakebuf_r+0x7c>)
 80014aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80014ac:	89a3      	ldrh	r3, [r4, #12]
 80014ae:	6020      	str	r0, [r4, #0]
 80014b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b4:	81a3      	strh	r3, [r4, #12]
 80014b6:	9b00      	ldr	r3, [sp, #0]
 80014b8:	6163      	str	r3, [r4, #20]
 80014ba:	9b01      	ldr	r3, [sp, #4]
 80014bc:	6120      	str	r0, [r4, #16]
 80014be:	b15b      	cbz	r3, 80014d8 <__smakebuf_r+0x74>
 80014c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014c4:	4630      	mov	r0, r6
 80014c6:	f000 f88d 	bl	80015e4 <_isatty_r>
 80014ca:	b128      	cbz	r0, 80014d8 <__smakebuf_r+0x74>
 80014cc:	89a3      	ldrh	r3, [r4, #12]
 80014ce:	f023 0303 	bic.w	r3, r3, #3
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	81a3      	strh	r3, [r4, #12]
 80014d8:	89a0      	ldrh	r0, [r4, #12]
 80014da:	4305      	orrs	r5, r0
 80014dc:	81a5      	strh	r5, [r4, #12]
 80014de:	e7cd      	b.n	800147c <__smakebuf_r+0x18>
 80014e0:	080007d1 	.word	0x080007d1

080014e4 <__malloc_lock>:
 80014e4:	4801      	ldr	r0, [pc, #4]	; (80014ec <__malloc_lock+0x8>)
 80014e6:	f7ff ba45 	b.w	8000974 <__retarget_lock_acquire_recursive>
 80014ea:	bf00      	nop
 80014ec:	20000094 	.word	0x20000094

080014f0 <__malloc_unlock>:
 80014f0:	4801      	ldr	r0, [pc, #4]	; (80014f8 <__malloc_unlock+0x8>)
 80014f2:	f7ff ba40 	b.w	8000976 <__retarget_lock_release_recursive>
 80014f6:	bf00      	nop
 80014f8:	20000094 	.word	0x20000094

080014fc <_free_r>:
 80014fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80014fe:	2900      	cmp	r1, #0
 8001500:	d048      	beq.n	8001594 <_free_r+0x98>
 8001502:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001506:	9001      	str	r0, [sp, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	f1a1 0404 	sub.w	r4, r1, #4
 800150e:	bfb8      	it	lt
 8001510:	18e4      	addlt	r4, r4, r3
 8001512:	f7ff ffe7 	bl	80014e4 <__malloc_lock>
 8001516:	4a20      	ldr	r2, [pc, #128]	; (8001598 <_free_r+0x9c>)
 8001518:	9801      	ldr	r0, [sp, #4]
 800151a:	6813      	ldr	r3, [r2, #0]
 800151c:	4615      	mov	r5, r2
 800151e:	b933      	cbnz	r3, 800152e <_free_r+0x32>
 8001520:	6063      	str	r3, [r4, #4]
 8001522:	6014      	str	r4, [r2, #0]
 8001524:	b003      	add	sp, #12
 8001526:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800152a:	f7ff bfe1 	b.w	80014f0 <__malloc_unlock>
 800152e:	42a3      	cmp	r3, r4
 8001530:	d90b      	bls.n	800154a <_free_r+0x4e>
 8001532:	6821      	ldr	r1, [r4, #0]
 8001534:	1862      	adds	r2, r4, r1
 8001536:	4293      	cmp	r3, r2
 8001538:	bf04      	itt	eq
 800153a:	681a      	ldreq	r2, [r3, #0]
 800153c:	685b      	ldreq	r3, [r3, #4]
 800153e:	6063      	str	r3, [r4, #4]
 8001540:	bf04      	itt	eq
 8001542:	1852      	addeq	r2, r2, r1
 8001544:	6022      	streq	r2, [r4, #0]
 8001546:	602c      	str	r4, [r5, #0]
 8001548:	e7ec      	b.n	8001524 <_free_r+0x28>
 800154a:	461a      	mov	r2, r3
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	b10b      	cbz	r3, 8001554 <_free_r+0x58>
 8001550:	42a3      	cmp	r3, r4
 8001552:	d9fa      	bls.n	800154a <_free_r+0x4e>
 8001554:	6811      	ldr	r1, [r2, #0]
 8001556:	1855      	adds	r5, r2, r1
 8001558:	42a5      	cmp	r5, r4
 800155a:	d10b      	bne.n	8001574 <_free_r+0x78>
 800155c:	6824      	ldr	r4, [r4, #0]
 800155e:	4421      	add	r1, r4
 8001560:	1854      	adds	r4, r2, r1
 8001562:	42a3      	cmp	r3, r4
 8001564:	6011      	str	r1, [r2, #0]
 8001566:	d1dd      	bne.n	8001524 <_free_r+0x28>
 8001568:	681c      	ldr	r4, [r3, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	6053      	str	r3, [r2, #4]
 800156e:	4421      	add	r1, r4
 8001570:	6011      	str	r1, [r2, #0]
 8001572:	e7d7      	b.n	8001524 <_free_r+0x28>
 8001574:	d902      	bls.n	800157c <_free_r+0x80>
 8001576:	230c      	movs	r3, #12
 8001578:	6003      	str	r3, [r0, #0]
 800157a:	e7d3      	b.n	8001524 <_free_r+0x28>
 800157c:	6825      	ldr	r5, [r4, #0]
 800157e:	1961      	adds	r1, r4, r5
 8001580:	428b      	cmp	r3, r1
 8001582:	bf04      	itt	eq
 8001584:	6819      	ldreq	r1, [r3, #0]
 8001586:	685b      	ldreq	r3, [r3, #4]
 8001588:	6063      	str	r3, [r4, #4]
 800158a:	bf04      	itt	eq
 800158c:	1949      	addeq	r1, r1, r5
 800158e:	6021      	streq	r1, [r4, #0]
 8001590:	6054      	str	r4, [r2, #4]
 8001592:	e7c7      	b.n	8001524 <_free_r+0x28>
 8001594:	b003      	add	sp, #12
 8001596:	bd30      	pop	{r4, r5, pc}
 8001598:	20000084 	.word	0x20000084

0800159c <_read_r>:
 800159c:	b538      	push	{r3, r4, r5, lr}
 800159e:	4d07      	ldr	r5, [pc, #28]	; (80015bc <_read_r+0x20>)
 80015a0:	4604      	mov	r4, r0
 80015a2:	4608      	mov	r0, r1
 80015a4:	4611      	mov	r1, r2
 80015a6:	2200      	movs	r2, #0
 80015a8:	602a      	str	r2, [r5, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	f7fe ff3e 	bl	800042c <_read>
 80015b0:	1c43      	adds	r3, r0, #1
 80015b2:	d102      	bne.n	80015ba <_read_r+0x1e>
 80015b4:	682b      	ldr	r3, [r5, #0]
 80015b6:	b103      	cbz	r3, 80015ba <_read_r+0x1e>
 80015b8:	6023      	str	r3, [r4, #0]
 80015ba:	bd38      	pop	{r3, r4, r5, pc}
 80015bc:	2000009c 	.word	0x2000009c

080015c0 <_fstat_r>:
 80015c0:	b538      	push	{r3, r4, r5, lr}
 80015c2:	4d07      	ldr	r5, [pc, #28]	; (80015e0 <_fstat_r+0x20>)
 80015c4:	2300      	movs	r3, #0
 80015c6:	4604      	mov	r4, r0
 80015c8:	4608      	mov	r0, r1
 80015ca:	4611      	mov	r1, r2
 80015cc:	602b      	str	r3, [r5, #0]
 80015ce:	f7fe ff72 	bl	80004b6 <_fstat>
 80015d2:	1c43      	adds	r3, r0, #1
 80015d4:	d102      	bne.n	80015dc <_fstat_r+0x1c>
 80015d6:	682b      	ldr	r3, [r5, #0]
 80015d8:	b103      	cbz	r3, 80015dc <_fstat_r+0x1c>
 80015da:	6023      	str	r3, [r4, #0]
 80015dc:	bd38      	pop	{r3, r4, r5, pc}
 80015de:	bf00      	nop
 80015e0:	2000009c 	.word	0x2000009c

080015e4 <_isatty_r>:
 80015e4:	b538      	push	{r3, r4, r5, lr}
 80015e6:	4d06      	ldr	r5, [pc, #24]	; (8001600 <_isatty_r+0x1c>)
 80015e8:	2300      	movs	r3, #0
 80015ea:	4604      	mov	r4, r0
 80015ec:	4608      	mov	r0, r1
 80015ee:	602b      	str	r3, [r5, #0]
 80015f0:	f7fe ff71 	bl	80004d6 <_isatty>
 80015f4:	1c43      	adds	r3, r0, #1
 80015f6:	d102      	bne.n	80015fe <_isatty_r+0x1a>
 80015f8:	682b      	ldr	r3, [r5, #0]
 80015fa:	b103      	cbz	r3, 80015fe <_isatty_r+0x1a>
 80015fc:	6023      	str	r3, [r4, #0]
 80015fe:	bd38      	pop	{r3, r4, r5, pc}
 8001600:	2000009c 	.word	0x2000009c

08001604 <_init>:
 8001604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001606:	bf00      	nop
 8001608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800160a:	bc08      	pop	{r3}
 800160c:	469e      	mov	lr, r3
 800160e:	4770      	bx	lr

08001610 <_fini>:
 8001610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001612:	bf00      	nop
 8001614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001616:	bc08      	pop	{r3}
 8001618:	469e      	mov	lr, r3
 800161a:	4770      	bx	lr
