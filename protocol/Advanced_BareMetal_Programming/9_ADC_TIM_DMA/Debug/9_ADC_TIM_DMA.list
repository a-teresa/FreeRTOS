
9_ADC_TIM_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000155c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080016fc  080016fc  000116fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017b4  080017b4  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080017b4  080017b4  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017b4  080017b4  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017b4  080017b4  000117b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017b8  080017b8  000117b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080017bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  20000064  08001820  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08001820  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000339d  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000972  00000000  00000000  00023431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000188  00000000  00000000  00023da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000130  00000000  00000000  00023f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fe8e  00000000  00000000  00024060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000020af  00000000  00000000  00033eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055915  00000000  00000000  00035f9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0008b8b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c74  00000000  00000000  0008b908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080016e4 	.word	0x080016e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	080016e4 	.word	0x080016e4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	2b00      	cmp	r3, #0
 8000290:	db0b      	blt.n	80002aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 021f 	and.w	r2, r3, #31
 8000298:	4907      	ldr	r1, [pc, #28]	; (80002b8 <__NVIC_EnableIRQ+0x38>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	095b      	lsrs	r3, r3, #5
 80002a0:	2001      	movs	r0, #1
 80002a2:	fa00 f202 	lsl.w	r2, r0, r2
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e100 	.word	0xe000e100

080002bc <adc_tim_dma_init>:

uint16_t adc_raw_data[NUM_OF_SAMPLES];


void adc_tim_dma_init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	/************GPIO Configuration**********/
	/*Enable clock access to ADC GPIO Pin's Port*/
	RCC->AHB1ENR |= GPIOAEN;
 80002c0:	4b63      	ldr	r3, [pc, #396]	; (8000450 <adc_tim_dma_init+0x194>)
 80002c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c4:	4a62      	ldr	r2, [pc, #392]	; (8000450 <adc_tim_dma_init+0x194>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA0 to analog mode*/
	GPIOA->MODER |= (1U<<0);
 80002cc:	4b61      	ldr	r3, [pc, #388]	; (8000454 <adc_tim_dma_init+0x198>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a60      	ldr	r2, [pc, #384]	; (8000454 <adc_tim_dma_init+0x198>)
 80002d2:	f043 0301 	orr.w	r3, r3, #1
 80002d6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<1);
 80002d8:	4b5e      	ldr	r3, [pc, #376]	; (8000454 <adc_tim_dma_init+0x198>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a5d      	ldr	r2, [pc, #372]	; (8000454 <adc_tim_dma_init+0x198>)
 80002de:	f043 0302 	orr.w	r3, r3, #2
 80002e2:	6013      	str	r3, [r2, #0]

	/************ADC Configuration**********/
	/*Enable clock access to ADC*/
	RCC->APB2ENR |= ADC1EN;
 80002e4:	4b5a      	ldr	r3, [pc, #360]	; (8000450 <adc_tim_dma_init+0x194>)
 80002e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002e8:	4a59      	ldr	r2, [pc, #356]	; (8000450 <adc_tim_dma_init+0x194>)
 80002ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ee:	6453      	str	r3, [r2, #68]	; 0x44

	/*Select to use DMA*/
	ADC1->CR2 |= CR2_DMA|CR2_DDS;
 80002f0:	4b59      	ldr	r3, [pc, #356]	; (8000458 <adc_tim_dma_init+0x19c>)
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	4a58      	ldr	r2, [pc, #352]	; (8000458 <adc_tim_dma_init+0x19c>)
 80002f6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80002fa:	6093      	str	r3, [r2, #8]

	/*Select external trigger on rising egde*/
	ADC1->CR2 |= (1U<<28);
 80002fc:	4b56      	ldr	r3, [pc, #344]	; (8000458 <adc_tim_dma_init+0x19c>)
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	4a55      	ldr	r2, [pc, #340]	; (8000458 <adc_tim_dma_init+0x19c>)
 8000302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000306:	6093      	str	r3, [r2, #8]
	ADC1->CR2 &= ~(1U<<29);
 8000308:	4b53      	ldr	r3, [pc, #332]	; (8000458 <adc_tim_dma_init+0x19c>)
 800030a:	689b      	ldr	r3, [r3, #8]
 800030c:	4a52      	ldr	r2, [pc, #328]	; (8000458 <adc_tim_dma_init+0x19c>)
 800030e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000312:	6093      	str	r3, [r2, #8]

	/*Select Timer 2 TRGO event*/
	ADC1->CR2 &= ~(1U<<24);
 8000314:	4b50      	ldr	r3, [pc, #320]	; (8000458 <adc_tim_dma_init+0x19c>)
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	4a4f      	ldr	r2, [pc, #316]	; (8000458 <adc_tim_dma_init+0x19c>)
 800031a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800031e:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (1U<<25);
 8000320:	4b4d      	ldr	r3, [pc, #308]	; (8000458 <adc_tim_dma_init+0x19c>)
 8000322:	689b      	ldr	r3, [r3, #8]
 8000324:	4a4c      	ldr	r2, [pc, #304]	; (8000458 <adc_tim_dma_init+0x19c>)
 8000326:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800032a:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (1U<<26);
 800032c:	4b4a      	ldr	r3, [pc, #296]	; (8000458 <adc_tim_dma_init+0x19c>)
 800032e:	689b      	ldr	r3, [r3, #8]
 8000330:	4a49      	ldr	r2, [pc, #292]	; (8000458 <adc_tim_dma_init+0x19c>)
 8000332:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000336:	6093      	str	r3, [r2, #8]
	ADC1->CR2 &= ~(1U<<27);
 8000338:	4b47      	ldr	r3, [pc, #284]	; (8000458 <adc_tim_dma_init+0x19c>)
 800033a:	689b      	ldr	r3, [r3, #8]
 800033c:	4a46      	ldr	r2, [pc, #280]	; (8000458 <adc_tim_dma_init+0x19c>)
 800033e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000342:	6093      	str	r3, [r2, #8]


	/************DMA Configuration**********/
	/*Enable clock access to DMA*/
	RCC->AHB1ENR |=DMA2EN;
 8000344:	4b42      	ldr	r3, [pc, #264]	; (8000450 <adc_tim_dma_init+0x194>)
 8000346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000348:	4a41      	ldr	r2, [pc, #260]	; (8000450 <adc_tim_dma_init+0x194>)
 800034a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800034e:	6313      	str	r3, [r2, #48]	; 0x30


	/*Disable DMA stream*/
	DMA2_Stream0->CR &=~DMA_SCR_EN;
 8000350:	4b42      	ldr	r3, [pc, #264]	; (800045c <adc_tim_dma_init+0x1a0>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a41      	ldr	r2, [pc, #260]	; (800045c <adc_tim_dma_init+0x1a0>)
 8000356:	f023 0301 	bic.w	r3, r3, #1
 800035a:	6013      	str	r3, [r2, #0]

	/*Wait till DMA is disabled*/
	while((DMA2_Stream0->CR & DMA_SCR_EN)){}
 800035c:	bf00      	nop
 800035e:	4b3f      	ldr	r3, [pc, #252]	; (800045c <adc_tim_dma_init+0x1a0>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	f003 0301 	and.w	r3, r3, #1
 8000366:	2b00      	cmp	r3, #0
 8000368:	d1f9      	bne.n	800035e <adc_tim_dma_init+0xa2>

	/*Enable Circular mode*/
	DMA2_Stream0->CR |=DMA_SCR_CIRC;
 800036a:	4b3c      	ldr	r3, [pc, #240]	; (800045c <adc_tim_dma_init+0x1a0>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4a3b      	ldr	r2, [pc, #236]	; (800045c <adc_tim_dma_init+0x1a0>)
 8000370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000374:	6013      	str	r3, [r2, #0]

	/*Set MSIZE i.e Memory data size to half-word*/

	DMA2_Stream0->CR |= (1U<<13);
 8000376:	4b39      	ldr	r3, [pc, #228]	; (800045c <adc_tim_dma_init+0x1a0>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a38      	ldr	r2, [pc, #224]	; (800045c <adc_tim_dma_init+0x1a0>)
 800037c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000380:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~(1U<<14);
 8000382:	4b36      	ldr	r3, [pc, #216]	; (800045c <adc_tim_dma_init+0x1a0>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a35      	ldr	r2, [pc, #212]	; (800045c <adc_tim_dma_init+0x1a0>)
 8000388:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800038c:	6013      	str	r3, [r2, #0]

	/*Set PSIZE i.e Peripheral data size to half-word*/
	DMA2_Stream0->CR |= (1U<<11);
 800038e:	4b33      	ldr	r3, [pc, #204]	; (800045c <adc_tim_dma_init+0x1a0>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	4a32      	ldr	r2, [pc, #200]	; (800045c <adc_tim_dma_init+0x1a0>)
 8000394:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000398:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~(1U<<12);
 800039a:	4b30      	ldr	r3, [pc, #192]	; (800045c <adc_tim_dma_init+0x1a0>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a2f      	ldr	r2, [pc, #188]	; (800045c <adc_tim_dma_init+0x1a0>)
 80003a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80003a4:	6013      	str	r3, [r2, #0]

	/*Enable memory addr increment*/
	DMA2_Stream0->CR |=DMA_SCR_MINC;
 80003a6:	4b2d      	ldr	r3, [pc, #180]	; (800045c <adc_tim_dma_init+0x1a0>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a2c      	ldr	r2, [pc, #176]	; (800045c <adc_tim_dma_init+0x1a0>)
 80003ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003b0:	6013      	str	r3, [r2, #0]

	/*Enable transfer complete interrupt*/
	DMA2_Stream0->CR |= DMA_SCR_TCIE;
 80003b2:	4b2a      	ldr	r3, [pc, #168]	; (800045c <adc_tim_dma_init+0x1a0>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4a29      	ldr	r2, [pc, #164]	; (800045c <adc_tim_dma_init+0x1a0>)
 80003b8:	f043 0310 	orr.w	r3, r3, #16
 80003bc:	6013      	str	r3, [r2, #0]

	/*Set periph address*/
	DMA2_Stream0->PAR = (uint32_t)(&(ADC1->DR));
 80003be:	4b27      	ldr	r3, [pc, #156]	; (800045c <adc_tim_dma_init+0x1a0>)
 80003c0:	4a27      	ldr	r2, [pc, #156]	; (8000460 <adc_tim_dma_init+0x1a4>)
 80003c2:	609a      	str	r2, [r3, #8]
	/*Set mem address*/
	DMA2_Stream0->M0AR = (uint32_t)(&adc_raw_data);
 80003c4:	4b25      	ldr	r3, [pc, #148]	; (800045c <adc_tim_dma_init+0x1a0>)
 80003c6:	4a27      	ldr	r2, [pc, #156]	; (8000464 <adc_tim_dma_init+0x1a8>)
 80003c8:	60da      	str	r2, [r3, #12]

	/*Set number of transfer*/
	DMA2_Stream0->NDTR = (uint16_t)NUM_OF_SAMPLES;
 80003ca:	4b24      	ldr	r3, [pc, #144]	; (800045c <adc_tim_dma_init+0x1a0>)
 80003cc:	220a      	movs	r2, #10
 80003ce:	605a      	str	r2, [r3, #4]

	/*Enable DMA interrupt in NVIC*/
	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80003d0:	2038      	movs	r0, #56	; 0x38
 80003d2:	f7ff ff55 	bl	8000280 <__NVIC_EnableIRQ>

	/*Configure timer period to 100Hz i.e, ADC is
	 * going to be sampling at a 100Hz rate, every 10ms*/

    /*Enable clock access tO TIM2*/
	RCC->APB1ENR |= TIM2EN;
 80003d6:	4b1e      	ldr	r3, [pc, #120]	; (8000450 <adc_tim_dma_init+0x194>)
 80003d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003da:	4a1d      	ldr	r2, [pc, #116]	; (8000450 <adc_tim_dma_init+0x194>)
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	6413      	str	r3, [r2, #64]	; 0x40

	/*Set TIM prescaler value*/
	TIM2->PSC =  16000 - 1; //  16 000 000 / 16 000 = 1 000
 80003e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003e6:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80003ea:	629a      	str	r2, [r3, #40]	; 0x28

	/*Set TIM auto-reload value*/
	TIM2->ARR = 10 - 1; // 1 000 /10 =  100Hz
 80003ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003f0:	2209      	movs	r2, #9
 80003f2:	62da      	str	r2, [r3, #44]	; 0x2c

	/*Configure master mode selection bits*/
	TIM2->CR2 &= ~(1U<<4);
 80003f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003f8:	685b      	ldr	r3, [r3, #4]
 80003fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003fe:	f023 0310 	bic.w	r3, r3, #16
 8000402:	6053      	str	r3, [r2, #4]
	TIM2->CR2 |= (1U<<5);
 8000404:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000408:	685b      	ldr	r3, [r3, #4]
 800040a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800040e:	f043 0320 	orr.w	r3, r3, #32
 8000412:	6053      	str	r3, [r2, #4]
	TIM2->CR2 &= ~(1U<<6);
 8000414:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800041e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000422:	6053      	str	r3, [r2, #4]
	/************Enable modules**********/
	/*Enable ADC*/
	ADC1->CR2 |=CR2_ADCON;
 8000424:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <adc_tim_dma_init+0x19c>)
 8000426:	689b      	ldr	r3, [r3, #8]
 8000428:	4a0b      	ldr	r2, [pc, #44]	; (8000458 <adc_tim_dma_init+0x19c>)
 800042a:	f043 0301 	orr.w	r3, r3, #1
 800042e:	6093      	str	r3, [r2, #8]

	/*Enable DMA stream*/
	DMA2_Stream0->CR |= DMA_SCR_EN;
 8000430:	4b0a      	ldr	r3, [pc, #40]	; (800045c <adc_tim_dma_init+0x1a0>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a09      	ldr	r2, [pc, #36]	; (800045c <adc_tim_dma_init+0x1a0>)
 8000436:	f043 0301 	orr.w	r3, r3, #1
 800043a:	6013      	str	r3, [r2, #0]

	/*Enable Timer*/
	TIM2->CR1 |=CR1_CEN;
 800043c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000446:	f043 0301 	orr.w	r3, r3, #1
 800044a:	6013      	str	r3, [r2, #0]

}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}
 8000450:	40023800 	.word	0x40023800
 8000454:	40020000 	.word	0x40020000
 8000458:	40012000 	.word	0x40012000
 800045c:	40026410 	.word	0x40026410
 8000460:	4001204c 	.word	0x4001204c
 8000464:	2000008c 	.word	0x2000008c

08000468 <main>:


volatile uint8_t g_transfer_cmplt;

int main(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
	g_transfer_cmplt = 0;
 800046e:	4b16      	ldr	r3, [pc, #88]	; (80004c8 <main+0x60>)
 8000470:	2200      	movs	r2, #0
 8000472:	701a      	strb	r2, [r3, #0]
	uart2_tx_init();
 8000474:	f000 f8fa 	bl	800066c <uart2_tx_init>
	adc_tim_dma_init();
 8000478:	f7ff ff20 	bl	80002bc <adc_tim_dma_init>

	while(1)
	{
		if(g_transfer_cmplt)
 800047c:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <main+0x60>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	b2db      	uxtb	r3, r3
 8000482:	2b00      	cmp	r3, #0
 8000484:	d0fa      	beq.n	800047c <main+0x14>
		{
			g_transfer_cmplt = 0;
 8000486:	4b10      	ldr	r3, [pc, #64]	; (80004c8 <main+0x60>)
 8000488:	2200      	movs	r2, #0
 800048a:	701a      	strb	r2, [r3, #0]

			for( int i = 0; i < NUM_OF_SAMPLES; i++)
 800048c:	2300      	movs	r3, #0
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	e00b      	b.n	80004aa <main+0x42>
			{
				printf("Sample number [%d]  = %d \r\n ",i,adc_raw_data[i]);
 8000492:	4a0e      	ldr	r2, [pc, #56]	; (80004cc <main+0x64>)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800049a:	461a      	mov	r2, r3
 800049c:	6879      	ldr	r1, [r7, #4]
 800049e:	480c      	ldr	r0, [pc, #48]	; (80004d0 <main+0x68>)
 80004a0:	f000 f9ca 	bl	8000838 <iprintf>
			for( int i = 0; i < NUM_OF_SAMPLES; i++)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	3301      	adds	r3, #1
 80004a8:	607b      	str	r3, [r7, #4]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	2b09      	cmp	r3, #9
 80004ae:	ddf0      	ble.n	8000492 <main+0x2a>
			}
			for( int i = 0; i < 90000; i++){}
 80004b0:	2300      	movs	r3, #0
 80004b2:	603b      	str	r3, [r7, #0]
 80004b4:	e002      	b.n	80004bc <main+0x54>
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	3301      	adds	r3, #1
 80004ba:	603b      	str	r3, [r7, #0]
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	4a05      	ldr	r2, [pc, #20]	; (80004d4 <main+0x6c>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	ddf8      	ble.n	80004b6 <main+0x4e>
		if(g_transfer_cmplt)
 80004c4:	e7da      	b.n	800047c <main+0x14>
 80004c6:	bf00      	nop
 80004c8:	200000a0 	.word	0x200000a0
 80004cc:	2000008c 	.word	0x2000008c
 80004d0:	080016fc 	.word	0x080016fc
 80004d4:	00015f8f 	.word	0x00015f8f

080004d8 <DMA2_Stream0_IRQHandler>:
	}
}


void DMA2_Stream0_IRQHandler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0

	/*Check if transfer complete interrupt occurred*/
	if((DMA2->LISR) & LISR_TCIF0)
 80004dc:	4b09      	ldr	r3, [pc, #36]	; (8000504 <DMA2_Stream0_IRQHandler+0x2c>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	f003 0320 	and.w	r3, r3, #32
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d008      	beq.n	80004fa <DMA2_Stream0_IRQHandler+0x22>
	{
		g_transfer_cmplt = 1;
 80004e8:	4b07      	ldr	r3, [pc, #28]	; (8000508 <DMA2_Stream0_IRQHandler+0x30>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	701a      	strb	r2, [r3, #0]

		/*Clear flag*/
		DMA2->LIFCR |=LIFCR_CTCIF0;
 80004ee:	4b05      	ldr	r3, [pc, #20]	; (8000504 <DMA2_Stream0_IRQHandler+0x2c>)
 80004f0:	689b      	ldr	r3, [r3, #8]
 80004f2:	4a04      	ldr	r2, [pc, #16]	; (8000504 <DMA2_Stream0_IRQHandler+0x2c>)
 80004f4:	f043 0320 	orr.w	r3, r3, #32
 80004f8:	6093      	str	r3, [r2, #8]
	}

}
 80004fa:	bf00      	nop
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr
 8000504:	40026400 	.word	0x40026400
 8000508:	200000a0 	.word	0x200000a0

0800050c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
 800051c:	e00a      	b.n	8000534 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800051e:	f3af 8000 	nop.w
 8000522:	4601      	mov	r1, r0
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	1c5a      	adds	r2, r3, #1
 8000528:	60ba      	str	r2, [r7, #8]
 800052a:	b2ca      	uxtb	r2, r1
 800052c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	3301      	adds	r3, #1
 8000532:	617b      	str	r3, [r7, #20]
 8000534:	697a      	ldr	r2, [r7, #20]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	429a      	cmp	r2, r3
 800053a:	dbf0      	blt.n	800051e <_read+0x12>
	}

return len;
 800053c:	687b      	ldr	r3, [r7, #4]
}
 800053e:	4618      	mov	r0, r3
 8000540:	3718      	adds	r7, #24
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}

08000546 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000546:	b580      	push	{r7, lr}
 8000548:	b086      	sub	sp, #24
 800054a:	af00      	add	r7, sp, #0
 800054c:	60f8      	str	r0, [r7, #12]
 800054e:	60b9      	str	r1, [r7, #8]
 8000550:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000552:	2300      	movs	r3, #0
 8000554:	617b      	str	r3, [r7, #20]
 8000556:	e009      	b.n	800056c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	1c5a      	adds	r2, r3, #1
 800055c:	60ba      	str	r2, [r7, #8]
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	4618      	mov	r0, r3
 8000562:	f000 f877 	bl	8000654 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	3301      	adds	r3, #1
 800056a:	617b      	str	r3, [r7, #20]
 800056c:	697a      	ldr	r2, [r7, #20]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	429a      	cmp	r2, r3
 8000572:	dbf1      	blt.n	8000558 <_write+0x12>
	}
	return len;
 8000574:	687b      	ldr	r3, [r7, #4]
}
 8000576:	4618      	mov	r0, r3
 8000578:	3718      	adds	r7, #24
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}

0800057e <_close>:

int _close(int file)
{
 800057e:	b480      	push	{r7}
 8000580:	b083      	sub	sp, #12
 8000582:	af00      	add	r7, sp, #0
 8000584:	6078      	str	r0, [r7, #4]
	return -1;
 8000586:	f04f 33ff 	mov.w	r3, #4294967295
}
 800058a:	4618      	mov	r0, r3
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr

08000596 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000596:	b480      	push	{r7}
 8000598:	b083      	sub	sp, #12
 800059a:	af00      	add	r7, sp, #0
 800059c:	6078      	str	r0, [r7, #4]
 800059e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005a6:	605a      	str	r2, [r3, #4]
	return 0;
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <_isatty>:

int _isatty(int file)
{
 80005b6:	b480      	push	{r7}
 80005b8:	b083      	sub	sp, #12
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
	return 1;
 80005be:	2301      	movs	r3, #1
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	607a      	str	r2, [r7, #4]
	return 0;
 80005d8:	2300      	movs	r3, #0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
	...

080005e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005f0:	4a14      	ldr	r2, [pc, #80]	; (8000644 <_sbrk+0x5c>)
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <_sbrk+0x60>)
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <_sbrk+0x64>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d102      	bne.n	800060a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <_sbrk+0x64>)
 8000606:	4a12      	ldr	r2, [pc, #72]	; (8000650 <_sbrk+0x68>)
 8000608:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <_sbrk+0x64>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4413      	add	r3, r2
 8000612:	693a      	ldr	r2, [r7, #16]
 8000614:	429a      	cmp	r2, r3
 8000616:	d207      	bcs.n	8000628 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000618:	f000 f8dc 	bl	80007d4 <__errno>
 800061c:	4603      	mov	r3, r0
 800061e:	220c      	movs	r2, #12
 8000620:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000622:	f04f 33ff 	mov.w	r3, #4294967295
 8000626:	e009      	b.n	800063c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000628:	4b08      	ldr	r3, [pc, #32]	; (800064c <_sbrk+0x64>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800062e:	4b07      	ldr	r3, [pc, #28]	; (800064c <_sbrk+0x64>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4413      	add	r3, r2
 8000636:	4a05      	ldr	r2, [pc, #20]	; (800064c <_sbrk+0x64>)
 8000638:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800063a:	68fb      	ldr	r3, [r7, #12]
}
 800063c:	4618      	mov	r0, r3
 800063e:	3718      	adds	r7, #24
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20020000 	.word	0x20020000
 8000648:	00000400 	.word	0x00000400
 800064c:	20000080 	.word	0x20000080
 8000650:	200000b0 	.word	0x200000b0

08000654 <__io_putchar>:
static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void uart2_write(int ch);


int __io_putchar(int ch)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f000 f84f 	bl	8000700 <uart2_write>
	return ch;
 8000662:	687b      	ldr	r3, [r7, #4]
}
 8000664:	4618      	mov	r0, r3
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <uart2_tx_init>:
void uart2_tx_init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	/*************Configure UART GPIO pin********************/
	/*1.Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000670:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <uart2_tx_init+0x84>)
 8000672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000674:	4a1e      	ldr	r2, [pc, #120]	; (80006f0 <uart2_tx_init+0x84>)
 8000676:	f043 0301 	orr.w	r3, r3, #1
 800067a:	6313      	str	r3, [r2, #48]	; 0x30

	/*2.Set PA2 mode to alternate function mode*/
	GPIOA->MODER &= ~(1U<<4);
 800067c:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <uart2_tx_init+0x88>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a1c      	ldr	r2, [pc, #112]	; (80006f4 <uart2_tx_init+0x88>)
 8000682:	f023 0310 	bic.w	r3, r3, #16
 8000686:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=	 (1U<<5);
 8000688:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <uart2_tx_init+0x88>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a19      	ldr	r2, [pc, #100]	; (80006f4 <uart2_tx_init+0x88>)
 800068e:	f043 0320 	orr.w	r3, r3, #32
 8000692:	6013      	str	r3, [r2, #0]

	/*3.Set PA2 alternate function function type to AF7(UART2_TX)*/
	GPIOA->AFR[0] |= (1U<<8);
 8000694:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <uart2_tx_init+0x88>)
 8000696:	6a1b      	ldr	r3, [r3, #32]
 8000698:	4a16      	ldr	r2, [pc, #88]	; (80006f4 <uart2_tx_init+0x88>)
 800069a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800069e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 80006a0:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <uart2_tx_init+0x88>)
 80006a2:	6a1b      	ldr	r3, [r3, #32]
 80006a4:	4a13      	ldr	r2, [pc, #76]	; (80006f4 <uart2_tx_init+0x88>)
 80006a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006aa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <uart2_tx_init+0x88>)
 80006ae:	6a1b      	ldr	r3, [r3, #32]
 80006b0:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <uart2_tx_init+0x88>)
 80006b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006b6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 80006b8:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <uart2_tx_init+0x88>)
 80006ba:	6a1b      	ldr	r3, [r3, #32]
 80006bc:	4a0d      	ldr	r2, [pc, #52]	; (80006f4 <uart2_tx_init+0x88>)
 80006be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80006c2:	6213      	str	r3, [r2, #32]

	/*************Configure UART Module********************/
	/*4. Enable clock access to UART2*/
	RCC->APB1ENR |= UART2EN;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <uart2_tx_init+0x84>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	4a09      	ldr	r2, [pc, #36]	; (80006f0 <uart2_tx_init+0x84>)
 80006ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ce:	6413      	str	r3, [r2, #64]	; 0x40

	/*5. Set baudrate*/
	uart_set_baudrate(CLK,UART_BAUDRATE);
 80006d0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80006d4:	4808      	ldr	r0, [pc, #32]	; (80006f8 <uart2_tx_init+0x8c>)
 80006d6:	f000 f83f 	bl	8000758 <uart_set_baudrate>

	/*6. Set transfer direction*/
	 USART2->CR1 = CR1_TE;
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <uart2_tx_init+0x90>)
 80006dc:	2208      	movs	r2, #8
 80006de:	60da      	str	r2, [r3, #12]

	/*7. Enable uart module*/
	 USART2->CR1 |= CR1_UE;
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <uart2_tx_init+0x90>)
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	4a05      	ldr	r2, [pc, #20]	; (80006fc <uart2_tx_init+0x90>)
 80006e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006ea:	60d3      	str	r3, [r2, #12]

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40020000 	.word	0x40020000
 80006f8:	00f42400 	.word	0x00f42400
 80006fc:	40004400 	.word	0x40004400

08000700 <uart2_write>:

static void uart2_write(int ch)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 8000708:	bf00      	nop
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <uart2_write+0x2c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000712:	2b00      	cmp	r3, #0
 8000714:	d0f9      	beq.n	800070a <uart2_write+0xa>

	/*Write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4a04      	ldr	r2, [pc, #16]	; (800072c <uart2_write+0x2c>)
 800071a:	b2db      	uxtb	r3, r3
 800071c:	6053      	str	r3, [r2, #4]
}
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	40004400 	.word	0x40004400

08000730 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	6039      	str	r1, [r7, #0]
	return ((periph_clk +( baudrate/2U ))/baudrate);
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	085a      	lsrs	r2, r3, #1
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	441a      	add	r2, r3
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	fbb2 f3f3 	udiv	r3, r2, r3
 8000748:	b29b      	uxth	r3, r3
}
 800074a:	4618      	mov	r0, r3
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
	...

08000758 <uart_set_baudrate>:


static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]
	USART2->BRR  = compute_uart_bd(periph_clk,baudrate);
 8000762:	6839      	ldr	r1, [r7, #0]
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f7ff ffe3 	bl	8000730 <compute_uart_bd>
 800076a:	4603      	mov	r3, r0
 800076c:	461a      	mov	r2, r3
 800076e:	4b03      	ldr	r3, [pc, #12]	; (800077c <uart_set_baudrate+0x24>)
 8000770:	609a      	str	r2, [r3, #8]
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40004400 	.word	0x40004400

08000780 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000780:	480d      	ldr	r0, [pc, #52]	; (80007b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000782:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000784:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000788:	480c      	ldr	r0, [pc, #48]	; (80007bc <LoopForever+0x6>)
  ldr r1, =_edata
 800078a:	490d      	ldr	r1, [pc, #52]	; (80007c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800078c:	4a0d      	ldr	r2, [pc, #52]	; (80007c4 <LoopForever+0xe>)
  movs r3, #0
 800078e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000790:	e002      	b.n	8000798 <LoopCopyDataInit>

08000792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000796:	3304      	adds	r3, #4

08000798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800079a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800079c:	d3f9      	bcc.n	8000792 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800079e:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007a0:	4c0a      	ldr	r4, [pc, #40]	; (80007cc <LoopForever+0x16>)
  movs r3, #0
 80007a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a4:	e001      	b.n	80007aa <LoopFillZerobss>

080007a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a8:	3204      	adds	r2, #4

080007aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007ac:	d3fb      	bcc.n	80007a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007ae:	f000 f817 	bl	80007e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007b2:	f7ff fe59 	bl	8000468 <main>

080007b6 <LoopForever>:

LoopForever:
    b LoopForever
 80007b6:	e7fe      	b.n	80007b6 <LoopForever>
  ldr   r0, =_estack
 80007b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80007c4:	080017bc 	.word	0x080017bc
  ldr r2, =_sbss
 80007c8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80007cc:	200000b0 	.word	0x200000b0

080007d0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007d0:	e7fe      	b.n	80007d0 <ADC_IRQHandler>
	...

080007d4 <__errno>:
 80007d4:	4b01      	ldr	r3, [pc, #4]	; (80007dc <__errno+0x8>)
 80007d6:	6818      	ldr	r0, [r3, #0]
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	20000000 	.word	0x20000000

080007e0 <__libc_init_array>:
 80007e0:	b570      	push	{r4, r5, r6, lr}
 80007e2:	4d0d      	ldr	r5, [pc, #52]	; (8000818 <__libc_init_array+0x38>)
 80007e4:	4c0d      	ldr	r4, [pc, #52]	; (800081c <__libc_init_array+0x3c>)
 80007e6:	1b64      	subs	r4, r4, r5
 80007e8:	10a4      	asrs	r4, r4, #2
 80007ea:	2600      	movs	r6, #0
 80007ec:	42a6      	cmp	r6, r4
 80007ee:	d109      	bne.n	8000804 <__libc_init_array+0x24>
 80007f0:	4d0b      	ldr	r5, [pc, #44]	; (8000820 <__libc_init_array+0x40>)
 80007f2:	4c0c      	ldr	r4, [pc, #48]	; (8000824 <__libc_init_array+0x44>)
 80007f4:	f000 ff76 	bl	80016e4 <_init>
 80007f8:	1b64      	subs	r4, r4, r5
 80007fa:	10a4      	asrs	r4, r4, #2
 80007fc:	2600      	movs	r6, #0
 80007fe:	42a6      	cmp	r6, r4
 8000800:	d105      	bne.n	800080e <__libc_init_array+0x2e>
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f855 3b04 	ldr.w	r3, [r5], #4
 8000808:	4798      	blx	r3
 800080a:	3601      	adds	r6, #1
 800080c:	e7ee      	b.n	80007ec <__libc_init_array+0xc>
 800080e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000812:	4798      	blx	r3
 8000814:	3601      	adds	r6, #1
 8000816:	e7f2      	b.n	80007fe <__libc_init_array+0x1e>
 8000818:	080017b4 	.word	0x080017b4
 800081c:	080017b4 	.word	0x080017b4
 8000820:	080017b4 	.word	0x080017b4
 8000824:	080017b8 	.word	0x080017b8

08000828 <memset>:
 8000828:	4402      	add	r2, r0
 800082a:	4603      	mov	r3, r0
 800082c:	4293      	cmp	r3, r2
 800082e:	d100      	bne.n	8000832 <memset+0xa>
 8000830:	4770      	bx	lr
 8000832:	f803 1b01 	strb.w	r1, [r3], #1
 8000836:	e7f9      	b.n	800082c <memset+0x4>

08000838 <iprintf>:
 8000838:	b40f      	push	{r0, r1, r2, r3}
 800083a:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <iprintf+0x2c>)
 800083c:	b513      	push	{r0, r1, r4, lr}
 800083e:	681c      	ldr	r4, [r3, #0]
 8000840:	b124      	cbz	r4, 800084c <iprintf+0x14>
 8000842:	69a3      	ldr	r3, [r4, #24]
 8000844:	b913      	cbnz	r3, 800084c <iprintf+0x14>
 8000846:	4620      	mov	r0, r4
 8000848:	f000 f866 	bl	8000918 <__sinit>
 800084c:	ab05      	add	r3, sp, #20
 800084e:	9a04      	ldr	r2, [sp, #16]
 8000850:	68a1      	ldr	r1, [r4, #8]
 8000852:	9301      	str	r3, [sp, #4]
 8000854:	4620      	mov	r0, r4
 8000856:	f000 f983 	bl	8000b60 <_vfiprintf_r>
 800085a:	b002      	add	sp, #8
 800085c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000860:	b004      	add	sp, #16
 8000862:	4770      	bx	lr
 8000864:	20000000 	.word	0x20000000

08000868 <std>:
 8000868:	2300      	movs	r3, #0
 800086a:	b510      	push	{r4, lr}
 800086c:	4604      	mov	r4, r0
 800086e:	e9c0 3300 	strd	r3, r3, [r0]
 8000872:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000876:	6083      	str	r3, [r0, #8]
 8000878:	8181      	strh	r1, [r0, #12]
 800087a:	6643      	str	r3, [r0, #100]	; 0x64
 800087c:	81c2      	strh	r2, [r0, #14]
 800087e:	6183      	str	r3, [r0, #24]
 8000880:	4619      	mov	r1, r3
 8000882:	2208      	movs	r2, #8
 8000884:	305c      	adds	r0, #92	; 0x5c
 8000886:	f7ff ffcf 	bl	8000828 <memset>
 800088a:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <std+0x38>)
 800088c:	6263      	str	r3, [r4, #36]	; 0x24
 800088e:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <std+0x3c>)
 8000890:	62a3      	str	r3, [r4, #40]	; 0x28
 8000892:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <std+0x40>)
 8000894:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000896:	4b05      	ldr	r3, [pc, #20]	; (80008ac <std+0x44>)
 8000898:	6224      	str	r4, [r4, #32]
 800089a:	6323      	str	r3, [r4, #48]	; 0x30
 800089c:	bd10      	pop	{r4, pc}
 800089e:	bf00      	nop
 80008a0:	08001109 	.word	0x08001109
 80008a4:	0800112b 	.word	0x0800112b
 80008a8:	08001163 	.word	0x08001163
 80008ac:	08001187 	.word	0x08001187

080008b0 <_cleanup_r>:
 80008b0:	4901      	ldr	r1, [pc, #4]	; (80008b8 <_cleanup_r+0x8>)
 80008b2:	f000 b8af 	b.w	8000a14 <_fwalk_reent>
 80008b6:	bf00      	nop
 80008b8:	08001461 	.word	0x08001461

080008bc <__sfmoreglue>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	1e4a      	subs	r2, r1, #1
 80008c0:	2568      	movs	r5, #104	; 0x68
 80008c2:	4355      	muls	r5, r2
 80008c4:	460e      	mov	r6, r1
 80008c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80008ca:	f000 f8c5 	bl	8000a58 <_malloc_r>
 80008ce:	4604      	mov	r4, r0
 80008d0:	b140      	cbz	r0, 80008e4 <__sfmoreglue+0x28>
 80008d2:	2100      	movs	r1, #0
 80008d4:	e9c0 1600 	strd	r1, r6, [r0]
 80008d8:	300c      	adds	r0, #12
 80008da:	60a0      	str	r0, [r4, #8]
 80008dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80008e0:	f7ff ffa2 	bl	8000828 <memset>
 80008e4:	4620      	mov	r0, r4
 80008e6:	bd70      	pop	{r4, r5, r6, pc}

080008e8 <__sfp_lock_acquire>:
 80008e8:	4801      	ldr	r0, [pc, #4]	; (80008f0 <__sfp_lock_acquire+0x8>)
 80008ea:	f000 b8b3 	b.w	8000a54 <__retarget_lock_acquire_recursive>
 80008ee:	bf00      	nop
 80008f0:	200000a9 	.word	0x200000a9

080008f4 <__sfp_lock_release>:
 80008f4:	4801      	ldr	r0, [pc, #4]	; (80008fc <__sfp_lock_release+0x8>)
 80008f6:	f000 b8ae 	b.w	8000a56 <__retarget_lock_release_recursive>
 80008fa:	bf00      	nop
 80008fc:	200000a9 	.word	0x200000a9

08000900 <__sinit_lock_acquire>:
 8000900:	4801      	ldr	r0, [pc, #4]	; (8000908 <__sinit_lock_acquire+0x8>)
 8000902:	f000 b8a7 	b.w	8000a54 <__retarget_lock_acquire_recursive>
 8000906:	bf00      	nop
 8000908:	200000a4 	.word	0x200000a4

0800090c <__sinit_lock_release>:
 800090c:	4801      	ldr	r0, [pc, #4]	; (8000914 <__sinit_lock_release+0x8>)
 800090e:	f000 b8a2 	b.w	8000a56 <__retarget_lock_release_recursive>
 8000912:	bf00      	nop
 8000914:	200000a4 	.word	0x200000a4

08000918 <__sinit>:
 8000918:	b510      	push	{r4, lr}
 800091a:	4604      	mov	r4, r0
 800091c:	f7ff fff0 	bl	8000900 <__sinit_lock_acquire>
 8000920:	69a3      	ldr	r3, [r4, #24]
 8000922:	b11b      	cbz	r3, 800092c <__sinit+0x14>
 8000924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000928:	f7ff bff0 	b.w	800090c <__sinit_lock_release>
 800092c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000930:	6523      	str	r3, [r4, #80]	; 0x50
 8000932:	4b13      	ldr	r3, [pc, #76]	; (8000980 <__sinit+0x68>)
 8000934:	4a13      	ldr	r2, [pc, #76]	; (8000984 <__sinit+0x6c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	62a2      	str	r2, [r4, #40]	; 0x28
 800093a:	42a3      	cmp	r3, r4
 800093c:	bf04      	itt	eq
 800093e:	2301      	moveq	r3, #1
 8000940:	61a3      	streq	r3, [r4, #24]
 8000942:	4620      	mov	r0, r4
 8000944:	f000 f820 	bl	8000988 <__sfp>
 8000948:	6060      	str	r0, [r4, #4]
 800094a:	4620      	mov	r0, r4
 800094c:	f000 f81c 	bl	8000988 <__sfp>
 8000950:	60a0      	str	r0, [r4, #8]
 8000952:	4620      	mov	r0, r4
 8000954:	f000 f818 	bl	8000988 <__sfp>
 8000958:	2200      	movs	r2, #0
 800095a:	60e0      	str	r0, [r4, #12]
 800095c:	2104      	movs	r1, #4
 800095e:	6860      	ldr	r0, [r4, #4]
 8000960:	f7ff ff82 	bl	8000868 <std>
 8000964:	68a0      	ldr	r0, [r4, #8]
 8000966:	2201      	movs	r2, #1
 8000968:	2109      	movs	r1, #9
 800096a:	f7ff ff7d 	bl	8000868 <std>
 800096e:	68e0      	ldr	r0, [r4, #12]
 8000970:	2202      	movs	r2, #2
 8000972:	2112      	movs	r1, #18
 8000974:	f7ff ff78 	bl	8000868 <std>
 8000978:	2301      	movs	r3, #1
 800097a:	61a3      	str	r3, [r4, #24]
 800097c:	e7d2      	b.n	8000924 <__sinit+0xc>
 800097e:	bf00      	nop
 8000980:	0800171c 	.word	0x0800171c
 8000984:	080008b1 	.word	0x080008b1

08000988 <__sfp>:
 8000988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800098a:	4607      	mov	r7, r0
 800098c:	f7ff ffac 	bl	80008e8 <__sfp_lock_acquire>
 8000990:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <__sfp+0x84>)
 8000992:	681e      	ldr	r6, [r3, #0]
 8000994:	69b3      	ldr	r3, [r6, #24]
 8000996:	b913      	cbnz	r3, 800099e <__sfp+0x16>
 8000998:	4630      	mov	r0, r6
 800099a:	f7ff ffbd 	bl	8000918 <__sinit>
 800099e:	3648      	adds	r6, #72	; 0x48
 80009a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80009a4:	3b01      	subs	r3, #1
 80009a6:	d503      	bpl.n	80009b0 <__sfp+0x28>
 80009a8:	6833      	ldr	r3, [r6, #0]
 80009aa:	b30b      	cbz	r3, 80009f0 <__sfp+0x68>
 80009ac:	6836      	ldr	r6, [r6, #0]
 80009ae:	e7f7      	b.n	80009a0 <__sfp+0x18>
 80009b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80009b4:	b9d5      	cbnz	r5, 80009ec <__sfp+0x64>
 80009b6:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <__sfp+0x88>)
 80009b8:	60e3      	str	r3, [r4, #12]
 80009ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80009be:	6665      	str	r5, [r4, #100]	; 0x64
 80009c0:	f000 f847 	bl	8000a52 <__retarget_lock_init_recursive>
 80009c4:	f7ff ff96 	bl	80008f4 <__sfp_lock_release>
 80009c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80009cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80009d0:	6025      	str	r5, [r4, #0]
 80009d2:	61a5      	str	r5, [r4, #24]
 80009d4:	2208      	movs	r2, #8
 80009d6:	4629      	mov	r1, r5
 80009d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80009dc:	f7ff ff24 	bl	8000828 <memset>
 80009e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80009e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80009e8:	4620      	mov	r0, r4
 80009ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009ec:	3468      	adds	r4, #104	; 0x68
 80009ee:	e7d9      	b.n	80009a4 <__sfp+0x1c>
 80009f0:	2104      	movs	r1, #4
 80009f2:	4638      	mov	r0, r7
 80009f4:	f7ff ff62 	bl	80008bc <__sfmoreglue>
 80009f8:	4604      	mov	r4, r0
 80009fa:	6030      	str	r0, [r6, #0]
 80009fc:	2800      	cmp	r0, #0
 80009fe:	d1d5      	bne.n	80009ac <__sfp+0x24>
 8000a00:	f7ff ff78 	bl	80008f4 <__sfp_lock_release>
 8000a04:	230c      	movs	r3, #12
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	e7ee      	b.n	80009e8 <__sfp+0x60>
 8000a0a:	bf00      	nop
 8000a0c:	0800171c 	.word	0x0800171c
 8000a10:	ffff0001 	.word	0xffff0001

08000a14 <_fwalk_reent>:
 8000a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a18:	4606      	mov	r6, r0
 8000a1a:	4688      	mov	r8, r1
 8000a1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000a20:	2700      	movs	r7, #0
 8000a22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000a26:	f1b9 0901 	subs.w	r9, r9, #1
 8000a2a:	d505      	bpl.n	8000a38 <_fwalk_reent+0x24>
 8000a2c:	6824      	ldr	r4, [r4, #0]
 8000a2e:	2c00      	cmp	r4, #0
 8000a30:	d1f7      	bne.n	8000a22 <_fwalk_reent+0xe>
 8000a32:	4638      	mov	r0, r7
 8000a34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a38:	89ab      	ldrh	r3, [r5, #12]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d907      	bls.n	8000a4e <_fwalk_reent+0x3a>
 8000a3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000a42:	3301      	adds	r3, #1
 8000a44:	d003      	beq.n	8000a4e <_fwalk_reent+0x3a>
 8000a46:	4629      	mov	r1, r5
 8000a48:	4630      	mov	r0, r6
 8000a4a:	47c0      	blx	r8
 8000a4c:	4307      	orrs	r7, r0
 8000a4e:	3568      	adds	r5, #104	; 0x68
 8000a50:	e7e9      	b.n	8000a26 <_fwalk_reent+0x12>

08000a52 <__retarget_lock_init_recursive>:
 8000a52:	4770      	bx	lr

08000a54 <__retarget_lock_acquire_recursive>:
 8000a54:	4770      	bx	lr

08000a56 <__retarget_lock_release_recursive>:
 8000a56:	4770      	bx	lr

08000a58 <_malloc_r>:
 8000a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a5a:	1ccd      	adds	r5, r1, #3
 8000a5c:	f025 0503 	bic.w	r5, r5, #3
 8000a60:	3508      	adds	r5, #8
 8000a62:	2d0c      	cmp	r5, #12
 8000a64:	bf38      	it	cc
 8000a66:	250c      	movcc	r5, #12
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	4606      	mov	r6, r0
 8000a6c:	db01      	blt.n	8000a72 <_malloc_r+0x1a>
 8000a6e:	42a9      	cmp	r1, r5
 8000a70:	d903      	bls.n	8000a7a <_malloc_r+0x22>
 8000a72:	230c      	movs	r3, #12
 8000a74:	6033      	str	r3, [r6, #0]
 8000a76:	2000      	movs	r0, #0
 8000a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a7a:	f000 fda3 	bl	80015c4 <__malloc_lock>
 8000a7e:	4921      	ldr	r1, [pc, #132]	; (8000b04 <_malloc_r+0xac>)
 8000a80:	680a      	ldr	r2, [r1, #0]
 8000a82:	4614      	mov	r4, r2
 8000a84:	b99c      	cbnz	r4, 8000aae <_malloc_r+0x56>
 8000a86:	4f20      	ldr	r7, [pc, #128]	; (8000b08 <_malloc_r+0xb0>)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	b923      	cbnz	r3, 8000a96 <_malloc_r+0x3e>
 8000a8c:	4621      	mov	r1, r4
 8000a8e:	4630      	mov	r0, r6
 8000a90:	f000 fb2a 	bl	80010e8 <_sbrk_r>
 8000a94:	6038      	str	r0, [r7, #0]
 8000a96:	4629      	mov	r1, r5
 8000a98:	4630      	mov	r0, r6
 8000a9a:	f000 fb25 	bl	80010e8 <_sbrk_r>
 8000a9e:	1c43      	adds	r3, r0, #1
 8000aa0:	d123      	bne.n	8000aea <_malloc_r+0x92>
 8000aa2:	230c      	movs	r3, #12
 8000aa4:	6033      	str	r3, [r6, #0]
 8000aa6:	4630      	mov	r0, r6
 8000aa8:	f000 fd92 	bl	80015d0 <__malloc_unlock>
 8000aac:	e7e3      	b.n	8000a76 <_malloc_r+0x1e>
 8000aae:	6823      	ldr	r3, [r4, #0]
 8000ab0:	1b5b      	subs	r3, r3, r5
 8000ab2:	d417      	bmi.n	8000ae4 <_malloc_r+0x8c>
 8000ab4:	2b0b      	cmp	r3, #11
 8000ab6:	d903      	bls.n	8000ac0 <_malloc_r+0x68>
 8000ab8:	6023      	str	r3, [r4, #0]
 8000aba:	441c      	add	r4, r3
 8000abc:	6025      	str	r5, [r4, #0]
 8000abe:	e004      	b.n	8000aca <_malloc_r+0x72>
 8000ac0:	6863      	ldr	r3, [r4, #4]
 8000ac2:	42a2      	cmp	r2, r4
 8000ac4:	bf0c      	ite	eq
 8000ac6:	600b      	streq	r3, [r1, #0]
 8000ac8:	6053      	strne	r3, [r2, #4]
 8000aca:	4630      	mov	r0, r6
 8000acc:	f000 fd80 	bl	80015d0 <__malloc_unlock>
 8000ad0:	f104 000b 	add.w	r0, r4, #11
 8000ad4:	1d23      	adds	r3, r4, #4
 8000ad6:	f020 0007 	bic.w	r0, r0, #7
 8000ada:	1ac2      	subs	r2, r0, r3
 8000adc:	d0cc      	beq.n	8000a78 <_malloc_r+0x20>
 8000ade:	1a1b      	subs	r3, r3, r0
 8000ae0:	50a3      	str	r3, [r4, r2]
 8000ae2:	e7c9      	b.n	8000a78 <_malloc_r+0x20>
 8000ae4:	4622      	mov	r2, r4
 8000ae6:	6864      	ldr	r4, [r4, #4]
 8000ae8:	e7cc      	b.n	8000a84 <_malloc_r+0x2c>
 8000aea:	1cc4      	adds	r4, r0, #3
 8000aec:	f024 0403 	bic.w	r4, r4, #3
 8000af0:	42a0      	cmp	r0, r4
 8000af2:	d0e3      	beq.n	8000abc <_malloc_r+0x64>
 8000af4:	1a21      	subs	r1, r4, r0
 8000af6:	4630      	mov	r0, r6
 8000af8:	f000 faf6 	bl	80010e8 <_sbrk_r>
 8000afc:	3001      	adds	r0, #1
 8000afe:	d1dd      	bne.n	8000abc <_malloc_r+0x64>
 8000b00:	e7cf      	b.n	8000aa2 <_malloc_r+0x4a>
 8000b02:	bf00      	nop
 8000b04:	20000084 	.word	0x20000084
 8000b08:	20000088 	.word	0x20000088

08000b0c <__sfputc_r>:
 8000b0c:	6893      	ldr	r3, [r2, #8]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	b410      	push	{r4}
 8000b14:	6093      	str	r3, [r2, #8]
 8000b16:	da08      	bge.n	8000b2a <__sfputc_r+0x1e>
 8000b18:	6994      	ldr	r4, [r2, #24]
 8000b1a:	42a3      	cmp	r3, r4
 8000b1c:	db01      	blt.n	8000b22 <__sfputc_r+0x16>
 8000b1e:	290a      	cmp	r1, #10
 8000b20:	d103      	bne.n	8000b2a <__sfputc_r+0x1e>
 8000b22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b26:	f000 bb33 	b.w	8001190 <__swbuf_r>
 8000b2a:	6813      	ldr	r3, [r2, #0]
 8000b2c:	1c58      	adds	r0, r3, #1
 8000b2e:	6010      	str	r0, [r2, #0]
 8000b30:	7019      	strb	r1, [r3, #0]
 8000b32:	4608      	mov	r0, r1
 8000b34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <__sfputs_r>:
 8000b3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b3c:	4606      	mov	r6, r0
 8000b3e:	460f      	mov	r7, r1
 8000b40:	4614      	mov	r4, r2
 8000b42:	18d5      	adds	r5, r2, r3
 8000b44:	42ac      	cmp	r4, r5
 8000b46:	d101      	bne.n	8000b4c <__sfputs_r+0x12>
 8000b48:	2000      	movs	r0, #0
 8000b4a:	e007      	b.n	8000b5c <__sfputs_r+0x22>
 8000b4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b50:	463a      	mov	r2, r7
 8000b52:	4630      	mov	r0, r6
 8000b54:	f7ff ffda 	bl	8000b0c <__sfputc_r>
 8000b58:	1c43      	adds	r3, r0, #1
 8000b5a:	d1f3      	bne.n	8000b44 <__sfputs_r+0xa>
 8000b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000b60 <_vfiprintf_r>:
 8000b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b64:	460d      	mov	r5, r1
 8000b66:	b09d      	sub	sp, #116	; 0x74
 8000b68:	4614      	mov	r4, r2
 8000b6a:	4698      	mov	r8, r3
 8000b6c:	4606      	mov	r6, r0
 8000b6e:	b118      	cbz	r0, 8000b78 <_vfiprintf_r+0x18>
 8000b70:	6983      	ldr	r3, [r0, #24]
 8000b72:	b90b      	cbnz	r3, 8000b78 <_vfiprintf_r+0x18>
 8000b74:	f7ff fed0 	bl	8000918 <__sinit>
 8000b78:	4b89      	ldr	r3, [pc, #548]	; (8000da0 <_vfiprintf_r+0x240>)
 8000b7a:	429d      	cmp	r5, r3
 8000b7c:	d11b      	bne.n	8000bb6 <_vfiprintf_r+0x56>
 8000b7e:	6875      	ldr	r5, [r6, #4]
 8000b80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000b82:	07d9      	lsls	r1, r3, #31
 8000b84:	d405      	bmi.n	8000b92 <_vfiprintf_r+0x32>
 8000b86:	89ab      	ldrh	r3, [r5, #12]
 8000b88:	059a      	lsls	r2, r3, #22
 8000b8a:	d402      	bmi.n	8000b92 <_vfiprintf_r+0x32>
 8000b8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b8e:	f7ff ff61 	bl	8000a54 <__retarget_lock_acquire_recursive>
 8000b92:	89ab      	ldrh	r3, [r5, #12]
 8000b94:	071b      	lsls	r3, r3, #28
 8000b96:	d501      	bpl.n	8000b9c <_vfiprintf_r+0x3c>
 8000b98:	692b      	ldr	r3, [r5, #16]
 8000b9a:	b9eb      	cbnz	r3, 8000bd8 <_vfiprintf_r+0x78>
 8000b9c:	4629      	mov	r1, r5
 8000b9e:	4630      	mov	r0, r6
 8000ba0:	f000 fb5a 	bl	8001258 <__swsetup_r>
 8000ba4:	b1c0      	cbz	r0, 8000bd8 <_vfiprintf_r+0x78>
 8000ba6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ba8:	07dc      	lsls	r4, r3, #31
 8000baa:	d50e      	bpl.n	8000bca <_vfiprintf_r+0x6a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	b01d      	add	sp, #116	; 0x74
 8000bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bb6:	4b7b      	ldr	r3, [pc, #492]	; (8000da4 <_vfiprintf_r+0x244>)
 8000bb8:	429d      	cmp	r5, r3
 8000bba:	d101      	bne.n	8000bc0 <_vfiprintf_r+0x60>
 8000bbc:	68b5      	ldr	r5, [r6, #8]
 8000bbe:	e7df      	b.n	8000b80 <_vfiprintf_r+0x20>
 8000bc0:	4b79      	ldr	r3, [pc, #484]	; (8000da8 <_vfiprintf_r+0x248>)
 8000bc2:	429d      	cmp	r5, r3
 8000bc4:	bf08      	it	eq
 8000bc6:	68f5      	ldreq	r5, [r6, #12]
 8000bc8:	e7da      	b.n	8000b80 <_vfiprintf_r+0x20>
 8000bca:	89ab      	ldrh	r3, [r5, #12]
 8000bcc:	0598      	lsls	r0, r3, #22
 8000bce:	d4ed      	bmi.n	8000bac <_vfiprintf_r+0x4c>
 8000bd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000bd2:	f7ff ff40 	bl	8000a56 <__retarget_lock_release_recursive>
 8000bd6:	e7e9      	b.n	8000bac <_vfiprintf_r+0x4c>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	9309      	str	r3, [sp, #36]	; 0x24
 8000bdc:	2320      	movs	r3, #32
 8000bde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000be2:	f8cd 800c 	str.w	r8, [sp, #12]
 8000be6:	2330      	movs	r3, #48	; 0x30
 8000be8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000dac <_vfiprintf_r+0x24c>
 8000bec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000bf0:	f04f 0901 	mov.w	r9, #1
 8000bf4:	4623      	mov	r3, r4
 8000bf6:	469a      	mov	sl, r3
 8000bf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000bfc:	b10a      	cbz	r2, 8000c02 <_vfiprintf_r+0xa2>
 8000bfe:	2a25      	cmp	r2, #37	; 0x25
 8000c00:	d1f9      	bne.n	8000bf6 <_vfiprintf_r+0x96>
 8000c02:	ebba 0b04 	subs.w	fp, sl, r4
 8000c06:	d00b      	beq.n	8000c20 <_vfiprintf_r+0xc0>
 8000c08:	465b      	mov	r3, fp
 8000c0a:	4622      	mov	r2, r4
 8000c0c:	4629      	mov	r1, r5
 8000c0e:	4630      	mov	r0, r6
 8000c10:	f7ff ff93 	bl	8000b3a <__sfputs_r>
 8000c14:	3001      	adds	r0, #1
 8000c16:	f000 80aa 	beq.w	8000d6e <_vfiprintf_r+0x20e>
 8000c1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000c1c:	445a      	add	r2, fp
 8000c1e:	9209      	str	r2, [sp, #36]	; 0x24
 8000c20:	f89a 3000 	ldrb.w	r3, [sl]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	f000 80a2 	beq.w	8000d6e <_vfiprintf_r+0x20e>
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c34:	f10a 0a01 	add.w	sl, sl, #1
 8000c38:	9304      	str	r3, [sp, #16]
 8000c3a:	9307      	str	r3, [sp, #28]
 8000c3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000c40:	931a      	str	r3, [sp, #104]	; 0x68
 8000c42:	4654      	mov	r4, sl
 8000c44:	2205      	movs	r2, #5
 8000c46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c4a:	4858      	ldr	r0, [pc, #352]	; (8000dac <_vfiprintf_r+0x24c>)
 8000c4c:	f7ff fac8 	bl	80001e0 <memchr>
 8000c50:	9a04      	ldr	r2, [sp, #16]
 8000c52:	b9d8      	cbnz	r0, 8000c8c <_vfiprintf_r+0x12c>
 8000c54:	06d1      	lsls	r1, r2, #27
 8000c56:	bf44      	itt	mi
 8000c58:	2320      	movmi	r3, #32
 8000c5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c5e:	0713      	lsls	r3, r2, #28
 8000c60:	bf44      	itt	mi
 8000c62:	232b      	movmi	r3, #43	; 0x2b
 8000c64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c68:	f89a 3000 	ldrb.w	r3, [sl]
 8000c6c:	2b2a      	cmp	r3, #42	; 0x2a
 8000c6e:	d015      	beq.n	8000c9c <_vfiprintf_r+0x13c>
 8000c70:	9a07      	ldr	r2, [sp, #28]
 8000c72:	4654      	mov	r4, sl
 8000c74:	2000      	movs	r0, #0
 8000c76:	f04f 0c0a 	mov.w	ip, #10
 8000c7a:	4621      	mov	r1, r4
 8000c7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c80:	3b30      	subs	r3, #48	; 0x30
 8000c82:	2b09      	cmp	r3, #9
 8000c84:	d94e      	bls.n	8000d24 <_vfiprintf_r+0x1c4>
 8000c86:	b1b0      	cbz	r0, 8000cb6 <_vfiprintf_r+0x156>
 8000c88:	9207      	str	r2, [sp, #28]
 8000c8a:	e014      	b.n	8000cb6 <_vfiprintf_r+0x156>
 8000c8c:	eba0 0308 	sub.w	r3, r0, r8
 8000c90:	fa09 f303 	lsl.w	r3, r9, r3
 8000c94:	4313      	orrs	r3, r2
 8000c96:	9304      	str	r3, [sp, #16]
 8000c98:	46a2      	mov	sl, r4
 8000c9a:	e7d2      	b.n	8000c42 <_vfiprintf_r+0xe2>
 8000c9c:	9b03      	ldr	r3, [sp, #12]
 8000c9e:	1d19      	adds	r1, r3, #4
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	9103      	str	r1, [sp, #12]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	bfbb      	ittet	lt
 8000ca8:	425b      	neglt	r3, r3
 8000caa:	f042 0202 	orrlt.w	r2, r2, #2
 8000cae:	9307      	strge	r3, [sp, #28]
 8000cb0:	9307      	strlt	r3, [sp, #28]
 8000cb2:	bfb8      	it	lt
 8000cb4:	9204      	strlt	r2, [sp, #16]
 8000cb6:	7823      	ldrb	r3, [r4, #0]
 8000cb8:	2b2e      	cmp	r3, #46	; 0x2e
 8000cba:	d10c      	bne.n	8000cd6 <_vfiprintf_r+0x176>
 8000cbc:	7863      	ldrb	r3, [r4, #1]
 8000cbe:	2b2a      	cmp	r3, #42	; 0x2a
 8000cc0:	d135      	bne.n	8000d2e <_vfiprintf_r+0x1ce>
 8000cc2:	9b03      	ldr	r3, [sp, #12]
 8000cc4:	1d1a      	adds	r2, r3, #4
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	9203      	str	r2, [sp, #12]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	bfb8      	it	lt
 8000cce:	f04f 33ff 	movlt.w	r3, #4294967295
 8000cd2:	3402      	adds	r4, #2
 8000cd4:	9305      	str	r3, [sp, #20]
 8000cd6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000dbc <_vfiprintf_r+0x25c>
 8000cda:	7821      	ldrb	r1, [r4, #0]
 8000cdc:	2203      	movs	r2, #3
 8000cde:	4650      	mov	r0, sl
 8000ce0:	f7ff fa7e 	bl	80001e0 <memchr>
 8000ce4:	b140      	cbz	r0, 8000cf8 <_vfiprintf_r+0x198>
 8000ce6:	2340      	movs	r3, #64	; 0x40
 8000ce8:	eba0 000a 	sub.w	r0, r0, sl
 8000cec:	fa03 f000 	lsl.w	r0, r3, r0
 8000cf0:	9b04      	ldr	r3, [sp, #16]
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	3401      	adds	r4, #1
 8000cf6:	9304      	str	r3, [sp, #16]
 8000cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cfc:	482c      	ldr	r0, [pc, #176]	; (8000db0 <_vfiprintf_r+0x250>)
 8000cfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000d02:	2206      	movs	r2, #6
 8000d04:	f7ff fa6c 	bl	80001e0 <memchr>
 8000d08:	2800      	cmp	r0, #0
 8000d0a:	d03f      	beq.n	8000d8c <_vfiprintf_r+0x22c>
 8000d0c:	4b29      	ldr	r3, [pc, #164]	; (8000db4 <_vfiprintf_r+0x254>)
 8000d0e:	bb1b      	cbnz	r3, 8000d58 <_vfiprintf_r+0x1f8>
 8000d10:	9b03      	ldr	r3, [sp, #12]
 8000d12:	3307      	adds	r3, #7
 8000d14:	f023 0307 	bic.w	r3, r3, #7
 8000d18:	3308      	adds	r3, #8
 8000d1a:	9303      	str	r3, [sp, #12]
 8000d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d1e:	443b      	add	r3, r7
 8000d20:	9309      	str	r3, [sp, #36]	; 0x24
 8000d22:	e767      	b.n	8000bf4 <_vfiprintf_r+0x94>
 8000d24:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d28:	460c      	mov	r4, r1
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	e7a5      	b.n	8000c7a <_vfiprintf_r+0x11a>
 8000d2e:	2300      	movs	r3, #0
 8000d30:	3401      	adds	r4, #1
 8000d32:	9305      	str	r3, [sp, #20]
 8000d34:	4619      	mov	r1, r3
 8000d36:	f04f 0c0a 	mov.w	ip, #10
 8000d3a:	4620      	mov	r0, r4
 8000d3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d40:	3a30      	subs	r2, #48	; 0x30
 8000d42:	2a09      	cmp	r2, #9
 8000d44:	d903      	bls.n	8000d4e <_vfiprintf_r+0x1ee>
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d0c5      	beq.n	8000cd6 <_vfiprintf_r+0x176>
 8000d4a:	9105      	str	r1, [sp, #20]
 8000d4c:	e7c3      	b.n	8000cd6 <_vfiprintf_r+0x176>
 8000d4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d52:	4604      	mov	r4, r0
 8000d54:	2301      	movs	r3, #1
 8000d56:	e7f0      	b.n	8000d3a <_vfiprintf_r+0x1da>
 8000d58:	ab03      	add	r3, sp, #12
 8000d5a:	9300      	str	r3, [sp, #0]
 8000d5c:	462a      	mov	r2, r5
 8000d5e:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <_vfiprintf_r+0x258>)
 8000d60:	a904      	add	r1, sp, #16
 8000d62:	4630      	mov	r0, r6
 8000d64:	f3af 8000 	nop.w
 8000d68:	4607      	mov	r7, r0
 8000d6a:	1c78      	adds	r0, r7, #1
 8000d6c:	d1d6      	bne.n	8000d1c <_vfiprintf_r+0x1bc>
 8000d6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d70:	07d9      	lsls	r1, r3, #31
 8000d72:	d405      	bmi.n	8000d80 <_vfiprintf_r+0x220>
 8000d74:	89ab      	ldrh	r3, [r5, #12]
 8000d76:	059a      	lsls	r2, r3, #22
 8000d78:	d402      	bmi.n	8000d80 <_vfiprintf_r+0x220>
 8000d7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d7c:	f7ff fe6b 	bl	8000a56 <__retarget_lock_release_recursive>
 8000d80:	89ab      	ldrh	r3, [r5, #12]
 8000d82:	065b      	lsls	r3, r3, #25
 8000d84:	f53f af12 	bmi.w	8000bac <_vfiprintf_r+0x4c>
 8000d88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000d8a:	e711      	b.n	8000bb0 <_vfiprintf_r+0x50>
 8000d8c:	ab03      	add	r3, sp, #12
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	462a      	mov	r2, r5
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <_vfiprintf_r+0x258>)
 8000d94:	a904      	add	r1, sp, #16
 8000d96:	4630      	mov	r0, r6
 8000d98:	f000 f880 	bl	8000e9c <_printf_i>
 8000d9c:	e7e4      	b.n	8000d68 <_vfiprintf_r+0x208>
 8000d9e:	bf00      	nop
 8000da0:	08001740 	.word	0x08001740
 8000da4:	08001760 	.word	0x08001760
 8000da8:	08001720 	.word	0x08001720
 8000dac:	08001780 	.word	0x08001780
 8000db0:	0800178a 	.word	0x0800178a
 8000db4:	00000000 	.word	0x00000000
 8000db8:	08000b3b 	.word	0x08000b3b
 8000dbc:	08001786 	.word	0x08001786

08000dc0 <_printf_common>:
 8000dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc4:	4616      	mov	r6, r2
 8000dc6:	4699      	mov	r9, r3
 8000dc8:	688a      	ldr	r2, [r1, #8]
 8000dca:	690b      	ldr	r3, [r1, #16]
 8000dcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	bfb8      	it	lt
 8000dd4:	4613      	movlt	r3, r2
 8000dd6:	6033      	str	r3, [r6, #0]
 8000dd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000ddc:	4607      	mov	r7, r0
 8000dde:	460c      	mov	r4, r1
 8000de0:	b10a      	cbz	r2, 8000de6 <_printf_common+0x26>
 8000de2:	3301      	adds	r3, #1
 8000de4:	6033      	str	r3, [r6, #0]
 8000de6:	6823      	ldr	r3, [r4, #0]
 8000de8:	0699      	lsls	r1, r3, #26
 8000dea:	bf42      	ittt	mi
 8000dec:	6833      	ldrmi	r3, [r6, #0]
 8000dee:	3302      	addmi	r3, #2
 8000df0:	6033      	strmi	r3, [r6, #0]
 8000df2:	6825      	ldr	r5, [r4, #0]
 8000df4:	f015 0506 	ands.w	r5, r5, #6
 8000df8:	d106      	bne.n	8000e08 <_printf_common+0x48>
 8000dfa:	f104 0a19 	add.w	sl, r4, #25
 8000dfe:	68e3      	ldr	r3, [r4, #12]
 8000e00:	6832      	ldr	r2, [r6, #0]
 8000e02:	1a9b      	subs	r3, r3, r2
 8000e04:	42ab      	cmp	r3, r5
 8000e06:	dc26      	bgt.n	8000e56 <_printf_common+0x96>
 8000e08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000e0c:	1e13      	subs	r3, r2, #0
 8000e0e:	6822      	ldr	r2, [r4, #0]
 8000e10:	bf18      	it	ne
 8000e12:	2301      	movne	r3, #1
 8000e14:	0692      	lsls	r2, r2, #26
 8000e16:	d42b      	bmi.n	8000e70 <_printf_common+0xb0>
 8000e18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000e1c:	4649      	mov	r1, r9
 8000e1e:	4638      	mov	r0, r7
 8000e20:	47c0      	blx	r8
 8000e22:	3001      	adds	r0, #1
 8000e24:	d01e      	beq.n	8000e64 <_printf_common+0xa4>
 8000e26:	6823      	ldr	r3, [r4, #0]
 8000e28:	68e5      	ldr	r5, [r4, #12]
 8000e2a:	6832      	ldr	r2, [r6, #0]
 8000e2c:	f003 0306 	and.w	r3, r3, #6
 8000e30:	2b04      	cmp	r3, #4
 8000e32:	bf08      	it	eq
 8000e34:	1aad      	subeq	r5, r5, r2
 8000e36:	68a3      	ldr	r3, [r4, #8]
 8000e38:	6922      	ldr	r2, [r4, #16]
 8000e3a:	bf0c      	ite	eq
 8000e3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e40:	2500      	movne	r5, #0
 8000e42:	4293      	cmp	r3, r2
 8000e44:	bfc4      	itt	gt
 8000e46:	1a9b      	subgt	r3, r3, r2
 8000e48:	18ed      	addgt	r5, r5, r3
 8000e4a:	2600      	movs	r6, #0
 8000e4c:	341a      	adds	r4, #26
 8000e4e:	42b5      	cmp	r5, r6
 8000e50:	d11a      	bne.n	8000e88 <_printf_common+0xc8>
 8000e52:	2000      	movs	r0, #0
 8000e54:	e008      	b.n	8000e68 <_printf_common+0xa8>
 8000e56:	2301      	movs	r3, #1
 8000e58:	4652      	mov	r2, sl
 8000e5a:	4649      	mov	r1, r9
 8000e5c:	4638      	mov	r0, r7
 8000e5e:	47c0      	blx	r8
 8000e60:	3001      	adds	r0, #1
 8000e62:	d103      	bne.n	8000e6c <_printf_common+0xac>
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6c:	3501      	adds	r5, #1
 8000e6e:	e7c6      	b.n	8000dfe <_printf_common+0x3e>
 8000e70:	18e1      	adds	r1, r4, r3
 8000e72:	1c5a      	adds	r2, r3, #1
 8000e74:	2030      	movs	r0, #48	; 0x30
 8000e76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000e7a:	4422      	add	r2, r4
 8000e7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000e80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000e84:	3302      	adds	r3, #2
 8000e86:	e7c7      	b.n	8000e18 <_printf_common+0x58>
 8000e88:	2301      	movs	r3, #1
 8000e8a:	4622      	mov	r2, r4
 8000e8c:	4649      	mov	r1, r9
 8000e8e:	4638      	mov	r0, r7
 8000e90:	47c0      	blx	r8
 8000e92:	3001      	adds	r0, #1
 8000e94:	d0e6      	beq.n	8000e64 <_printf_common+0xa4>
 8000e96:	3601      	adds	r6, #1
 8000e98:	e7d9      	b.n	8000e4e <_printf_common+0x8e>
	...

08000e9c <_printf_i>:
 8000e9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000ea0:	460c      	mov	r4, r1
 8000ea2:	4691      	mov	r9, r2
 8000ea4:	7e27      	ldrb	r7, [r4, #24]
 8000ea6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000ea8:	2f78      	cmp	r7, #120	; 0x78
 8000eaa:	4680      	mov	r8, r0
 8000eac:	469a      	mov	sl, r3
 8000eae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000eb2:	d807      	bhi.n	8000ec4 <_printf_i+0x28>
 8000eb4:	2f62      	cmp	r7, #98	; 0x62
 8000eb6:	d80a      	bhi.n	8000ece <_printf_i+0x32>
 8000eb8:	2f00      	cmp	r7, #0
 8000eba:	f000 80d8 	beq.w	800106e <_printf_i+0x1d2>
 8000ebe:	2f58      	cmp	r7, #88	; 0x58
 8000ec0:	f000 80a3 	beq.w	800100a <_printf_i+0x16e>
 8000ec4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000ec8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000ecc:	e03a      	b.n	8000f44 <_printf_i+0xa8>
 8000ece:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000ed2:	2b15      	cmp	r3, #21
 8000ed4:	d8f6      	bhi.n	8000ec4 <_printf_i+0x28>
 8000ed6:	a001      	add	r0, pc, #4	; (adr r0, 8000edc <_printf_i+0x40>)
 8000ed8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8000edc:	08000f35 	.word	0x08000f35
 8000ee0:	08000f49 	.word	0x08000f49
 8000ee4:	08000ec5 	.word	0x08000ec5
 8000ee8:	08000ec5 	.word	0x08000ec5
 8000eec:	08000ec5 	.word	0x08000ec5
 8000ef0:	08000ec5 	.word	0x08000ec5
 8000ef4:	08000f49 	.word	0x08000f49
 8000ef8:	08000ec5 	.word	0x08000ec5
 8000efc:	08000ec5 	.word	0x08000ec5
 8000f00:	08000ec5 	.word	0x08000ec5
 8000f04:	08000ec5 	.word	0x08000ec5
 8000f08:	08001055 	.word	0x08001055
 8000f0c:	08000f79 	.word	0x08000f79
 8000f10:	08001037 	.word	0x08001037
 8000f14:	08000ec5 	.word	0x08000ec5
 8000f18:	08000ec5 	.word	0x08000ec5
 8000f1c:	08001077 	.word	0x08001077
 8000f20:	08000ec5 	.word	0x08000ec5
 8000f24:	08000f79 	.word	0x08000f79
 8000f28:	08000ec5 	.word	0x08000ec5
 8000f2c:	08000ec5 	.word	0x08000ec5
 8000f30:	0800103f 	.word	0x0800103f
 8000f34:	680b      	ldr	r3, [r1, #0]
 8000f36:	1d1a      	adds	r2, r3, #4
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	600a      	str	r2, [r1, #0]
 8000f3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000f40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000f44:	2301      	movs	r3, #1
 8000f46:	e0a3      	b.n	8001090 <_printf_i+0x1f4>
 8000f48:	6825      	ldr	r5, [r4, #0]
 8000f4a:	6808      	ldr	r0, [r1, #0]
 8000f4c:	062e      	lsls	r6, r5, #24
 8000f4e:	f100 0304 	add.w	r3, r0, #4
 8000f52:	d50a      	bpl.n	8000f6a <_printf_i+0xce>
 8000f54:	6805      	ldr	r5, [r0, #0]
 8000f56:	600b      	str	r3, [r1, #0]
 8000f58:	2d00      	cmp	r5, #0
 8000f5a:	da03      	bge.n	8000f64 <_printf_i+0xc8>
 8000f5c:	232d      	movs	r3, #45	; 0x2d
 8000f5e:	426d      	negs	r5, r5
 8000f60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f64:	485e      	ldr	r0, [pc, #376]	; (80010e0 <_printf_i+0x244>)
 8000f66:	230a      	movs	r3, #10
 8000f68:	e019      	b.n	8000f9e <_printf_i+0x102>
 8000f6a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8000f6e:	6805      	ldr	r5, [r0, #0]
 8000f70:	600b      	str	r3, [r1, #0]
 8000f72:	bf18      	it	ne
 8000f74:	b22d      	sxthne	r5, r5
 8000f76:	e7ef      	b.n	8000f58 <_printf_i+0xbc>
 8000f78:	680b      	ldr	r3, [r1, #0]
 8000f7a:	6825      	ldr	r5, [r4, #0]
 8000f7c:	1d18      	adds	r0, r3, #4
 8000f7e:	6008      	str	r0, [r1, #0]
 8000f80:	0628      	lsls	r0, r5, #24
 8000f82:	d501      	bpl.n	8000f88 <_printf_i+0xec>
 8000f84:	681d      	ldr	r5, [r3, #0]
 8000f86:	e002      	b.n	8000f8e <_printf_i+0xf2>
 8000f88:	0669      	lsls	r1, r5, #25
 8000f8a:	d5fb      	bpl.n	8000f84 <_printf_i+0xe8>
 8000f8c:	881d      	ldrh	r5, [r3, #0]
 8000f8e:	4854      	ldr	r0, [pc, #336]	; (80010e0 <_printf_i+0x244>)
 8000f90:	2f6f      	cmp	r7, #111	; 0x6f
 8000f92:	bf0c      	ite	eq
 8000f94:	2308      	moveq	r3, #8
 8000f96:	230a      	movne	r3, #10
 8000f98:	2100      	movs	r1, #0
 8000f9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000f9e:	6866      	ldr	r6, [r4, #4]
 8000fa0:	60a6      	str	r6, [r4, #8]
 8000fa2:	2e00      	cmp	r6, #0
 8000fa4:	bfa2      	ittt	ge
 8000fa6:	6821      	ldrge	r1, [r4, #0]
 8000fa8:	f021 0104 	bicge.w	r1, r1, #4
 8000fac:	6021      	strge	r1, [r4, #0]
 8000fae:	b90d      	cbnz	r5, 8000fb4 <_printf_i+0x118>
 8000fb0:	2e00      	cmp	r6, #0
 8000fb2:	d04d      	beq.n	8001050 <_printf_i+0x1b4>
 8000fb4:	4616      	mov	r6, r2
 8000fb6:	fbb5 f1f3 	udiv	r1, r5, r3
 8000fba:	fb03 5711 	mls	r7, r3, r1, r5
 8000fbe:	5dc7      	ldrb	r7, [r0, r7]
 8000fc0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000fc4:	462f      	mov	r7, r5
 8000fc6:	42bb      	cmp	r3, r7
 8000fc8:	460d      	mov	r5, r1
 8000fca:	d9f4      	bls.n	8000fb6 <_printf_i+0x11a>
 8000fcc:	2b08      	cmp	r3, #8
 8000fce:	d10b      	bne.n	8000fe8 <_printf_i+0x14c>
 8000fd0:	6823      	ldr	r3, [r4, #0]
 8000fd2:	07df      	lsls	r7, r3, #31
 8000fd4:	d508      	bpl.n	8000fe8 <_printf_i+0x14c>
 8000fd6:	6923      	ldr	r3, [r4, #16]
 8000fd8:	6861      	ldr	r1, [r4, #4]
 8000fda:	4299      	cmp	r1, r3
 8000fdc:	bfde      	ittt	le
 8000fde:	2330      	movle	r3, #48	; 0x30
 8000fe0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000fe4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000fe8:	1b92      	subs	r2, r2, r6
 8000fea:	6122      	str	r2, [r4, #16]
 8000fec:	f8cd a000 	str.w	sl, [sp]
 8000ff0:	464b      	mov	r3, r9
 8000ff2:	aa03      	add	r2, sp, #12
 8000ff4:	4621      	mov	r1, r4
 8000ff6:	4640      	mov	r0, r8
 8000ff8:	f7ff fee2 	bl	8000dc0 <_printf_common>
 8000ffc:	3001      	adds	r0, #1
 8000ffe:	d14c      	bne.n	800109a <_printf_i+0x1fe>
 8001000:	f04f 30ff 	mov.w	r0, #4294967295
 8001004:	b004      	add	sp, #16
 8001006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800100a:	4835      	ldr	r0, [pc, #212]	; (80010e0 <_printf_i+0x244>)
 800100c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001010:	6823      	ldr	r3, [r4, #0]
 8001012:	680e      	ldr	r6, [r1, #0]
 8001014:	061f      	lsls	r7, r3, #24
 8001016:	f856 5b04 	ldr.w	r5, [r6], #4
 800101a:	600e      	str	r6, [r1, #0]
 800101c:	d514      	bpl.n	8001048 <_printf_i+0x1ac>
 800101e:	07d9      	lsls	r1, r3, #31
 8001020:	bf44      	itt	mi
 8001022:	f043 0320 	orrmi.w	r3, r3, #32
 8001026:	6023      	strmi	r3, [r4, #0]
 8001028:	b91d      	cbnz	r5, 8001032 <_printf_i+0x196>
 800102a:	6823      	ldr	r3, [r4, #0]
 800102c:	f023 0320 	bic.w	r3, r3, #32
 8001030:	6023      	str	r3, [r4, #0]
 8001032:	2310      	movs	r3, #16
 8001034:	e7b0      	b.n	8000f98 <_printf_i+0xfc>
 8001036:	6823      	ldr	r3, [r4, #0]
 8001038:	f043 0320 	orr.w	r3, r3, #32
 800103c:	6023      	str	r3, [r4, #0]
 800103e:	2378      	movs	r3, #120	; 0x78
 8001040:	4828      	ldr	r0, [pc, #160]	; (80010e4 <_printf_i+0x248>)
 8001042:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001046:	e7e3      	b.n	8001010 <_printf_i+0x174>
 8001048:	065e      	lsls	r6, r3, #25
 800104a:	bf48      	it	mi
 800104c:	b2ad      	uxthmi	r5, r5
 800104e:	e7e6      	b.n	800101e <_printf_i+0x182>
 8001050:	4616      	mov	r6, r2
 8001052:	e7bb      	b.n	8000fcc <_printf_i+0x130>
 8001054:	680b      	ldr	r3, [r1, #0]
 8001056:	6826      	ldr	r6, [r4, #0]
 8001058:	6960      	ldr	r0, [r4, #20]
 800105a:	1d1d      	adds	r5, r3, #4
 800105c:	600d      	str	r5, [r1, #0]
 800105e:	0635      	lsls	r5, r6, #24
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	d501      	bpl.n	8001068 <_printf_i+0x1cc>
 8001064:	6018      	str	r0, [r3, #0]
 8001066:	e002      	b.n	800106e <_printf_i+0x1d2>
 8001068:	0671      	lsls	r1, r6, #25
 800106a:	d5fb      	bpl.n	8001064 <_printf_i+0x1c8>
 800106c:	8018      	strh	r0, [r3, #0]
 800106e:	2300      	movs	r3, #0
 8001070:	6123      	str	r3, [r4, #16]
 8001072:	4616      	mov	r6, r2
 8001074:	e7ba      	b.n	8000fec <_printf_i+0x150>
 8001076:	680b      	ldr	r3, [r1, #0]
 8001078:	1d1a      	adds	r2, r3, #4
 800107a:	600a      	str	r2, [r1, #0]
 800107c:	681e      	ldr	r6, [r3, #0]
 800107e:	6862      	ldr	r2, [r4, #4]
 8001080:	2100      	movs	r1, #0
 8001082:	4630      	mov	r0, r6
 8001084:	f7ff f8ac 	bl	80001e0 <memchr>
 8001088:	b108      	cbz	r0, 800108e <_printf_i+0x1f2>
 800108a:	1b80      	subs	r0, r0, r6
 800108c:	6060      	str	r0, [r4, #4]
 800108e:	6863      	ldr	r3, [r4, #4]
 8001090:	6123      	str	r3, [r4, #16]
 8001092:	2300      	movs	r3, #0
 8001094:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001098:	e7a8      	b.n	8000fec <_printf_i+0x150>
 800109a:	6923      	ldr	r3, [r4, #16]
 800109c:	4632      	mov	r2, r6
 800109e:	4649      	mov	r1, r9
 80010a0:	4640      	mov	r0, r8
 80010a2:	47d0      	blx	sl
 80010a4:	3001      	adds	r0, #1
 80010a6:	d0ab      	beq.n	8001000 <_printf_i+0x164>
 80010a8:	6823      	ldr	r3, [r4, #0]
 80010aa:	079b      	lsls	r3, r3, #30
 80010ac:	d413      	bmi.n	80010d6 <_printf_i+0x23a>
 80010ae:	68e0      	ldr	r0, [r4, #12]
 80010b0:	9b03      	ldr	r3, [sp, #12]
 80010b2:	4298      	cmp	r0, r3
 80010b4:	bfb8      	it	lt
 80010b6:	4618      	movlt	r0, r3
 80010b8:	e7a4      	b.n	8001004 <_printf_i+0x168>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4632      	mov	r2, r6
 80010be:	4649      	mov	r1, r9
 80010c0:	4640      	mov	r0, r8
 80010c2:	47d0      	blx	sl
 80010c4:	3001      	adds	r0, #1
 80010c6:	d09b      	beq.n	8001000 <_printf_i+0x164>
 80010c8:	3501      	adds	r5, #1
 80010ca:	68e3      	ldr	r3, [r4, #12]
 80010cc:	9903      	ldr	r1, [sp, #12]
 80010ce:	1a5b      	subs	r3, r3, r1
 80010d0:	42ab      	cmp	r3, r5
 80010d2:	dcf2      	bgt.n	80010ba <_printf_i+0x21e>
 80010d4:	e7eb      	b.n	80010ae <_printf_i+0x212>
 80010d6:	2500      	movs	r5, #0
 80010d8:	f104 0619 	add.w	r6, r4, #25
 80010dc:	e7f5      	b.n	80010ca <_printf_i+0x22e>
 80010de:	bf00      	nop
 80010e0:	08001791 	.word	0x08001791
 80010e4:	080017a2 	.word	0x080017a2

080010e8 <_sbrk_r>:
 80010e8:	b538      	push	{r3, r4, r5, lr}
 80010ea:	4d06      	ldr	r5, [pc, #24]	; (8001104 <_sbrk_r+0x1c>)
 80010ec:	2300      	movs	r3, #0
 80010ee:	4604      	mov	r4, r0
 80010f0:	4608      	mov	r0, r1
 80010f2:	602b      	str	r3, [r5, #0]
 80010f4:	f7ff fa78 	bl	80005e8 <_sbrk>
 80010f8:	1c43      	adds	r3, r0, #1
 80010fa:	d102      	bne.n	8001102 <_sbrk_r+0x1a>
 80010fc:	682b      	ldr	r3, [r5, #0]
 80010fe:	b103      	cbz	r3, 8001102 <_sbrk_r+0x1a>
 8001100:	6023      	str	r3, [r4, #0]
 8001102:	bd38      	pop	{r3, r4, r5, pc}
 8001104:	200000ac 	.word	0x200000ac

08001108 <__sread>:
 8001108:	b510      	push	{r4, lr}
 800110a:	460c      	mov	r4, r1
 800110c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001110:	f000 fab4 	bl	800167c <_read_r>
 8001114:	2800      	cmp	r0, #0
 8001116:	bfab      	itete	ge
 8001118:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800111a:	89a3      	ldrhlt	r3, [r4, #12]
 800111c:	181b      	addge	r3, r3, r0
 800111e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001122:	bfac      	ite	ge
 8001124:	6563      	strge	r3, [r4, #84]	; 0x54
 8001126:	81a3      	strhlt	r3, [r4, #12]
 8001128:	bd10      	pop	{r4, pc}

0800112a <__swrite>:
 800112a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800112e:	461f      	mov	r7, r3
 8001130:	898b      	ldrh	r3, [r1, #12]
 8001132:	05db      	lsls	r3, r3, #23
 8001134:	4605      	mov	r5, r0
 8001136:	460c      	mov	r4, r1
 8001138:	4616      	mov	r6, r2
 800113a:	d505      	bpl.n	8001148 <__swrite+0x1e>
 800113c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001140:	2302      	movs	r3, #2
 8001142:	2200      	movs	r2, #0
 8001144:	f000 f9c8 	bl	80014d8 <_lseek_r>
 8001148:	89a3      	ldrh	r3, [r4, #12]
 800114a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800114e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001152:	81a3      	strh	r3, [r4, #12]
 8001154:	4632      	mov	r2, r6
 8001156:	463b      	mov	r3, r7
 8001158:	4628      	mov	r0, r5
 800115a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800115e:	f000 b869 	b.w	8001234 <_write_r>

08001162 <__sseek>:
 8001162:	b510      	push	{r4, lr}
 8001164:	460c      	mov	r4, r1
 8001166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800116a:	f000 f9b5 	bl	80014d8 <_lseek_r>
 800116e:	1c43      	adds	r3, r0, #1
 8001170:	89a3      	ldrh	r3, [r4, #12]
 8001172:	bf15      	itete	ne
 8001174:	6560      	strne	r0, [r4, #84]	; 0x54
 8001176:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800117a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800117e:	81a3      	strheq	r3, [r4, #12]
 8001180:	bf18      	it	ne
 8001182:	81a3      	strhne	r3, [r4, #12]
 8001184:	bd10      	pop	{r4, pc}

08001186 <__sclose>:
 8001186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800118a:	f000 b8d3 	b.w	8001334 <_close_r>
	...

08001190 <__swbuf_r>:
 8001190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001192:	460e      	mov	r6, r1
 8001194:	4614      	mov	r4, r2
 8001196:	4605      	mov	r5, r0
 8001198:	b118      	cbz	r0, 80011a2 <__swbuf_r+0x12>
 800119a:	6983      	ldr	r3, [r0, #24]
 800119c:	b90b      	cbnz	r3, 80011a2 <__swbuf_r+0x12>
 800119e:	f7ff fbbb 	bl	8000918 <__sinit>
 80011a2:	4b21      	ldr	r3, [pc, #132]	; (8001228 <__swbuf_r+0x98>)
 80011a4:	429c      	cmp	r4, r3
 80011a6:	d12b      	bne.n	8001200 <__swbuf_r+0x70>
 80011a8:	686c      	ldr	r4, [r5, #4]
 80011aa:	69a3      	ldr	r3, [r4, #24]
 80011ac:	60a3      	str	r3, [r4, #8]
 80011ae:	89a3      	ldrh	r3, [r4, #12]
 80011b0:	071a      	lsls	r2, r3, #28
 80011b2:	d52f      	bpl.n	8001214 <__swbuf_r+0x84>
 80011b4:	6923      	ldr	r3, [r4, #16]
 80011b6:	b36b      	cbz	r3, 8001214 <__swbuf_r+0x84>
 80011b8:	6923      	ldr	r3, [r4, #16]
 80011ba:	6820      	ldr	r0, [r4, #0]
 80011bc:	1ac0      	subs	r0, r0, r3
 80011be:	6963      	ldr	r3, [r4, #20]
 80011c0:	b2f6      	uxtb	r6, r6
 80011c2:	4283      	cmp	r3, r0
 80011c4:	4637      	mov	r7, r6
 80011c6:	dc04      	bgt.n	80011d2 <__swbuf_r+0x42>
 80011c8:	4621      	mov	r1, r4
 80011ca:	4628      	mov	r0, r5
 80011cc:	f000 f948 	bl	8001460 <_fflush_r>
 80011d0:	bb30      	cbnz	r0, 8001220 <__swbuf_r+0x90>
 80011d2:	68a3      	ldr	r3, [r4, #8]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	60a3      	str	r3, [r4, #8]
 80011d8:	6823      	ldr	r3, [r4, #0]
 80011da:	1c5a      	adds	r2, r3, #1
 80011dc:	6022      	str	r2, [r4, #0]
 80011de:	701e      	strb	r6, [r3, #0]
 80011e0:	6963      	ldr	r3, [r4, #20]
 80011e2:	3001      	adds	r0, #1
 80011e4:	4283      	cmp	r3, r0
 80011e6:	d004      	beq.n	80011f2 <__swbuf_r+0x62>
 80011e8:	89a3      	ldrh	r3, [r4, #12]
 80011ea:	07db      	lsls	r3, r3, #31
 80011ec:	d506      	bpl.n	80011fc <__swbuf_r+0x6c>
 80011ee:	2e0a      	cmp	r6, #10
 80011f0:	d104      	bne.n	80011fc <__swbuf_r+0x6c>
 80011f2:	4621      	mov	r1, r4
 80011f4:	4628      	mov	r0, r5
 80011f6:	f000 f933 	bl	8001460 <_fflush_r>
 80011fa:	b988      	cbnz	r0, 8001220 <__swbuf_r+0x90>
 80011fc:	4638      	mov	r0, r7
 80011fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001200:	4b0a      	ldr	r3, [pc, #40]	; (800122c <__swbuf_r+0x9c>)
 8001202:	429c      	cmp	r4, r3
 8001204:	d101      	bne.n	800120a <__swbuf_r+0x7a>
 8001206:	68ac      	ldr	r4, [r5, #8]
 8001208:	e7cf      	b.n	80011aa <__swbuf_r+0x1a>
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <__swbuf_r+0xa0>)
 800120c:	429c      	cmp	r4, r3
 800120e:	bf08      	it	eq
 8001210:	68ec      	ldreq	r4, [r5, #12]
 8001212:	e7ca      	b.n	80011aa <__swbuf_r+0x1a>
 8001214:	4621      	mov	r1, r4
 8001216:	4628      	mov	r0, r5
 8001218:	f000 f81e 	bl	8001258 <__swsetup_r>
 800121c:	2800      	cmp	r0, #0
 800121e:	d0cb      	beq.n	80011b8 <__swbuf_r+0x28>
 8001220:	f04f 37ff 	mov.w	r7, #4294967295
 8001224:	e7ea      	b.n	80011fc <__swbuf_r+0x6c>
 8001226:	bf00      	nop
 8001228:	08001740 	.word	0x08001740
 800122c:	08001760 	.word	0x08001760
 8001230:	08001720 	.word	0x08001720

08001234 <_write_r>:
 8001234:	b538      	push	{r3, r4, r5, lr}
 8001236:	4d07      	ldr	r5, [pc, #28]	; (8001254 <_write_r+0x20>)
 8001238:	4604      	mov	r4, r0
 800123a:	4608      	mov	r0, r1
 800123c:	4611      	mov	r1, r2
 800123e:	2200      	movs	r2, #0
 8001240:	602a      	str	r2, [r5, #0]
 8001242:	461a      	mov	r2, r3
 8001244:	f7ff f97f 	bl	8000546 <_write>
 8001248:	1c43      	adds	r3, r0, #1
 800124a:	d102      	bne.n	8001252 <_write_r+0x1e>
 800124c:	682b      	ldr	r3, [r5, #0]
 800124e:	b103      	cbz	r3, 8001252 <_write_r+0x1e>
 8001250:	6023      	str	r3, [r4, #0]
 8001252:	bd38      	pop	{r3, r4, r5, pc}
 8001254:	200000ac 	.word	0x200000ac

08001258 <__swsetup_r>:
 8001258:	4b32      	ldr	r3, [pc, #200]	; (8001324 <__swsetup_r+0xcc>)
 800125a:	b570      	push	{r4, r5, r6, lr}
 800125c:	681d      	ldr	r5, [r3, #0]
 800125e:	4606      	mov	r6, r0
 8001260:	460c      	mov	r4, r1
 8001262:	b125      	cbz	r5, 800126e <__swsetup_r+0x16>
 8001264:	69ab      	ldr	r3, [r5, #24]
 8001266:	b913      	cbnz	r3, 800126e <__swsetup_r+0x16>
 8001268:	4628      	mov	r0, r5
 800126a:	f7ff fb55 	bl	8000918 <__sinit>
 800126e:	4b2e      	ldr	r3, [pc, #184]	; (8001328 <__swsetup_r+0xd0>)
 8001270:	429c      	cmp	r4, r3
 8001272:	d10f      	bne.n	8001294 <__swsetup_r+0x3c>
 8001274:	686c      	ldr	r4, [r5, #4]
 8001276:	89a3      	ldrh	r3, [r4, #12]
 8001278:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800127c:	0719      	lsls	r1, r3, #28
 800127e:	d42c      	bmi.n	80012da <__swsetup_r+0x82>
 8001280:	06dd      	lsls	r5, r3, #27
 8001282:	d411      	bmi.n	80012a8 <__swsetup_r+0x50>
 8001284:	2309      	movs	r3, #9
 8001286:	6033      	str	r3, [r6, #0]
 8001288:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800128c:	81a3      	strh	r3, [r4, #12]
 800128e:	f04f 30ff 	mov.w	r0, #4294967295
 8001292:	e03e      	b.n	8001312 <__swsetup_r+0xba>
 8001294:	4b25      	ldr	r3, [pc, #148]	; (800132c <__swsetup_r+0xd4>)
 8001296:	429c      	cmp	r4, r3
 8001298:	d101      	bne.n	800129e <__swsetup_r+0x46>
 800129a:	68ac      	ldr	r4, [r5, #8]
 800129c:	e7eb      	b.n	8001276 <__swsetup_r+0x1e>
 800129e:	4b24      	ldr	r3, [pc, #144]	; (8001330 <__swsetup_r+0xd8>)
 80012a0:	429c      	cmp	r4, r3
 80012a2:	bf08      	it	eq
 80012a4:	68ec      	ldreq	r4, [r5, #12]
 80012a6:	e7e6      	b.n	8001276 <__swsetup_r+0x1e>
 80012a8:	0758      	lsls	r0, r3, #29
 80012aa:	d512      	bpl.n	80012d2 <__swsetup_r+0x7a>
 80012ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012ae:	b141      	cbz	r1, 80012c2 <__swsetup_r+0x6a>
 80012b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80012b4:	4299      	cmp	r1, r3
 80012b6:	d002      	beq.n	80012be <__swsetup_r+0x66>
 80012b8:	4630      	mov	r0, r6
 80012ba:	f000 f98f 	bl	80015dc <_free_r>
 80012be:	2300      	movs	r3, #0
 80012c0:	6363      	str	r3, [r4, #52]	; 0x34
 80012c2:	89a3      	ldrh	r3, [r4, #12]
 80012c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80012c8:	81a3      	strh	r3, [r4, #12]
 80012ca:	2300      	movs	r3, #0
 80012cc:	6063      	str	r3, [r4, #4]
 80012ce:	6923      	ldr	r3, [r4, #16]
 80012d0:	6023      	str	r3, [r4, #0]
 80012d2:	89a3      	ldrh	r3, [r4, #12]
 80012d4:	f043 0308 	orr.w	r3, r3, #8
 80012d8:	81a3      	strh	r3, [r4, #12]
 80012da:	6923      	ldr	r3, [r4, #16]
 80012dc:	b94b      	cbnz	r3, 80012f2 <__swsetup_r+0x9a>
 80012de:	89a3      	ldrh	r3, [r4, #12]
 80012e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80012e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012e8:	d003      	beq.n	80012f2 <__swsetup_r+0x9a>
 80012ea:	4621      	mov	r1, r4
 80012ec:	4630      	mov	r0, r6
 80012ee:	f000 f929 	bl	8001544 <__smakebuf_r>
 80012f2:	89a0      	ldrh	r0, [r4, #12]
 80012f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80012f8:	f010 0301 	ands.w	r3, r0, #1
 80012fc:	d00a      	beq.n	8001314 <__swsetup_r+0xbc>
 80012fe:	2300      	movs	r3, #0
 8001300:	60a3      	str	r3, [r4, #8]
 8001302:	6963      	ldr	r3, [r4, #20]
 8001304:	425b      	negs	r3, r3
 8001306:	61a3      	str	r3, [r4, #24]
 8001308:	6923      	ldr	r3, [r4, #16]
 800130a:	b943      	cbnz	r3, 800131e <__swsetup_r+0xc6>
 800130c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001310:	d1ba      	bne.n	8001288 <__swsetup_r+0x30>
 8001312:	bd70      	pop	{r4, r5, r6, pc}
 8001314:	0781      	lsls	r1, r0, #30
 8001316:	bf58      	it	pl
 8001318:	6963      	ldrpl	r3, [r4, #20]
 800131a:	60a3      	str	r3, [r4, #8]
 800131c:	e7f4      	b.n	8001308 <__swsetup_r+0xb0>
 800131e:	2000      	movs	r0, #0
 8001320:	e7f7      	b.n	8001312 <__swsetup_r+0xba>
 8001322:	bf00      	nop
 8001324:	20000000 	.word	0x20000000
 8001328:	08001740 	.word	0x08001740
 800132c:	08001760 	.word	0x08001760
 8001330:	08001720 	.word	0x08001720

08001334 <_close_r>:
 8001334:	b538      	push	{r3, r4, r5, lr}
 8001336:	4d06      	ldr	r5, [pc, #24]	; (8001350 <_close_r+0x1c>)
 8001338:	2300      	movs	r3, #0
 800133a:	4604      	mov	r4, r0
 800133c:	4608      	mov	r0, r1
 800133e:	602b      	str	r3, [r5, #0]
 8001340:	f7ff f91d 	bl	800057e <_close>
 8001344:	1c43      	adds	r3, r0, #1
 8001346:	d102      	bne.n	800134e <_close_r+0x1a>
 8001348:	682b      	ldr	r3, [r5, #0]
 800134a:	b103      	cbz	r3, 800134e <_close_r+0x1a>
 800134c:	6023      	str	r3, [r4, #0]
 800134e:	bd38      	pop	{r3, r4, r5, pc}
 8001350:	200000ac 	.word	0x200000ac

08001354 <__sflush_r>:
 8001354:	898a      	ldrh	r2, [r1, #12]
 8001356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800135a:	4605      	mov	r5, r0
 800135c:	0710      	lsls	r0, r2, #28
 800135e:	460c      	mov	r4, r1
 8001360:	d458      	bmi.n	8001414 <__sflush_r+0xc0>
 8001362:	684b      	ldr	r3, [r1, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	dc05      	bgt.n	8001374 <__sflush_r+0x20>
 8001368:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800136a:	2b00      	cmp	r3, #0
 800136c:	dc02      	bgt.n	8001374 <__sflush_r+0x20>
 800136e:	2000      	movs	r0, #0
 8001370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001374:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001376:	2e00      	cmp	r6, #0
 8001378:	d0f9      	beq.n	800136e <__sflush_r+0x1a>
 800137a:	2300      	movs	r3, #0
 800137c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001380:	682f      	ldr	r7, [r5, #0]
 8001382:	602b      	str	r3, [r5, #0]
 8001384:	d032      	beq.n	80013ec <__sflush_r+0x98>
 8001386:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001388:	89a3      	ldrh	r3, [r4, #12]
 800138a:	075a      	lsls	r2, r3, #29
 800138c:	d505      	bpl.n	800139a <__sflush_r+0x46>
 800138e:	6863      	ldr	r3, [r4, #4]
 8001390:	1ac0      	subs	r0, r0, r3
 8001392:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001394:	b10b      	cbz	r3, 800139a <__sflush_r+0x46>
 8001396:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001398:	1ac0      	subs	r0, r0, r3
 800139a:	2300      	movs	r3, #0
 800139c:	4602      	mov	r2, r0
 800139e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80013a0:	6a21      	ldr	r1, [r4, #32]
 80013a2:	4628      	mov	r0, r5
 80013a4:	47b0      	blx	r6
 80013a6:	1c43      	adds	r3, r0, #1
 80013a8:	89a3      	ldrh	r3, [r4, #12]
 80013aa:	d106      	bne.n	80013ba <__sflush_r+0x66>
 80013ac:	6829      	ldr	r1, [r5, #0]
 80013ae:	291d      	cmp	r1, #29
 80013b0:	d82c      	bhi.n	800140c <__sflush_r+0xb8>
 80013b2:	4a2a      	ldr	r2, [pc, #168]	; (800145c <__sflush_r+0x108>)
 80013b4:	40ca      	lsrs	r2, r1
 80013b6:	07d6      	lsls	r6, r2, #31
 80013b8:	d528      	bpl.n	800140c <__sflush_r+0xb8>
 80013ba:	2200      	movs	r2, #0
 80013bc:	6062      	str	r2, [r4, #4]
 80013be:	04d9      	lsls	r1, r3, #19
 80013c0:	6922      	ldr	r2, [r4, #16]
 80013c2:	6022      	str	r2, [r4, #0]
 80013c4:	d504      	bpl.n	80013d0 <__sflush_r+0x7c>
 80013c6:	1c42      	adds	r2, r0, #1
 80013c8:	d101      	bne.n	80013ce <__sflush_r+0x7a>
 80013ca:	682b      	ldr	r3, [r5, #0]
 80013cc:	b903      	cbnz	r3, 80013d0 <__sflush_r+0x7c>
 80013ce:	6560      	str	r0, [r4, #84]	; 0x54
 80013d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80013d2:	602f      	str	r7, [r5, #0]
 80013d4:	2900      	cmp	r1, #0
 80013d6:	d0ca      	beq.n	800136e <__sflush_r+0x1a>
 80013d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80013dc:	4299      	cmp	r1, r3
 80013de:	d002      	beq.n	80013e6 <__sflush_r+0x92>
 80013e0:	4628      	mov	r0, r5
 80013e2:	f000 f8fb 	bl	80015dc <_free_r>
 80013e6:	2000      	movs	r0, #0
 80013e8:	6360      	str	r0, [r4, #52]	; 0x34
 80013ea:	e7c1      	b.n	8001370 <__sflush_r+0x1c>
 80013ec:	6a21      	ldr	r1, [r4, #32]
 80013ee:	2301      	movs	r3, #1
 80013f0:	4628      	mov	r0, r5
 80013f2:	47b0      	blx	r6
 80013f4:	1c41      	adds	r1, r0, #1
 80013f6:	d1c7      	bne.n	8001388 <__sflush_r+0x34>
 80013f8:	682b      	ldr	r3, [r5, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0c4      	beq.n	8001388 <__sflush_r+0x34>
 80013fe:	2b1d      	cmp	r3, #29
 8001400:	d001      	beq.n	8001406 <__sflush_r+0xb2>
 8001402:	2b16      	cmp	r3, #22
 8001404:	d101      	bne.n	800140a <__sflush_r+0xb6>
 8001406:	602f      	str	r7, [r5, #0]
 8001408:	e7b1      	b.n	800136e <__sflush_r+0x1a>
 800140a:	89a3      	ldrh	r3, [r4, #12]
 800140c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001410:	81a3      	strh	r3, [r4, #12]
 8001412:	e7ad      	b.n	8001370 <__sflush_r+0x1c>
 8001414:	690f      	ldr	r7, [r1, #16]
 8001416:	2f00      	cmp	r7, #0
 8001418:	d0a9      	beq.n	800136e <__sflush_r+0x1a>
 800141a:	0793      	lsls	r3, r2, #30
 800141c:	680e      	ldr	r6, [r1, #0]
 800141e:	bf08      	it	eq
 8001420:	694b      	ldreq	r3, [r1, #20]
 8001422:	600f      	str	r7, [r1, #0]
 8001424:	bf18      	it	ne
 8001426:	2300      	movne	r3, #0
 8001428:	eba6 0807 	sub.w	r8, r6, r7
 800142c:	608b      	str	r3, [r1, #8]
 800142e:	f1b8 0f00 	cmp.w	r8, #0
 8001432:	dd9c      	ble.n	800136e <__sflush_r+0x1a>
 8001434:	6a21      	ldr	r1, [r4, #32]
 8001436:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001438:	4643      	mov	r3, r8
 800143a:	463a      	mov	r2, r7
 800143c:	4628      	mov	r0, r5
 800143e:	47b0      	blx	r6
 8001440:	2800      	cmp	r0, #0
 8001442:	dc06      	bgt.n	8001452 <__sflush_r+0xfe>
 8001444:	89a3      	ldrh	r3, [r4, #12]
 8001446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800144a:	81a3      	strh	r3, [r4, #12]
 800144c:	f04f 30ff 	mov.w	r0, #4294967295
 8001450:	e78e      	b.n	8001370 <__sflush_r+0x1c>
 8001452:	4407      	add	r7, r0
 8001454:	eba8 0800 	sub.w	r8, r8, r0
 8001458:	e7e9      	b.n	800142e <__sflush_r+0xda>
 800145a:	bf00      	nop
 800145c:	20400001 	.word	0x20400001

08001460 <_fflush_r>:
 8001460:	b538      	push	{r3, r4, r5, lr}
 8001462:	690b      	ldr	r3, [r1, #16]
 8001464:	4605      	mov	r5, r0
 8001466:	460c      	mov	r4, r1
 8001468:	b913      	cbnz	r3, 8001470 <_fflush_r+0x10>
 800146a:	2500      	movs	r5, #0
 800146c:	4628      	mov	r0, r5
 800146e:	bd38      	pop	{r3, r4, r5, pc}
 8001470:	b118      	cbz	r0, 800147a <_fflush_r+0x1a>
 8001472:	6983      	ldr	r3, [r0, #24]
 8001474:	b90b      	cbnz	r3, 800147a <_fflush_r+0x1a>
 8001476:	f7ff fa4f 	bl	8000918 <__sinit>
 800147a:	4b14      	ldr	r3, [pc, #80]	; (80014cc <_fflush_r+0x6c>)
 800147c:	429c      	cmp	r4, r3
 800147e:	d11b      	bne.n	80014b8 <_fflush_r+0x58>
 8001480:	686c      	ldr	r4, [r5, #4]
 8001482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0ef      	beq.n	800146a <_fflush_r+0xa>
 800148a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800148c:	07d0      	lsls	r0, r2, #31
 800148e:	d404      	bmi.n	800149a <_fflush_r+0x3a>
 8001490:	0599      	lsls	r1, r3, #22
 8001492:	d402      	bmi.n	800149a <_fflush_r+0x3a>
 8001494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001496:	f7ff fadd 	bl	8000a54 <__retarget_lock_acquire_recursive>
 800149a:	4628      	mov	r0, r5
 800149c:	4621      	mov	r1, r4
 800149e:	f7ff ff59 	bl	8001354 <__sflush_r>
 80014a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80014a4:	07da      	lsls	r2, r3, #31
 80014a6:	4605      	mov	r5, r0
 80014a8:	d4e0      	bmi.n	800146c <_fflush_r+0xc>
 80014aa:	89a3      	ldrh	r3, [r4, #12]
 80014ac:	059b      	lsls	r3, r3, #22
 80014ae:	d4dd      	bmi.n	800146c <_fflush_r+0xc>
 80014b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014b2:	f7ff fad0 	bl	8000a56 <__retarget_lock_release_recursive>
 80014b6:	e7d9      	b.n	800146c <_fflush_r+0xc>
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <_fflush_r+0x70>)
 80014ba:	429c      	cmp	r4, r3
 80014bc:	d101      	bne.n	80014c2 <_fflush_r+0x62>
 80014be:	68ac      	ldr	r4, [r5, #8]
 80014c0:	e7df      	b.n	8001482 <_fflush_r+0x22>
 80014c2:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <_fflush_r+0x74>)
 80014c4:	429c      	cmp	r4, r3
 80014c6:	bf08      	it	eq
 80014c8:	68ec      	ldreq	r4, [r5, #12]
 80014ca:	e7da      	b.n	8001482 <_fflush_r+0x22>
 80014cc:	08001740 	.word	0x08001740
 80014d0:	08001760 	.word	0x08001760
 80014d4:	08001720 	.word	0x08001720

080014d8 <_lseek_r>:
 80014d8:	b538      	push	{r3, r4, r5, lr}
 80014da:	4d07      	ldr	r5, [pc, #28]	; (80014f8 <_lseek_r+0x20>)
 80014dc:	4604      	mov	r4, r0
 80014de:	4608      	mov	r0, r1
 80014e0:	4611      	mov	r1, r2
 80014e2:	2200      	movs	r2, #0
 80014e4:	602a      	str	r2, [r5, #0]
 80014e6:	461a      	mov	r2, r3
 80014e8:	f7ff f870 	bl	80005cc <_lseek>
 80014ec:	1c43      	adds	r3, r0, #1
 80014ee:	d102      	bne.n	80014f6 <_lseek_r+0x1e>
 80014f0:	682b      	ldr	r3, [r5, #0]
 80014f2:	b103      	cbz	r3, 80014f6 <_lseek_r+0x1e>
 80014f4:	6023      	str	r3, [r4, #0]
 80014f6:	bd38      	pop	{r3, r4, r5, pc}
 80014f8:	200000ac 	.word	0x200000ac

080014fc <__swhatbuf_r>:
 80014fc:	b570      	push	{r4, r5, r6, lr}
 80014fe:	460e      	mov	r6, r1
 8001500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001504:	2900      	cmp	r1, #0
 8001506:	b096      	sub	sp, #88	; 0x58
 8001508:	4614      	mov	r4, r2
 800150a:	461d      	mov	r5, r3
 800150c:	da07      	bge.n	800151e <__swhatbuf_r+0x22>
 800150e:	2300      	movs	r3, #0
 8001510:	602b      	str	r3, [r5, #0]
 8001512:	89b3      	ldrh	r3, [r6, #12]
 8001514:	061a      	lsls	r2, r3, #24
 8001516:	d410      	bmi.n	800153a <__swhatbuf_r+0x3e>
 8001518:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800151c:	e00e      	b.n	800153c <__swhatbuf_r+0x40>
 800151e:	466a      	mov	r2, sp
 8001520:	f000 f8be 	bl	80016a0 <_fstat_r>
 8001524:	2800      	cmp	r0, #0
 8001526:	dbf2      	blt.n	800150e <__swhatbuf_r+0x12>
 8001528:	9a01      	ldr	r2, [sp, #4]
 800152a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800152e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001532:	425a      	negs	r2, r3
 8001534:	415a      	adcs	r2, r3
 8001536:	602a      	str	r2, [r5, #0]
 8001538:	e7ee      	b.n	8001518 <__swhatbuf_r+0x1c>
 800153a:	2340      	movs	r3, #64	; 0x40
 800153c:	2000      	movs	r0, #0
 800153e:	6023      	str	r3, [r4, #0]
 8001540:	b016      	add	sp, #88	; 0x58
 8001542:	bd70      	pop	{r4, r5, r6, pc}

08001544 <__smakebuf_r>:
 8001544:	898b      	ldrh	r3, [r1, #12]
 8001546:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001548:	079d      	lsls	r5, r3, #30
 800154a:	4606      	mov	r6, r0
 800154c:	460c      	mov	r4, r1
 800154e:	d507      	bpl.n	8001560 <__smakebuf_r+0x1c>
 8001550:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001554:	6023      	str	r3, [r4, #0]
 8001556:	6123      	str	r3, [r4, #16]
 8001558:	2301      	movs	r3, #1
 800155a:	6163      	str	r3, [r4, #20]
 800155c:	b002      	add	sp, #8
 800155e:	bd70      	pop	{r4, r5, r6, pc}
 8001560:	ab01      	add	r3, sp, #4
 8001562:	466a      	mov	r2, sp
 8001564:	f7ff ffca 	bl	80014fc <__swhatbuf_r>
 8001568:	9900      	ldr	r1, [sp, #0]
 800156a:	4605      	mov	r5, r0
 800156c:	4630      	mov	r0, r6
 800156e:	f7ff fa73 	bl	8000a58 <_malloc_r>
 8001572:	b948      	cbnz	r0, 8001588 <__smakebuf_r+0x44>
 8001574:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001578:	059a      	lsls	r2, r3, #22
 800157a:	d4ef      	bmi.n	800155c <__smakebuf_r+0x18>
 800157c:	f023 0303 	bic.w	r3, r3, #3
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	81a3      	strh	r3, [r4, #12]
 8001586:	e7e3      	b.n	8001550 <__smakebuf_r+0xc>
 8001588:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <__smakebuf_r+0x7c>)
 800158a:	62b3      	str	r3, [r6, #40]	; 0x28
 800158c:	89a3      	ldrh	r3, [r4, #12]
 800158e:	6020      	str	r0, [r4, #0]
 8001590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001594:	81a3      	strh	r3, [r4, #12]
 8001596:	9b00      	ldr	r3, [sp, #0]
 8001598:	6163      	str	r3, [r4, #20]
 800159a:	9b01      	ldr	r3, [sp, #4]
 800159c:	6120      	str	r0, [r4, #16]
 800159e:	b15b      	cbz	r3, 80015b8 <__smakebuf_r+0x74>
 80015a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80015a4:	4630      	mov	r0, r6
 80015a6:	f000 f88d 	bl	80016c4 <_isatty_r>
 80015aa:	b128      	cbz	r0, 80015b8 <__smakebuf_r+0x74>
 80015ac:	89a3      	ldrh	r3, [r4, #12]
 80015ae:	f023 0303 	bic.w	r3, r3, #3
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	81a3      	strh	r3, [r4, #12]
 80015b8:	89a0      	ldrh	r0, [r4, #12]
 80015ba:	4305      	orrs	r5, r0
 80015bc:	81a5      	strh	r5, [r4, #12]
 80015be:	e7cd      	b.n	800155c <__smakebuf_r+0x18>
 80015c0:	080008b1 	.word	0x080008b1

080015c4 <__malloc_lock>:
 80015c4:	4801      	ldr	r0, [pc, #4]	; (80015cc <__malloc_lock+0x8>)
 80015c6:	f7ff ba45 	b.w	8000a54 <__retarget_lock_acquire_recursive>
 80015ca:	bf00      	nop
 80015cc:	200000a5 	.word	0x200000a5

080015d0 <__malloc_unlock>:
 80015d0:	4801      	ldr	r0, [pc, #4]	; (80015d8 <__malloc_unlock+0x8>)
 80015d2:	f7ff ba40 	b.w	8000a56 <__retarget_lock_release_recursive>
 80015d6:	bf00      	nop
 80015d8:	200000a5 	.word	0x200000a5

080015dc <_free_r>:
 80015dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80015de:	2900      	cmp	r1, #0
 80015e0:	d048      	beq.n	8001674 <_free_r+0x98>
 80015e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80015e6:	9001      	str	r0, [sp, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f1a1 0404 	sub.w	r4, r1, #4
 80015ee:	bfb8      	it	lt
 80015f0:	18e4      	addlt	r4, r4, r3
 80015f2:	f7ff ffe7 	bl	80015c4 <__malloc_lock>
 80015f6:	4a20      	ldr	r2, [pc, #128]	; (8001678 <_free_r+0x9c>)
 80015f8:	9801      	ldr	r0, [sp, #4]
 80015fa:	6813      	ldr	r3, [r2, #0]
 80015fc:	4615      	mov	r5, r2
 80015fe:	b933      	cbnz	r3, 800160e <_free_r+0x32>
 8001600:	6063      	str	r3, [r4, #4]
 8001602:	6014      	str	r4, [r2, #0]
 8001604:	b003      	add	sp, #12
 8001606:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800160a:	f7ff bfe1 	b.w	80015d0 <__malloc_unlock>
 800160e:	42a3      	cmp	r3, r4
 8001610:	d90b      	bls.n	800162a <_free_r+0x4e>
 8001612:	6821      	ldr	r1, [r4, #0]
 8001614:	1862      	adds	r2, r4, r1
 8001616:	4293      	cmp	r3, r2
 8001618:	bf04      	itt	eq
 800161a:	681a      	ldreq	r2, [r3, #0]
 800161c:	685b      	ldreq	r3, [r3, #4]
 800161e:	6063      	str	r3, [r4, #4]
 8001620:	bf04      	itt	eq
 8001622:	1852      	addeq	r2, r2, r1
 8001624:	6022      	streq	r2, [r4, #0]
 8001626:	602c      	str	r4, [r5, #0]
 8001628:	e7ec      	b.n	8001604 <_free_r+0x28>
 800162a:	461a      	mov	r2, r3
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	b10b      	cbz	r3, 8001634 <_free_r+0x58>
 8001630:	42a3      	cmp	r3, r4
 8001632:	d9fa      	bls.n	800162a <_free_r+0x4e>
 8001634:	6811      	ldr	r1, [r2, #0]
 8001636:	1855      	adds	r5, r2, r1
 8001638:	42a5      	cmp	r5, r4
 800163a:	d10b      	bne.n	8001654 <_free_r+0x78>
 800163c:	6824      	ldr	r4, [r4, #0]
 800163e:	4421      	add	r1, r4
 8001640:	1854      	adds	r4, r2, r1
 8001642:	42a3      	cmp	r3, r4
 8001644:	6011      	str	r1, [r2, #0]
 8001646:	d1dd      	bne.n	8001604 <_free_r+0x28>
 8001648:	681c      	ldr	r4, [r3, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	6053      	str	r3, [r2, #4]
 800164e:	4421      	add	r1, r4
 8001650:	6011      	str	r1, [r2, #0]
 8001652:	e7d7      	b.n	8001604 <_free_r+0x28>
 8001654:	d902      	bls.n	800165c <_free_r+0x80>
 8001656:	230c      	movs	r3, #12
 8001658:	6003      	str	r3, [r0, #0]
 800165a:	e7d3      	b.n	8001604 <_free_r+0x28>
 800165c:	6825      	ldr	r5, [r4, #0]
 800165e:	1961      	adds	r1, r4, r5
 8001660:	428b      	cmp	r3, r1
 8001662:	bf04      	itt	eq
 8001664:	6819      	ldreq	r1, [r3, #0]
 8001666:	685b      	ldreq	r3, [r3, #4]
 8001668:	6063      	str	r3, [r4, #4]
 800166a:	bf04      	itt	eq
 800166c:	1949      	addeq	r1, r1, r5
 800166e:	6021      	streq	r1, [r4, #0]
 8001670:	6054      	str	r4, [r2, #4]
 8001672:	e7c7      	b.n	8001604 <_free_r+0x28>
 8001674:	b003      	add	sp, #12
 8001676:	bd30      	pop	{r4, r5, pc}
 8001678:	20000084 	.word	0x20000084

0800167c <_read_r>:
 800167c:	b538      	push	{r3, r4, r5, lr}
 800167e:	4d07      	ldr	r5, [pc, #28]	; (800169c <_read_r+0x20>)
 8001680:	4604      	mov	r4, r0
 8001682:	4608      	mov	r0, r1
 8001684:	4611      	mov	r1, r2
 8001686:	2200      	movs	r2, #0
 8001688:	602a      	str	r2, [r5, #0]
 800168a:	461a      	mov	r2, r3
 800168c:	f7fe ff3e 	bl	800050c <_read>
 8001690:	1c43      	adds	r3, r0, #1
 8001692:	d102      	bne.n	800169a <_read_r+0x1e>
 8001694:	682b      	ldr	r3, [r5, #0]
 8001696:	b103      	cbz	r3, 800169a <_read_r+0x1e>
 8001698:	6023      	str	r3, [r4, #0]
 800169a:	bd38      	pop	{r3, r4, r5, pc}
 800169c:	200000ac 	.word	0x200000ac

080016a0 <_fstat_r>:
 80016a0:	b538      	push	{r3, r4, r5, lr}
 80016a2:	4d07      	ldr	r5, [pc, #28]	; (80016c0 <_fstat_r+0x20>)
 80016a4:	2300      	movs	r3, #0
 80016a6:	4604      	mov	r4, r0
 80016a8:	4608      	mov	r0, r1
 80016aa:	4611      	mov	r1, r2
 80016ac:	602b      	str	r3, [r5, #0]
 80016ae:	f7fe ff72 	bl	8000596 <_fstat>
 80016b2:	1c43      	adds	r3, r0, #1
 80016b4:	d102      	bne.n	80016bc <_fstat_r+0x1c>
 80016b6:	682b      	ldr	r3, [r5, #0]
 80016b8:	b103      	cbz	r3, 80016bc <_fstat_r+0x1c>
 80016ba:	6023      	str	r3, [r4, #0]
 80016bc:	bd38      	pop	{r3, r4, r5, pc}
 80016be:	bf00      	nop
 80016c0:	200000ac 	.word	0x200000ac

080016c4 <_isatty_r>:
 80016c4:	b538      	push	{r3, r4, r5, lr}
 80016c6:	4d06      	ldr	r5, [pc, #24]	; (80016e0 <_isatty_r+0x1c>)
 80016c8:	2300      	movs	r3, #0
 80016ca:	4604      	mov	r4, r0
 80016cc:	4608      	mov	r0, r1
 80016ce:	602b      	str	r3, [r5, #0]
 80016d0:	f7fe ff71 	bl	80005b6 <_isatty>
 80016d4:	1c43      	adds	r3, r0, #1
 80016d6:	d102      	bne.n	80016de <_isatty_r+0x1a>
 80016d8:	682b      	ldr	r3, [r5, #0]
 80016da:	b103      	cbz	r3, 80016de <_isatty_r+0x1a>
 80016dc:	6023      	str	r3, [r4, #0]
 80016de:	bd38      	pop	{r3, r4, r5, pc}
 80016e0:	200000ac 	.word	0x200000ac

080016e4 <_init>:
 80016e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016e6:	bf00      	nop
 80016e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ea:	bc08      	pop	{r3}
 80016ec:	469e      	mov	lr, r3
 80016ee:	4770      	bx	lr

080016f0 <_fini>:
 80016f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016f2:	bf00      	nop
 80016f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016f6:	bc08      	pop	{r3}
 80016f8:	469e      	mov	lr, r3
 80016fa:	4770      	bx	lr
