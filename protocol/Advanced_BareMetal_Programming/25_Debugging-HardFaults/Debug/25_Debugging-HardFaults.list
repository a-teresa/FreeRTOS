
25_Debugging-HardFaults.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08001670  08001670  00011670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001760  08001760  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001760  08001760  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001760  08001760  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001760  08001760  00011760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001764  08001764  00011764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000064  080017cc  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  080017cc  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000030c8  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008d4  00000000  00000000  0002315c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000178  00000000  00000000  00023a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000120  00000000  00000000  00023ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fe5b  00000000  00000000  00023cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000202e  00000000  00000000  00033b23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005552f  00000000  00000000  00035b51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0008b080  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c2c  00000000  00000000  0008b0d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001658 	.word	0x08001658

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08001658 	.word	0x08001658

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <adc_dma_init>:


uint16_t adc_raw_data[NUM_OF_CHANNELS];

void adc_dma_init(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	/************GPIO Configuration**********/
	/*Enable clock access to ADC GPIO Pin's Port*/
	RCC->AHB1ENR |= GPIOAEN;
 8000284:	4b50      	ldr	r3, [pc, #320]	; (80003c8 <adc_dma_init+0x148>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000288:	4a4f      	ldr	r2, [pc, #316]	; (80003c8 <adc_dma_init+0x148>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA0 and PA1 mode to analog mode*/
	GPIOA->MODER |= (1U<<0);
 8000290:	4b4e      	ldr	r3, [pc, #312]	; (80003cc <adc_dma_init+0x14c>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a4d      	ldr	r2, [pc, #308]	; (80003cc <adc_dma_init+0x14c>)
 8000296:	f043 0301 	orr.w	r3, r3, #1
 800029a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<1);
 800029c:	4b4b      	ldr	r3, [pc, #300]	; (80003cc <adc_dma_init+0x14c>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a4a      	ldr	r2, [pc, #296]	; (80003cc <adc_dma_init+0x14c>)
 80002a2:	f043 0302 	orr.w	r3, r3, #2
 80002a6:	6013      	str	r3, [r2, #0]

	GPIOA->MODER |= (1U<<2);
 80002a8:	4b48      	ldr	r3, [pc, #288]	; (80003cc <adc_dma_init+0x14c>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a47      	ldr	r2, [pc, #284]	; (80003cc <adc_dma_init+0x14c>)
 80002ae:	f043 0304 	orr.w	r3, r3, #4
 80002b2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<3);
 80002b4:	4b45      	ldr	r3, [pc, #276]	; (80003cc <adc_dma_init+0x14c>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a44      	ldr	r2, [pc, #272]	; (80003cc <adc_dma_init+0x14c>)
 80002ba:	f043 0308 	orr.w	r3, r3, #8
 80002be:	6013      	str	r3, [r2, #0]

	/************ADC Configuration**********/
	/*Enable clock access to ADC*/
	RCC->APB2ENR |= ADC1EN;
 80002c0:	4b41      	ldr	r3, [pc, #260]	; (80003c8 <adc_dma_init+0x148>)
 80002c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002c4:	4a40      	ldr	r2, [pc, #256]	; (80003c8 <adc_dma_init+0x148>)
 80002c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ca:	6453      	str	r3, [r2, #68]	; 0x44

	/*Set sequence length*/
	ADC1->SQR1 |= (1U<<20);
 80002cc:	4b40      	ldr	r3, [pc, #256]	; (80003d0 <adc_dma_init+0x150>)
 80002ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002d0:	4a3f      	ldr	r2, [pc, #252]	; (80003d0 <adc_dma_init+0x150>)
 80002d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d6:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR1 &= ~(1U<<21);
 80002d8:	4b3d      	ldr	r3, [pc, #244]	; (80003d0 <adc_dma_init+0x150>)
 80002da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002dc:	4a3c      	ldr	r2, [pc, #240]	; (80003d0 <adc_dma_init+0x150>)
 80002de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80002e2:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR1 &= ~(1U<<22);
 80002e4:	4b3a      	ldr	r3, [pc, #232]	; (80003d0 <adc_dma_init+0x150>)
 80002e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002e8:	4a39      	ldr	r2, [pc, #228]	; (80003d0 <adc_dma_init+0x150>)
 80002ea:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80002ee:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR1 &= ~(1U<<23);
 80002f0:	4b37      	ldr	r3, [pc, #220]	; (80003d0 <adc_dma_init+0x150>)
 80002f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002f4:	4a36      	ldr	r2, [pc, #216]	; (80003d0 <adc_dma_init+0x150>)
 80002f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80002fa:	62d3      	str	r3, [r2, #44]	; 0x2c

	/*Set sequence*/
	ADC1->SQR3 = (0U<<0) | (1U<<5);
 80002fc:	4b34      	ldr	r3, [pc, #208]	; (80003d0 <adc_dma_init+0x150>)
 80002fe:	2220      	movs	r2, #32
 8000300:	635a      	str	r2, [r3, #52]	; 0x34

	/*Enable scan mode*/
	ADC1->CR1 = CR1_SCAN;
 8000302:	4b33      	ldr	r3, [pc, #204]	; (80003d0 <adc_dma_init+0x150>)
 8000304:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000308:	605a      	str	r2, [r3, #4]

	/*Select to use DMA*/
	ADC1->CR2 |=CR2_CONT |CR2_DMA|CR2_DDS;
 800030a:	4b31      	ldr	r3, [pc, #196]	; (80003d0 <adc_dma_init+0x150>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	4a30      	ldr	r2, [pc, #192]	; (80003d0 <adc_dma_init+0x150>)
 8000310:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000314:	f043 0302 	orr.w	r3, r3, #2
 8000318:	6093      	str	r3, [r2, #8]


	/************DMA Configuration**********/
	/*Enable clock access to DMA*/
	RCC->AHB1ENR |=DMA2EN;
 800031a:	4b2b      	ldr	r3, [pc, #172]	; (80003c8 <adc_dma_init+0x148>)
 800031c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800031e:	4a2a      	ldr	r2, [pc, #168]	; (80003c8 <adc_dma_init+0x148>)
 8000320:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000324:	6313      	str	r3, [r2, #48]	; 0x30


	/*Disable DMA stream*/
	DMA2_Stream0->CR &=~DMA_SCR_EN;
 8000326:	4b2b      	ldr	r3, [pc, #172]	; (80003d4 <adc_dma_init+0x154>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a2a      	ldr	r2, [pc, #168]	; (80003d4 <adc_dma_init+0x154>)
 800032c:	f023 0301 	bic.w	r3, r3, #1
 8000330:	6013      	str	r3, [r2, #0]

	/*Wait till DMA is disabled*/
	while((DMA2_Stream0->CR & DMA_SCR_EN)){}
 8000332:	bf00      	nop
 8000334:	4b27      	ldr	r3, [pc, #156]	; (80003d4 <adc_dma_init+0x154>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	f003 0301 	and.w	r3, r3, #1
 800033c:	2b00      	cmp	r3, #0
 800033e:	d1f9      	bne.n	8000334 <adc_dma_init+0xb4>

	/*Enable Circular mode*/
	DMA2_Stream0->CR |=DMA_SCR_CIRC;
 8000340:	4b24      	ldr	r3, [pc, #144]	; (80003d4 <adc_dma_init+0x154>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a23      	ldr	r2, [pc, #140]	; (80003d4 <adc_dma_init+0x154>)
 8000346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800034a:	6013      	str	r3, [r2, #0]

	/*Set MSIZE i.e Memory data size to half-word*/

	DMA2_Stream0->CR |= (1U<<13);
 800034c:	4b21      	ldr	r3, [pc, #132]	; (80003d4 <adc_dma_init+0x154>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a20      	ldr	r2, [pc, #128]	; (80003d4 <adc_dma_init+0x154>)
 8000352:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000356:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~(1U<<14);
 8000358:	4b1e      	ldr	r3, [pc, #120]	; (80003d4 <adc_dma_init+0x154>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a1d      	ldr	r2, [pc, #116]	; (80003d4 <adc_dma_init+0x154>)
 800035e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000362:	6013      	str	r3, [r2, #0]

	/*Set PSIZE i.e Peripheral data size to half-word*/
	DMA2_Stream0->CR |= (1U<<11);
 8000364:	4b1b      	ldr	r3, [pc, #108]	; (80003d4 <adc_dma_init+0x154>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a1a      	ldr	r2, [pc, #104]	; (80003d4 <adc_dma_init+0x154>)
 800036a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800036e:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~(1U<<12);
 8000370:	4b18      	ldr	r3, [pc, #96]	; (80003d4 <adc_dma_init+0x154>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a17      	ldr	r2, [pc, #92]	; (80003d4 <adc_dma_init+0x154>)
 8000376:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800037a:	6013      	str	r3, [r2, #0]

	/*Enable memory addr increment*/
	DMA2_Stream0->CR |=DMA_SCR_MINC;
 800037c:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <adc_dma_init+0x154>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a14      	ldr	r2, [pc, #80]	; (80003d4 <adc_dma_init+0x154>)
 8000382:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000386:	6013      	str	r3, [r2, #0]

	/*Set periph address*/
	DMA2_Stream0->PAR = (uint32_t)(&(ADC1->DR));
 8000388:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <adc_dma_init+0x154>)
 800038a:	4a13      	ldr	r2, [pc, #76]	; (80003d8 <adc_dma_init+0x158>)
 800038c:	609a      	str	r2, [r3, #8]
	/*Set mem address*/
	DMA2_Stream0->M0AR = (uint32_t)(&adc_raw_data);
 800038e:	4b11      	ldr	r3, [pc, #68]	; (80003d4 <adc_dma_init+0x154>)
 8000390:	4a12      	ldr	r2, [pc, #72]	; (80003dc <adc_dma_init+0x15c>)
 8000392:	60da      	str	r2, [r3, #12]

	/*Set number of transfer*/
	DMA2_Stream0->NDTR = (uint16_t)NUM_OF_CHANNELS;
 8000394:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <adc_dma_init+0x154>)
 8000396:	2202      	movs	r2, #2
 8000398:	605a      	str	r2, [r3, #4]

	/*Enable DMA stream*/
	DMA2_Stream0->CR |= DMA_SCR_EN;
 800039a:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <adc_dma_init+0x154>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a0d      	ldr	r2, [pc, #52]	; (80003d4 <adc_dma_init+0x154>)
 80003a0:	f043 0301 	orr.w	r3, r3, #1
 80003a4:	6013      	str	r3, [r2, #0]

	/************ADC Configuration**********/
	/*Enable ADC*/
	ADC1->CR2 |=CR2_ADCON;
 80003a6:	4b0a      	ldr	r3, [pc, #40]	; (80003d0 <adc_dma_init+0x150>)
 80003a8:	689b      	ldr	r3, [r3, #8]
 80003aa:	4a09      	ldr	r2, [pc, #36]	; (80003d0 <adc_dma_init+0x150>)
 80003ac:	f043 0301 	orr.w	r3, r3, #1
 80003b0:	6093      	str	r3, [r2, #8]

	/*Start ADC*/
	ADC1->CR2 |=CR2_SWSTART;
 80003b2:	4b07      	ldr	r3, [pc, #28]	; (80003d0 <adc_dma_init+0x150>)
 80003b4:	689b      	ldr	r3, [r3, #8]
 80003b6:	4a06      	ldr	r2, [pc, #24]	; (80003d0 <adc_dma_init+0x150>)
 80003b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80003bc:	6093      	str	r3, [r2, #8]


}
 80003be:	bf00      	nop
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr
 80003c8:	40023800 	.word	0x40023800
 80003cc:	40020000 	.word	0x40020000
 80003d0:	40012000 	.word	0x40012000
 80003d4:	40026410 	.word	0x40026410
 80003d8:	4001204c 	.word	0x4001204c
 80003dc:	2000008c 	.word	0x2000008c

080003e0 <main>:

uint32_t pressure_sensor, final_value;


int main(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
	pressure_sensor = 0;
 80003e6:	4b15      	ldr	r3, [pc, #84]	; (800043c <main+0x5c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]

	uart2_tx_init();
 80003ec:	f000 f8f8 	bl	80005e0 <uart2_tx_init>
	adc_dma_init();
 80003f0:	f7ff ff46 	bl	8000280 <adc_dma_init>

	while(1)
	{


			printf("Value from sensor one : %d \n\r ",adc_raw_data[0]);
 80003f4:	4b12      	ldr	r3, [pc, #72]	; (8000440 <main+0x60>)
 80003f6:	881b      	ldrh	r3, [r3, #0]
 80003f8:	4619      	mov	r1, r3
 80003fa:	4812      	ldr	r0, [pc, #72]	; (8000444 <main+0x64>)
 80003fc:	f000 f9d6 	bl	80007ac <iprintf>
			printf("Value from sensor two : %d \n\r ",adc_raw_data[1]);
 8000400:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <main+0x60>)
 8000402:	885b      	ldrh	r3, [r3, #2]
 8000404:	4619      	mov	r1, r3
 8000406:	4810      	ldr	r0, [pc, #64]	; (8000448 <main+0x68>)
 8000408:	f000 f9d0 	bl	80007ac <iprintf>

			for( int i = 0; i < 90000; i++){}
 800040c:	2300      	movs	r3, #0
 800040e:	607b      	str	r3, [r7, #4]
 8000410:	e002      	b.n	8000418 <main+0x38>
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	3301      	adds	r3, #1
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4a0c      	ldr	r2, [pc, #48]	; (800044c <main+0x6c>)
 800041c:	4293      	cmp	r3, r2
 800041e:	ddf8      	ble.n	8000412 <main+0x32>

		    pressure_sensor = adc_raw_data[0];
 8000420:	4b07      	ldr	r3, [pc, #28]	; (8000440 <main+0x60>)
 8000422:	881b      	ldrh	r3, [r3, #0]
 8000424:	461a      	mov	r2, r3
 8000426:	4b05      	ldr	r3, [pc, #20]	; (800043c <main+0x5c>)
 8000428:	601a      	str	r2, [r3, #0]

		    final_value  =  10000 / pressure_sensor;
 800042a:	4b04      	ldr	r3, [pc, #16]	; (800043c <main+0x5c>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000432:	fbb2 f3f3 	udiv	r3, r2, r3
 8000436:	4a06      	ldr	r2, [pc, #24]	; (8000450 <main+0x70>)
 8000438:	6013      	str	r3, [r2, #0]
			printf("Value from sensor one : %d \n\r ",adc_raw_data[0]);
 800043a:	e7db      	b.n	80003f4 <main+0x14>
 800043c:	20000090 	.word	0x20000090
 8000440:	2000008c 	.word	0x2000008c
 8000444:	08001670 	.word	0x08001670
 8000448:	08001690 	.word	0x08001690
 800044c:	00015f8f 	.word	0x00015f8f
 8000450:	20000094 	.word	0x20000094

08000454 <HardFault_Handler>:
	}
}


void HardFault_Handler(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
	exception_code  = SCB->CFSR;
 8000458:	4b06      	ldr	r3, [pc, #24]	; (8000474 <HardFault_Handler+0x20>)
 800045a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800045c:	4a06      	ldr	r2, [pc, #24]	; (8000478 <HardFault_Handler+0x24>)
 800045e:	6013      	str	r3, [r2, #0]

	if(exception_code == CFSR_UFSR_DIVIDE_BY_ZERO)
 8000460:	4b05      	ldr	r3, [pc, #20]	; (8000478 <HardFault_Handler+0x24>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000468:	d102      	bne.n	8000470 <HardFault_Handler+0x1c>
	{
		printf("Divide By Zero Error \n\r");
 800046a:	4804      	ldr	r0, [pc, #16]	; (800047c <HardFault_Handler+0x28>)
 800046c:	f000 f99e 	bl	80007ac <iprintf>
	}
}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}
 8000474:	e000ed00 	.word	0xe000ed00
 8000478:	20000098 	.word	0x20000098
 800047c:	080016b0 	.word	0x080016b0

08000480 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b086      	sub	sp, #24
 8000484:	af00      	add	r7, sp, #0
 8000486:	60f8      	str	r0, [r7, #12]
 8000488:	60b9      	str	r1, [r7, #8]
 800048a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800048c:	2300      	movs	r3, #0
 800048e:	617b      	str	r3, [r7, #20]
 8000490:	e00a      	b.n	80004a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000492:	f3af 8000 	nop.w
 8000496:	4601      	mov	r1, r0
 8000498:	68bb      	ldr	r3, [r7, #8]
 800049a:	1c5a      	adds	r2, r3, #1
 800049c:	60ba      	str	r2, [r7, #8]
 800049e:	b2ca      	uxtb	r2, r1
 80004a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004a2:	697b      	ldr	r3, [r7, #20]
 80004a4:	3301      	adds	r3, #1
 80004a6:	617b      	str	r3, [r7, #20]
 80004a8:	697a      	ldr	r2, [r7, #20]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	dbf0      	blt.n	8000492 <_read+0x12>
	}

return len;
 80004b0:	687b      	ldr	r3, [r7, #4]
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	3718      	adds	r7, #24
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}

080004ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004ba:	b580      	push	{r7, lr}
 80004bc:	b086      	sub	sp, #24
 80004be:	af00      	add	r7, sp, #0
 80004c0:	60f8      	str	r0, [r7, #12]
 80004c2:	60b9      	str	r1, [r7, #8]
 80004c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004c6:	2300      	movs	r3, #0
 80004c8:	617b      	str	r3, [r7, #20]
 80004ca:	e009      	b.n	80004e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80004cc:	68bb      	ldr	r3, [r7, #8]
 80004ce:	1c5a      	adds	r2, r3, #1
 80004d0:	60ba      	str	r2, [r7, #8]
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	4618      	mov	r0, r3
 80004d6:	f000 f877 	bl	80005c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004da:	697b      	ldr	r3, [r7, #20]
 80004dc:	3301      	adds	r3, #1
 80004de:	617b      	str	r3, [r7, #20]
 80004e0:	697a      	ldr	r2, [r7, #20]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	dbf1      	blt.n	80004cc <_write+0x12>
	}
	return len;
 80004e8:	687b      	ldr	r3, [r7, #4]
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	3718      	adds	r7, #24
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}

080004f2 <_close>:

int _close(int file)
{
 80004f2:	b480      	push	{r7}
 80004f4:	b083      	sub	sp, #12
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	6078      	str	r0, [r7, #4]
	return -1;
 80004fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004fe:	4618      	mov	r0, r3
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr

0800050a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800050a:	b480      	push	{r7}
 800050c:	b083      	sub	sp, #12
 800050e:	af00      	add	r7, sp, #0
 8000510:	6078      	str	r0, [r7, #4]
 8000512:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800051a:	605a      	str	r2, [r3, #4]
	return 0;
 800051c:	2300      	movs	r3, #0
}
 800051e:	4618      	mov	r0, r3
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr

0800052a <_isatty>:

int _isatty(int file)
{
 800052a:	b480      	push	{r7}
 800052c:	b083      	sub	sp, #12
 800052e:	af00      	add	r7, sp, #0
 8000530:	6078      	str	r0, [r7, #4]
	return 1;
 8000532:	2301      	movs	r3, #1
}
 8000534:	4618      	mov	r0, r3
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	60f8      	str	r0, [r7, #12]
 8000548:	60b9      	str	r1, [r7, #8]
 800054a:	607a      	str	r2, [r7, #4]
	return 0;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	3714      	adds	r7, #20
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
	...

0800055c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000564:	4a14      	ldr	r2, [pc, #80]	; (80005b8 <_sbrk+0x5c>)
 8000566:	4b15      	ldr	r3, [pc, #84]	; (80005bc <_sbrk+0x60>)
 8000568:	1ad3      	subs	r3, r2, r3
 800056a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000570:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <_sbrk+0x64>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d102      	bne.n	800057e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000578:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <_sbrk+0x64>)
 800057a:	4a12      	ldr	r2, [pc, #72]	; (80005c4 <_sbrk+0x68>)
 800057c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800057e:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <_sbrk+0x64>)
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4413      	add	r3, r2
 8000586:	693a      	ldr	r2, [r7, #16]
 8000588:	429a      	cmp	r2, r3
 800058a:	d207      	bcs.n	800059c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800058c:	f000 f8dc 	bl	8000748 <__errno>
 8000590:	4603      	mov	r3, r0
 8000592:	220c      	movs	r2, #12
 8000594:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000596:	f04f 33ff 	mov.w	r3, #4294967295
 800059a:	e009      	b.n	80005b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <_sbrk+0x64>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005a2:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <_sbrk+0x64>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4413      	add	r3, r2
 80005aa:	4a05      	ldr	r2, [pc, #20]	; (80005c0 <_sbrk+0x64>)
 80005ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005ae:	68fb      	ldr	r3, [r7, #12]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3718      	adds	r7, #24
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20020000 	.word	0x20020000
 80005bc:	00000400 	.word	0x00000400
 80005c0:	20000080 	.word	0x20000080
 80005c4:	200000b0 	.word	0x200000b0

080005c8 <__io_putchar>:
static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void uart2_write(int ch);


int __io_putchar(int ch)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f000 f84f 	bl	8000674 <uart2_write>
	return ch;
 80005d6:	687b      	ldr	r3, [r7, #4]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <uart2_tx_init>:
void uart2_tx_init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	/*************Configure UART GPIO pin********************/
	/*1.Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 80005e4:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <uart2_tx_init+0x84>)
 80005e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e8:	4a1e      	ldr	r2, [pc, #120]	; (8000664 <uart2_tx_init+0x84>)
 80005ea:	f043 0301 	orr.w	r3, r3, #1
 80005ee:	6313      	str	r3, [r2, #48]	; 0x30

	/*2.Set PA2 mode to alternate function mode*/
	GPIOA->MODER &= ~(1U<<4);
 80005f0:	4b1d      	ldr	r3, [pc, #116]	; (8000668 <uart2_tx_init+0x88>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a1c      	ldr	r2, [pc, #112]	; (8000668 <uart2_tx_init+0x88>)
 80005f6:	f023 0310 	bic.w	r3, r3, #16
 80005fa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=	 (1U<<5);
 80005fc:	4b1a      	ldr	r3, [pc, #104]	; (8000668 <uart2_tx_init+0x88>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a19      	ldr	r2, [pc, #100]	; (8000668 <uart2_tx_init+0x88>)
 8000602:	f043 0320 	orr.w	r3, r3, #32
 8000606:	6013      	str	r3, [r2, #0]

	/*3.Set PA2 alternate function function type to AF7(UART2_TX)*/
	GPIOA->AFR[0] |= (1U<<8);
 8000608:	4b17      	ldr	r3, [pc, #92]	; (8000668 <uart2_tx_init+0x88>)
 800060a:	6a1b      	ldr	r3, [r3, #32]
 800060c:	4a16      	ldr	r2, [pc, #88]	; (8000668 <uart2_tx_init+0x88>)
 800060e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000612:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000614:	4b14      	ldr	r3, [pc, #80]	; (8000668 <uart2_tx_init+0x88>)
 8000616:	6a1b      	ldr	r3, [r3, #32]
 8000618:	4a13      	ldr	r2, [pc, #76]	; (8000668 <uart2_tx_init+0x88>)
 800061a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800061e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000620:	4b11      	ldr	r3, [pc, #68]	; (8000668 <uart2_tx_init+0x88>)
 8000622:	6a1b      	ldr	r3, [r3, #32]
 8000624:	4a10      	ldr	r2, [pc, #64]	; (8000668 <uart2_tx_init+0x88>)
 8000626:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800062a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 800062c:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <uart2_tx_init+0x88>)
 800062e:	6a1b      	ldr	r3, [r3, #32]
 8000630:	4a0d      	ldr	r2, [pc, #52]	; (8000668 <uart2_tx_init+0x88>)
 8000632:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000636:	6213      	str	r3, [r2, #32]

	/*************Configure UART Module********************/
	/*4. Enable clock access to UART2*/
	RCC->APB1ENR |= UART2EN;
 8000638:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <uart2_tx_init+0x84>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	4a09      	ldr	r2, [pc, #36]	; (8000664 <uart2_tx_init+0x84>)
 800063e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000642:	6413      	str	r3, [r2, #64]	; 0x40

	/*5. Set baudrate*/
	uart_set_baudrate(CLK,UART_BAUDRATE);
 8000644:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000648:	4808      	ldr	r0, [pc, #32]	; (800066c <uart2_tx_init+0x8c>)
 800064a:	f000 f83f 	bl	80006cc <uart_set_baudrate>

	/*6. Set transfer direction*/
	 USART2->CR1 = CR1_TE;
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <uart2_tx_init+0x90>)
 8000650:	2208      	movs	r2, #8
 8000652:	60da      	str	r2, [r3, #12]

	/*7. Enable uart module*/
	 USART2->CR1 |= CR1_UE;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <uart2_tx_init+0x90>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	4a05      	ldr	r2, [pc, #20]	; (8000670 <uart2_tx_init+0x90>)
 800065a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800065e:	60d3      	str	r3, [r2, #12]

}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40023800 	.word	0x40023800
 8000668:	40020000 	.word	0x40020000
 800066c:	00f42400 	.word	0x00f42400
 8000670:	40004400 	.word	0x40004400

08000674 <uart2_write>:

static void uart2_write(int ch)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 800067c:	bf00      	nop
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <uart2_write+0x2c>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0f9      	beq.n	800067e <uart2_write+0xa>

	/*Write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4a04      	ldr	r2, [pc, #16]	; (80006a0 <uart2_write+0x2c>)
 800068e:	b2db      	uxtb	r3, r3
 8000690:	6053      	str	r3, [r2, #4]
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40004400 	.word	0x40004400

080006a4 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6039      	str	r1, [r7, #0]
	return ((periph_clk +( baudrate/2U ))/baudrate);
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	085a      	lsrs	r2, r3, #1
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	441a      	add	r2, r3
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80006bc:	b29b      	uxth	r3, r3
}
 80006be:	4618      	mov	r0, r3
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
	...

080006cc <uart_set_baudrate>:


static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
	USART2->BRR  = compute_uart_bd(periph_clk,baudrate);
 80006d6:	6839      	ldr	r1, [r7, #0]
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff ffe3 	bl	80006a4 <compute_uart_bd>
 80006de:	4603      	mov	r3, r0
 80006e0:	461a      	mov	r2, r3
 80006e2:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <uart_set_baudrate+0x24>)
 80006e4:	609a      	str	r2, [r3, #8]
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40004400 	.word	0x40004400

080006f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006f4:	480d      	ldr	r0, [pc, #52]	; (800072c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006f6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006fc:	480c      	ldr	r0, [pc, #48]	; (8000730 <LoopForever+0x6>)
  ldr r1, =_edata
 80006fe:	490d      	ldr	r1, [pc, #52]	; (8000734 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000700:	4a0d      	ldr	r2, [pc, #52]	; (8000738 <LoopForever+0xe>)
  movs r3, #0
 8000702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000704:	e002      	b.n	800070c <LoopCopyDataInit>

08000706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800070a:	3304      	adds	r3, #4

0800070c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800070c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000710:	d3f9      	bcc.n	8000706 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000712:	4a0a      	ldr	r2, [pc, #40]	; (800073c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000714:	4c0a      	ldr	r4, [pc, #40]	; (8000740 <LoopForever+0x16>)
  movs r3, #0
 8000716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000718:	e001      	b.n	800071e <LoopFillZerobss>

0800071a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800071a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800071c:	3204      	adds	r2, #4

0800071e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000720:	d3fb      	bcc.n	800071a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000722:	f000 f817 	bl	8000754 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000726:	f7ff fe5b 	bl	80003e0 <main>

0800072a <LoopForever>:

LoopForever:
    b LoopForever
 800072a:	e7fe      	b.n	800072a <LoopForever>
  ldr   r0, =_estack
 800072c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000734:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000738:	08001768 	.word	0x08001768
  ldr r2, =_sbss
 800073c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000740:	200000ac 	.word	0x200000ac

08000744 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000744:	e7fe      	b.n	8000744 <ADC_IRQHandler>
	...

08000748 <__errno>:
 8000748:	4b01      	ldr	r3, [pc, #4]	; (8000750 <__errno+0x8>)
 800074a:	6818      	ldr	r0, [r3, #0]
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	20000000 	.word	0x20000000

08000754 <__libc_init_array>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	4d0d      	ldr	r5, [pc, #52]	; (800078c <__libc_init_array+0x38>)
 8000758:	4c0d      	ldr	r4, [pc, #52]	; (8000790 <__libc_init_array+0x3c>)
 800075a:	1b64      	subs	r4, r4, r5
 800075c:	10a4      	asrs	r4, r4, #2
 800075e:	2600      	movs	r6, #0
 8000760:	42a6      	cmp	r6, r4
 8000762:	d109      	bne.n	8000778 <__libc_init_array+0x24>
 8000764:	4d0b      	ldr	r5, [pc, #44]	; (8000794 <__libc_init_array+0x40>)
 8000766:	4c0c      	ldr	r4, [pc, #48]	; (8000798 <__libc_init_array+0x44>)
 8000768:	f000 ff76 	bl	8001658 <_init>
 800076c:	1b64      	subs	r4, r4, r5
 800076e:	10a4      	asrs	r4, r4, #2
 8000770:	2600      	movs	r6, #0
 8000772:	42a6      	cmp	r6, r4
 8000774:	d105      	bne.n	8000782 <__libc_init_array+0x2e>
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f855 3b04 	ldr.w	r3, [r5], #4
 800077c:	4798      	blx	r3
 800077e:	3601      	adds	r6, #1
 8000780:	e7ee      	b.n	8000760 <__libc_init_array+0xc>
 8000782:	f855 3b04 	ldr.w	r3, [r5], #4
 8000786:	4798      	blx	r3
 8000788:	3601      	adds	r6, #1
 800078a:	e7f2      	b.n	8000772 <__libc_init_array+0x1e>
 800078c:	08001760 	.word	0x08001760
 8000790:	08001760 	.word	0x08001760
 8000794:	08001760 	.word	0x08001760
 8000798:	08001764 	.word	0x08001764

0800079c <memset>:
 800079c:	4402      	add	r2, r0
 800079e:	4603      	mov	r3, r0
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d100      	bne.n	80007a6 <memset+0xa>
 80007a4:	4770      	bx	lr
 80007a6:	f803 1b01 	strb.w	r1, [r3], #1
 80007aa:	e7f9      	b.n	80007a0 <memset+0x4>

080007ac <iprintf>:
 80007ac:	b40f      	push	{r0, r1, r2, r3}
 80007ae:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <iprintf+0x2c>)
 80007b0:	b513      	push	{r0, r1, r4, lr}
 80007b2:	681c      	ldr	r4, [r3, #0]
 80007b4:	b124      	cbz	r4, 80007c0 <iprintf+0x14>
 80007b6:	69a3      	ldr	r3, [r4, #24]
 80007b8:	b913      	cbnz	r3, 80007c0 <iprintf+0x14>
 80007ba:	4620      	mov	r0, r4
 80007bc:	f000 f866 	bl	800088c <__sinit>
 80007c0:	ab05      	add	r3, sp, #20
 80007c2:	9a04      	ldr	r2, [sp, #16]
 80007c4:	68a1      	ldr	r1, [r4, #8]
 80007c6:	9301      	str	r3, [sp, #4]
 80007c8:	4620      	mov	r0, r4
 80007ca:	f000 f983 	bl	8000ad4 <_vfiprintf_r>
 80007ce:	b002      	add	sp, #8
 80007d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007d4:	b004      	add	sp, #16
 80007d6:	4770      	bx	lr
 80007d8:	20000000 	.word	0x20000000

080007dc <std>:
 80007dc:	2300      	movs	r3, #0
 80007de:	b510      	push	{r4, lr}
 80007e0:	4604      	mov	r4, r0
 80007e2:	e9c0 3300 	strd	r3, r3, [r0]
 80007e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80007ea:	6083      	str	r3, [r0, #8]
 80007ec:	8181      	strh	r1, [r0, #12]
 80007ee:	6643      	str	r3, [r0, #100]	; 0x64
 80007f0:	81c2      	strh	r2, [r0, #14]
 80007f2:	6183      	str	r3, [r0, #24]
 80007f4:	4619      	mov	r1, r3
 80007f6:	2208      	movs	r2, #8
 80007f8:	305c      	adds	r0, #92	; 0x5c
 80007fa:	f7ff ffcf 	bl	800079c <memset>
 80007fe:	4b05      	ldr	r3, [pc, #20]	; (8000814 <std+0x38>)
 8000800:	6263      	str	r3, [r4, #36]	; 0x24
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <std+0x3c>)
 8000804:	62a3      	str	r3, [r4, #40]	; 0x28
 8000806:	4b05      	ldr	r3, [pc, #20]	; (800081c <std+0x40>)
 8000808:	62e3      	str	r3, [r4, #44]	; 0x2c
 800080a:	4b05      	ldr	r3, [pc, #20]	; (8000820 <std+0x44>)
 800080c:	6224      	str	r4, [r4, #32]
 800080e:	6323      	str	r3, [r4, #48]	; 0x30
 8000810:	bd10      	pop	{r4, pc}
 8000812:	bf00      	nop
 8000814:	0800107d 	.word	0x0800107d
 8000818:	0800109f 	.word	0x0800109f
 800081c:	080010d7 	.word	0x080010d7
 8000820:	080010fb 	.word	0x080010fb

08000824 <_cleanup_r>:
 8000824:	4901      	ldr	r1, [pc, #4]	; (800082c <_cleanup_r+0x8>)
 8000826:	f000 b8af 	b.w	8000988 <_fwalk_reent>
 800082a:	bf00      	nop
 800082c:	080013d5 	.word	0x080013d5

08000830 <__sfmoreglue>:
 8000830:	b570      	push	{r4, r5, r6, lr}
 8000832:	1e4a      	subs	r2, r1, #1
 8000834:	2568      	movs	r5, #104	; 0x68
 8000836:	4355      	muls	r5, r2
 8000838:	460e      	mov	r6, r1
 800083a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800083e:	f000 f8c5 	bl	80009cc <_malloc_r>
 8000842:	4604      	mov	r4, r0
 8000844:	b140      	cbz	r0, 8000858 <__sfmoreglue+0x28>
 8000846:	2100      	movs	r1, #0
 8000848:	e9c0 1600 	strd	r1, r6, [r0]
 800084c:	300c      	adds	r0, #12
 800084e:	60a0      	str	r0, [r4, #8]
 8000850:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000854:	f7ff ffa2 	bl	800079c <memset>
 8000858:	4620      	mov	r0, r4
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__sfp_lock_acquire>:
 800085c:	4801      	ldr	r0, [pc, #4]	; (8000864 <__sfp_lock_acquire+0x8>)
 800085e:	f000 b8b3 	b.w	80009c8 <__retarget_lock_acquire_recursive>
 8000862:	bf00      	nop
 8000864:	200000a4 	.word	0x200000a4

08000868 <__sfp_lock_release>:
 8000868:	4801      	ldr	r0, [pc, #4]	; (8000870 <__sfp_lock_release+0x8>)
 800086a:	f000 b8ae 	b.w	80009ca <__retarget_lock_release_recursive>
 800086e:	bf00      	nop
 8000870:	200000a4 	.word	0x200000a4

08000874 <__sinit_lock_acquire>:
 8000874:	4801      	ldr	r0, [pc, #4]	; (800087c <__sinit_lock_acquire+0x8>)
 8000876:	f000 b8a7 	b.w	80009c8 <__retarget_lock_acquire_recursive>
 800087a:	bf00      	nop
 800087c:	2000009f 	.word	0x2000009f

08000880 <__sinit_lock_release>:
 8000880:	4801      	ldr	r0, [pc, #4]	; (8000888 <__sinit_lock_release+0x8>)
 8000882:	f000 b8a2 	b.w	80009ca <__retarget_lock_release_recursive>
 8000886:	bf00      	nop
 8000888:	2000009f 	.word	0x2000009f

0800088c <__sinit>:
 800088c:	b510      	push	{r4, lr}
 800088e:	4604      	mov	r4, r0
 8000890:	f7ff fff0 	bl	8000874 <__sinit_lock_acquire>
 8000894:	69a3      	ldr	r3, [r4, #24]
 8000896:	b11b      	cbz	r3, 80008a0 <__sinit+0x14>
 8000898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800089c:	f7ff bff0 	b.w	8000880 <__sinit_lock_release>
 80008a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80008a4:	6523      	str	r3, [r4, #80]	; 0x50
 80008a6:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <__sinit+0x68>)
 80008a8:	4a13      	ldr	r2, [pc, #76]	; (80008f8 <__sinit+0x6c>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80008ae:	42a3      	cmp	r3, r4
 80008b0:	bf04      	itt	eq
 80008b2:	2301      	moveq	r3, #1
 80008b4:	61a3      	streq	r3, [r4, #24]
 80008b6:	4620      	mov	r0, r4
 80008b8:	f000 f820 	bl	80008fc <__sfp>
 80008bc:	6060      	str	r0, [r4, #4]
 80008be:	4620      	mov	r0, r4
 80008c0:	f000 f81c 	bl	80008fc <__sfp>
 80008c4:	60a0      	str	r0, [r4, #8]
 80008c6:	4620      	mov	r0, r4
 80008c8:	f000 f818 	bl	80008fc <__sfp>
 80008cc:	2200      	movs	r2, #0
 80008ce:	60e0      	str	r0, [r4, #12]
 80008d0:	2104      	movs	r1, #4
 80008d2:	6860      	ldr	r0, [r4, #4]
 80008d4:	f7ff ff82 	bl	80007dc <std>
 80008d8:	68a0      	ldr	r0, [r4, #8]
 80008da:	2201      	movs	r2, #1
 80008dc:	2109      	movs	r1, #9
 80008de:	f7ff ff7d 	bl	80007dc <std>
 80008e2:	68e0      	ldr	r0, [r4, #12]
 80008e4:	2202      	movs	r2, #2
 80008e6:	2112      	movs	r1, #18
 80008e8:	f7ff ff78 	bl	80007dc <std>
 80008ec:	2301      	movs	r3, #1
 80008ee:	61a3      	str	r3, [r4, #24]
 80008f0:	e7d2      	b.n	8000898 <__sinit+0xc>
 80008f2:	bf00      	nop
 80008f4:	080016c8 	.word	0x080016c8
 80008f8:	08000825 	.word	0x08000825

080008fc <__sfp>:
 80008fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008fe:	4607      	mov	r7, r0
 8000900:	f7ff ffac 	bl	800085c <__sfp_lock_acquire>
 8000904:	4b1e      	ldr	r3, [pc, #120]	; (8000980 <__sfp+0x84>)
 8000906:	681e      	ldr	r6, [r3, #0]
 8000908:	69b3      	ldr	r3, [r6, #24]
 800090a:	b913      	cbnz	r3, 8000912 <__sfp+0x16>
 800090c:	4630      	mov	r0, r6
 800090e:	f7ff ffbd 	bl	800088c <__sinit>
 8000912:	3648      	adds	r6, #72	; 0x48
 8000914:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000918:	3b01      	subs	r3, #1
 800091a:	d503      	bpl.n	8000924 <__sfp+0x28>
 800091c:	6833      	ldr	r3, [r6, #0]
 800091e:	b30b      	cbz	r3, 8000964 <__sfp+0x68>
 8000920:	6836      	ldr	r6, [r6, #0]
 8000922:	e7f7      	b.n	8000914 <__sfp+0x18>
 8000924:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000928:	b9d5      	cbnz	r5, 8000960 <__sfp+0x64>
 800092a:	4b16      	ldr	r3, [pc, #88]	; (8000984 <__sfp+0x88>)
 800092c:	60e3      	str	r3, [r4, #12]
 800092e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000932:	6665      	str	r5, [r4, #100]	; 0x64
 8000934:	f000 f847 	bl	80009c6 <__retarget_lock_init_recursive>
 8000938:	f7ff ff96 	bl	8000868 <__sfp_lock_release>
 800093c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000940:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000944:	6025      	str	r5, [r4, #0]
 8000946:	61a5      	str	r5, [r4, #24]
 8000948:	2208      	movs	r2, #8
 800094a:	4629      	mov	r1, r5
 800094c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000950:	f7ff ff24 	bl	800079c <memset>
 8000954:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000958:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800095c:	4620      	mov	r0, r4
 800095e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000960:	3468      	adds	r4, #104	; 0x68
 8000962:	e7d9      	b.n	8000918 <__sfp+0x1c>
 8000964:	2104      	movs	r1, #4
 8000966:	4638      	mov	r0, r7
 8000968:	f7ff ff62 	bl	8000830 <__sfmoreglue>
 800096c:	4604      	mov	r4, r0
 800096e:	6030      	str	r0, [r6, #0]
 8000970:	2800      	cmp	r0, #0
 8000972:	d1d5      	bne.n	8000920 <__sfp+0x24>
 8000974:	f7ff ff78 	bl	8000868 <__sfp_lock_release>
 8000978:	230c      	movs	r3, #12
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	e7ee      	b.n	800095c <__sfp+0x60>
 800097e:	bf00      	nop
 8000980:	080016c8 	.word	0x080016c8
 8000984:	ffff0001 	.word	0xffff0001

08000988 <_fwalk_reent>:
 8000988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800098c:	4606      	mov	r6, r0
 800098e:	4688      	mov	r8, r1
 8000990:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000994:	2700      	movs	r7, #0
 8000996:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800099a:	f1b9 0901 	subs.w	r9, r9, #1
 800099e:	d505      	bpl.n	80009ac <_fwalk_reent+0x24>
 80009a0:	6824      	ldr	r4, [r4, #0]
 80009a2:	2c00      	cmp	r4, #0
 80009a4:	d1f7      	bne.n	8000996 <_fwalk_reent+0xe>
 80009a6:	4638      	mov	r0, r7
 80009a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009ac:	89ab      	ldrh	r3, [r5, #12]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d907      	bls.n	80009c2 <_fwalk_reent+0x3a>
 80009b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80009b6:	3301      	adds	r3, #1
 80009b8:	d003      	beq.n	80009c2 <_fwalk_reent+0x3a>
 80009ba:	4629      	mov	r1, r5
 80009bc:	4630      	mov	r0, r6
 80009be:	47c0      	blx	r8
 80009c0:	4307      	orrs	r7, r0
 80009c2:	3568      	adds	r5, #104	; 0x68
 80009c4:	e7e9      	b.n	800099a <_fwalk_reent+0x12>

080009c6 <__retarget_lock_init_recursive>:
 80009c6:	4770      	bx	lr

080009c8 <__retarget_lock_acquire_recursive>:
 80009c8:	4770      	bx	lr

080009ca <__retarget_lock_release_recursive>:
 80009ca:	4770      	bx	lr

080009cc <_malloc_r>:
 80009cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ce:	1ccd      	adds	r5, r1, #3
 80009d0:	f025 0503 	bic.w	r5, r5, #3
 80009d4:	3508      	adds	r5, #8
 80009d6:	2d0c      	cmp	r5, #12
 80009d8:	bf38      	it	cc
 80009da:	250c      	movcc	r5, #12
 80009dc:	2d00      	cmp	r5, #0
 80009de:	4606      	mov	r6, r0
 80009e0:	db01      	blt.n	80009e6 <_malloc_r+0x1a>
 80009e2:	42a9      	cmp	r1, r5
 80009e4:	d903      	bls.n	80009ee <_malloc_r+0x22>
 80009e6:	230c      	movs	r3, #12
 80009e8:	6033      	str	r3, [r6, #0]
 80009ea:	2000      	movs	r0, #0
 80009ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009ee:	f000 fda3 	bl	8001538 <__malloc_lock>
 80009f2:	4921      	ldr	r1, [pc, #132]	; (8000a78 <_malloc_r+0xac>)
 80009f4:	680a      	ldr	r2, [r1, #0]
 80009f6:	4614      	mov	r4, r2
 80009f8:	b99c      	cbnz	r4, 8000a22 <_malloc_r+0x56>
 80009fa:	4f20      	ldr	r7, [pc, #128]	; (8000a7c <_malloc_r+0xb0>)
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	b923      	cbnz	r3, 8000a0a <_malloc_r+0x3e>
 8000a00:	4621      	mov	r1, r4
 8000a02:	4630      	mov	r0, r6
 8000a04:	f000 fb2a 	bl	800105c <_sbrk_r>
 8000a08:	6038      	str	r0, [r7, #0]
 8000a0a:	4629      	mov	r1, r5
 8000a0c:	4630      	mov	r0, r6
 8000a0e:	f000 fb25 	bl	800105c <_sbrk_r>
 8000a12:	1c43      	adds	r3, r0, #1
 8000a14:	d123      	bne.n	8000a5e <_malloc_r+0x92>
 8000a16:	230c      	movs	r3, #12
 8000a18:	6033      	str	r3, [r6, #0]
 8000a1a:	4630      	mov	r0, r6
 8000a1c:	f000 fd92 	bl	8001544 <__malloc_unlock>
 8000a20:	e7e3      	b.n	80009ea <_malloc_r+0x1e>
 8000a22:	6823      	ldr	r3, [r4, #0]
 8000a24:	1b5b      	subs	r3, r3, r5
 8000a26:	d417      	bmi.n	8000a58 <_malloc_r+0x8c>
 8000a28:	2b0b      	cmp	r3, #11
 8000a2a:	d903      	bls.n	8000a34 <_malloc_r+0x68>
 8000a2c:	6023      	str	r3, [r4, #0]
 8000a2e:	441c      	add	r4, r3
 8000a30:	6025      	str	r5, [r4, #0]
 8000a32:	e004      	b.n	8000a3e <_malloc_r+0x72>
 8000a34:	6863      	ldr	r3, [r4, #4]
 8000a36:	42a2      	cmp	r2, r4
 8000a38:	bf0c      	ite	eq
 8000a3a:	600b      	streq	r3, [r1, #0]
 8000a3c:	6053      	strne	r3, [r2, #4]
 8000a3e:	4630      	mov	r0, r6
 8000a40:	f000 fd80 	bl	8001544 <__malloc_unlock>
 8000a44:	f104 000b 	add.w	r0, r4, #11
 8000a48:	1d23      	adds	r3, r4, #4
 8000a4a:	f020 0007 	bic.w	r0, r0, #7
 8000a4e:	1ac2      	subs	r2, r0, r3
 8000a50:	d0cc      	beq.n	80009ec <_malloc_r+0x20>
 8000a52:	1a1b      	subs	r3, r3, r0
 8000a54:	50a3      	str	r3, [r4, r2]
 8000a56:	e7c9      	b.n	80009ec <_malloc_r+0x20>
 8000a58:	4622      	mov	r2, r4
 8000a5a:	6864      	ldr	r4, [r4, #4]
 8000a5c:	e7cc      	b.n	80009f8 <_malloc_r+0x2c>
 8000a5e:	1cc4      	adds	r4, r0, #3
 8000a60:	f024 0403 	bic.w	r4, r4, #3
 8000a64:	42a0      	cmp	r0, r4
 8000a66:	d0e3      	beq.n	8000a30 <_malloc_r+0x64>
 8000a68:	1a21      	subs	r1, r4, r0
 8000a6a:	4630      	mov	r0, r6
 8000a6c:	f000 faf6 	bl	800105c <_sbrk_r>
 8000a70:	3001      	adds	r0, #1
 8000a72:	d1dd      	bne.n	8000a30 <_malloc_r+0x64>
 8000a74:	e7cf      	b.n	8000a16 <_malloc_r+0x4a>
 8000a76:	bf00      	nop
 8000a78:	20000084 	.word	0x20000084
 8000a7c:	20000088 	.word	0x20000088

08000a80 <__sfputc_r>:
 8000a80:	6893      	ldr	r3, [r2, #8]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	b410      	push	{r4}
 8000a88:	6093      	str	r3, [r2, #8]
 8000a8a:	da08      	bge.n	8000a9e <__sfputc_r+0x1e>
 8000a8c:	6994      	ldr	r4, [r2, #24]
 8000a8e:	42a3      	cmp	r3, r4
 8000a90:	db01      	blt.n	8000a96 <__sfputc_r+0x16>
 8000a92:	290a      	cmp	r1, #10
 8000a94:	d103      	bne.n	8000a9e <__sfputc_r+0x1e>
 8000a96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a9a:	f000 bb33 	b.w	8001104 <__swbuf_r>
 8000a9e:	6813      	ldr	r3, [r2, #0]
 8000aa0:	1c58      	adds	r0, r3, #1
 8000aa2:	6010      	str	r0, [r2, #0]
 8000aa4:	7019      	strb	r1, [r3, #0]
 8000aa6:	4608      	mov	r0, r1
 8000aa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <__sfputs_r>:
 8000aae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ab0:	4606      	mov	r6, r0
 8000ab2:	460f      	mov	r7, r1
 8000ab4:	4614      	mov	r4, r2
 8000ab6:	18d5      	adds	r5, r2, r3
 8000ab8:	42ac      	cmp	r4, r5
 8000aba:	d101      	bne.n	8000ac0 <__sfputs_r+0x12>
 8000abc:	2000      	movs	r0, #0
 8000abe:	e007      	b.n	8000ad0 <__sfputs_r+0x22>
 8000ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ac4:	463a      	mov	r2, r7
 8000ac6:	4630      	mov	r0, r6
 8000ac8:	f7ff ffda 	bl	8000a80 <__sfputc_r>
 8000acc:	1c43      	adds	r3, r0, #1
 8000ace:	d1f3      	bne.n	8000ab8 <__sfputs_r+0xa>
 8000ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000ad4 <_vfiprintf_r>:
 8000ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ad8:	460d      	mov	r5, r1
 8000ada:	b09d      	sub	sp, #116	; 0x74
 8000adc:	4614      	mov	r4, r2
 8000ade:	4698      	mov	r8, r3
 8000ae0:	4606      	mov	r6, r0
 8000ae2:	b118      	cbz	r0, 8000aec <_vfiprintf_r+0x18>
 8000ae4:	6983      	ldr	r3, [r0, #24]
 8000ae6:	b90b      	cbnz	r3, 8000aec <_vfiprintf_r+0x18>
 8000ae8:	f7ff fed0 	bl	800088c <__sinit>
 8000aec:	4b89      	ldr	r3, [pc, #548]	; (8000d14 <_vfiprintf_r+0x240>)
 8000aee:	429d      	cmp	r5, r3
 8000af0:	d11b      	bne.n	8000b2a <_vfiprintf_r+0x56>
 8000af2:	6875      	ldr	r5, [r6, #4]
 8000af4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000af6:	07d9      	lsls	r1, r3, #31
 8000af8:	d405      	bmi.n	8000b06 <_vfiprintf_r+0x32>
 8000afa:	89ab      	ldrh	r3, [r5, #12]
 8000afc:	059a      	lsls	r2, r3, #22
 8000afe:	d402      	bmi.n	8000b06 <_vfiprintf_r+0x32>
 8000b00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b02:	f7ff ff61 	bl	80009c8 <__retarget_lock_acquire_recursive>
 8000b06:	89ab      	ldrh	r3, [r5, #12]
 8000b08:	071b      	lsls	r3, r3, #28
 8000b0a:	d501      	bpl.n	8000b10 <_vfiprintf_r+0x3c>
 8000b0c:	692b      	ldr	r3, [r5, #16]
 8000b0e:	b9eb      	cbnz	r3, 8000b4c <_vfiprintf_r+0x78>
 8000b10:	4629      	mov	r1, r5
 8000b12:	4630      	mov	r0, r6
 8000b14:	f000 fb5a 	bl	80011cc <__swsetup_r>
 8000b18:	b1c0      	cbz	r0, 8000b4c <_vfiprintf_r+0x78>
 8000b1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000b1c:	07dc      	lsls	r4, r3, #31
 8000b1e:	d50e      	bpl.n	8000b3e <_vfiprintf_r+0x6a>
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	b01d      	add	sp, #116	; 0x74
 8000b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b2a:	4b7b      	ldr	r3, [pc, #492]	; (8000d18 <_vfiprintf_r+0x244>)
 8000b2c:	429d      	cmp	r5, r3
 8000b2e:	d101      	bne.n	8000b34 <_vfiprintf_r+0x60>
 8000b30:	68b5      	ldr	r5, [r6, #8]
 8000b32:	e7df      	b.n	8000af4 <_vfiprintf_r+0x20>
 8000b34:	4b79      	ldr	r3, [pc, #484]	; (8000d1c <_vfiprintf_r+0x248>)
 8000b36:	429d      	cmp	r5, r3
 8000b38:	bf08      	it	eq
 8000b3a:	68f5      	ldreq	r5, [r6, #12]
 8000b3c:	e7da      	b.n	8000af4 <_vfiprintf_r+0x20>
 8000b3e:	89ab      	ldrh	r3, [r5, #12]
 8000b40:	0598      	lsls	r0, r3, #22
 8000b42:	d4ed      	bmi.n	8000b20 <_vfiprintf_r+0x4c>
 8000b44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b46:	f7ff ff40 	bl	80009ca <__retarget_lock_release_recursive>
 8000b4a:	e7e9      	b.n	8000b20 <_vfiprintf_r+0x4c>
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8000b50:	2320      	movs	r3, #32
 8000b52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000b56:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b5a:	2330      	movs	r3, #48	; 0x30
 8000b5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000d20 <_vfiprintf_r+0x24c>
 8000b60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000b64:	f04f 0901 	mov.w	r9, #1
 8000b68:	4623      	mov	r3, r4
 8000b6a:	469a      	mov	sl, r3
 8000b6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b70:	b10a      	cbz	r2, 8000b76 <_vfiprintf_r+0xa2>
 8000b72:	2a25      	cmp	r2, #37	; 0x25
 8000b74:	d1f9      	bne.n	8000b6a <_vfiprintf_r+0x96>
 8000b76:	ebba 0b04 	subs.w	fp, sl, r4
 8000b7a:	d00b      	beq.n	8000b94 <_vfiprintf_r+0xc0>
 8000b7c:	465b      	mov	r3, fp
 8000b7e:	4622      	mov	r2, r4
 8000b80:	4629      	mov	r1, r5
 8000b82:	4630      	mov	r0, r6
 8000b84:	f7ff ff93 	bl	8000aae <__sfputs_r>
 8000b88:	3001      	adds	r0, #1
 8000b8a:	f000 80aa 	beq.w	8000ce2 <_vfiprintf_r+0x20e>
 8000b8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000b90:	445a      	add	r2, fp
 8000b92:	9209      	str	r2, [sp, #36]	; 0x24
 8000b94:	f89a 3000 	ldrb.w	r3, [sl]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f000 80a2 	beq.w	8000ce2 <_vfiprintf_r+0x20e>
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ba8:	f10a 0a01 	add.w	sl, sl, #1
 8000bac:	9304      	str	r3, [sp, #16]
 8000bae:	9307      	str	r3, [sp, #28]
 8000bb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000bb4:	931a      	str	r3, [sp, #104]	; 0x68
 8000bb6:	4654      	mov	r4, sl
 8000bb8:	2205      	movs	r2, #5
 8000bba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bbe:	4858      	ldr	r0, [pc, #352]	; (8000d20 <_vfiprintf_r+0x24c>)
 8000bc0:	f7ff fb0e 	bl	80001e0 <memchr>
 8000bc4:	9a04      	ldr	r2, [sp, #16]
 8000bc6:	b9d8      	cbnz	r0, 8000c00 <_vfiprintf_r+0x12c>
 8000bc8:	06d1      	lsls	r1, r2, #27
 8000bca:	bf44      	itt	mi
 8000bcc:	2320      	movmi	r3, #32
 8000bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000bd2:	0713      	lsls	r3, r2, #28
 8000bd4:	bf44      	itt	mi
 8000bd6:	232b      	movmi	r3, #43	; 0x2b
 8000bd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000bdc:	f89a 3000 	ldrb.w	r3, [sl]
 8000be0:	2b2a      	cmp	r3, #42	; 0x2a
 8000be2:	d015      	beq.n	8000c10 <_vfiprintf_r+0x13c>
 8000be4:	9a07      	ldr	r2, [sp, #28]
 8000be6:	4654      	mov	r4, sl
 8000be8:	2000      	movs	r0, #0
 8000bea:	f04f 0c0a 	mov.w	ip, #10
 8000bee:	4621      	mov	r1, r4
 8000bf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000bf4:	3b30      	subs	r3, #48	; 0x30
 8000bf6:	2b09      	cmp	r3, #9
 8000bf8:	d94e      	bls.n	8000c98 <_vfiprintf_r+0x1c4>
 8000bfa:	b1b0      	cbz	r0, 8000c2a <_vfiprintf_r+0x156>
 8000bfc:	9207      	str	r2, [sp, #28]
 8000bfe:	e014      	b.n	8000c2a <_vfiprintf_r+0x156>
 8000c00:	eba0 0308 	sub.w	r3, r0, r8
 8000c04:	fa09 f303 	lsl.w	r3, r9, r3
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	9304      	str	r3, [sp, #16]
 8000c0c:	46a2      	mov	sl, r4
 8000c0e:	e7d2      	b.n	8000bb6 <_vfiprintf_r+0xe2>
 8000c10:	9b03      	ldr	r3, [sp, #12]
 8000c12:	1d19      	adds	r1, r3, #4
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	9103      	str	r1, [sp, #12]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	bfbb      	ittet	lt
 8000c1c:	425b      	neglt	r3, r3
 8000c1e:	f042 0202 	orrlt.w	r2, r2, #2
 8000c22:	9307      	strge	r3, [sp, #28]
 8000c24:	9307      	strlt	r3, [sp, #28]
 8000c26:	bfb8      	it	lt
 8000c28:	9204      	strlt	r2, [sp, #16]
 8000c2a:	7823      	ldrb	r3, [r4, #0]
 8000c2c:	2b2e      	cmp	r3, #46	; 0x2e
 8000c2e:	d10c      	bne.n	8000c4a <_vfiprintf_r+0x176>
 8000c30:	7863      	ldrb	r3, [r4, #1]
 8000c32:	2b2a      	cmp	r3, #42	; 0x2a
 8000c34:	d135      	bne.n	8000ca2 <_vfiprintf_r+0x1ce>
 8000c36:	9b03      	ldr	r3, [sp, #12]
 8000c38:	1d1a      	adds	r2, r3, #4
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	9203      	str	r2, [sp, #12]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	bfb8      	it	lt
 8000c42:	f04f 33ff 	movlt.w	r3, #4294967295
 8000c46:	3402      	adds	r4, #2
 8000c48:	9305      	str	r3, [sp, #20]
 8000c4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000d30 <_vfiprintf_r+0x25c>
 8000c4e:	7821      	ldrb	r1, [r4, #0]
 8000c50:	2203      	movs	r2, #3
 8000c52:	4650      	mov	r0, sl
 8000c54:	f7ff fac4 	bl	80001e0 <memchr>
 8000c58:	b140      	cbz	r0, 8000c6c <_vfiprintf_r+0x198>
 8000c5a:	2340      	movs	r3, #64	; 0x40
 8000c5c:	eba0 000a 	sub.w	r0, r0, sl
 8000c60:	fa03 f000 	lsl.w	r0, r3, r0
 8000c64:	9b04      	ldr	r3, [sp, #16]
 8000c66:	4303      	orrs	r3, r0
 8000c68:	3401      	adds	r4, #1
 8000c6a:	9304      	str	r3, [sp, #16]
 8000c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c70:	482c      	ldr	r0, [pc, #176]	; (8000d24 <_vfiprintf_r+0x250>)
 8000c72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000c76:	2206      	movs	r2, #6
 8000c78:	f7ff fab2 	bl	80001e0 <memchr>
 8000c7c:	2800      	cmp	r0, #0
 8000c7e:	d03f      	beq.n	8000d00 <_vfiprintf_r+0x22c>
 8000c80:	4b29      	ldr	r3, [pc, #164]	; (8000d28 <_vfiprintf_r+0x254>)
 8000c82:	bb1b      	cbnz	r3, 8000ccc <_vfiprintf_r+0x1f8>
 8000c84:	9b03      	ldr	r3, [sp, #12]
 8000c86:	3307      	adds	r3, #7
 8000c88:	f023 0307 	bic.w	r3, r3, #7
 8000c8c:	3308      	adds	r3, #8
 8000c8e:	9303      	str	r3, [sp, #12]
 8000c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c92:	443b      	add	r3, r7
 8000c94:	9309      	str	r3, [sp, #36]	; 0x24
 8000c96:	e767      	b.n	8000b68 <_vfiprintf_r+0x94>
 8000c98:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c9c:	460c      	mov	r4, r1
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	e7a5      	b.n	8000bee <_vfiprintf_r+0x11a>
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	3401      	adds	r4, #1
 8000ca6:	9305      	str	r3, [sp, #20]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f04f 0c0a 	mov.w	ip, #10
 8000cae:	4620      	mov	r0, r4
 8000cb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000cb4:	3a30      	subs	r2, #48	; 0x30
 8000cb6:	2a09      	cmp	r2, #9
 8000cb8:	d903      	bls.n	8000cc2 <_vfiprintf_r+0x1ee>
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d0c5      	beq.n	8000c4a <_vfiprintf_r+0x176>
 8000cbe:	9105      	str	r1, [sp, #20]
 8000cc0:	e7c3      	b.n	8000c4a <_vfiprintf_r+0x176>
 8000cc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e7f0      	b.n	8000cae <_vfiprintf_r+0x1da>
 8000ccc:	ab03      	add	r3, sp, #12
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	462a      	mov	r2, r5
 8000cd2:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <_vfiprintf_r+0x258>)
 8000cd4:	a904      	add	r1, sp, #16
 8000cd6:	4630      	mov	r0, r6
 8000cd8:	f3af 8000 	nop.w
 8000cdc:	4607      	mov	r7, r0
 8000cde:	1c78      	adds	r0, r7, #1
 8000ce0:	d1d6      	bne.n	8000c90 <_vfiprintf_r+0x1bc>
 8000ce2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ce4:	07d9      	lsls	r1, r3, #31
 8000ce6:	d405      	bmi.n	8000cf4 <_vfiprintf_r+0x220>
 8000ce8:	89ab      	ldrh	r3, [r5, #12]
 8000cea:	059a      	lsls	r2, r3, #22
 8000cec:	d402      	bmi.n	8000cf4 <_vfiprintf_r+0x220>
 8000cee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000cf0:	f7ff fe6b 	bl	80009ca <__retarget_lock_release_recursive>
 8000cf4:	89ab      	ldrh	r3, [r5, #12]
 8000cf6:	065b      	lsls	r3, r3, #25
 8000cf8:	f53f af12 	bmi.w	8000b20 <_vfiprintf_r+0x4c>
 8000cfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000cfe:	e711      	b.n	8000b24 <_vfiprintf_r+0x50>
 8000d00:	ab03      	add	r3, sp, #12
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	462a      	mov	r2, r5
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <_vfiprintf_r+0x258>)
 8000d08:	a904      	add	r1, sp, #16
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	f000 f880 	bl	8000e10 <_printf_i>
 8000d10:	e7e4      	b.n	8000cdc <_vfiprintf_r+0x208>
 8000d12:	bf00      	nop
 8000d14:	080016ec 	.word	0x080016ec
 8000d18:	0800170c 	.word	0x0800170c
 8000d1c:	080016cc 	.word	0x080016cc
 8000d20:	0800172c 	.word	0x0800172c
 8000d24:	08001736 	.word	0x08001736
 8000d28:	00000000 	.word	0x00000000
 8000d2c:	08000aaf 	.word	0x08000aaf
 8000d30:	08001732 	.word	0x08001732

08000d34 <_printf_common>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	4616      	mov	r6, r2
 8000d3a:	4699      	mov	r9, r3
 8000d3c:	688a      	ldr	r2, [r1, #8]
 8000d3e:	690b      	ldr	r3, [r1, #16]
 8000d40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000d44:	4293      	cmp	r3, r2
 8000d46:	bfb8      	it	lt
 8000d48:	4613      	movlt	r3, r2
 8000d4a:	6033      	str	r3, [r6, #0]
 8000d4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000d50:	4607      	mov	r7, r0
 8000d52:	460c      	mov	r4, r1
 8000d54:	b10a      	cbz	r2, 8000d5a <_printf_common+0x26>
 8000d56:	3301      	adds	r3, #1
 8000d58:	6033      	str	r3, [r6, #0]
 8000d5a:	6823      	ldr	r3, [r4, #0]
 8000d5c:	0699      	lsls	r1, r3, #26
 8000d5e:	bf42      	ittt	mi
 8000d60:	6833      	ldrmi	r3, [r6, #0]
 8000d62:	3302      	addmi	r3, #2
 8000d64:	6033      	strmi	r3, [r6, #0]
 8000d66:	6825      	ldr	r5, [r4, #0]
 8000d68:	f015 0506 	ands.w	r5, r5, #6
 8000d6c:	d106      	bne.n	8000d7c <_printf_common+0x48>
 8000d6e:	f104 0a19 	add.w	sl, r4, #25
 8000d72:	68e3      	ldr	r3, [r4, #12]
 8000d74:	6832      	ldr	r2, [r6, #0]
 8000d76:	1a9b      	subs	r3, r3, r2
 8000d78:	42ab      	cmp	r3, r5
 8000d7a:	dc26      	bgt.n	8000dca <_printf_common+0x96>
 8000d7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000d80:	1e13      	subs	r3, r2, #0
 8000d82:	6822      	ldr	r2, [r4, #0]
 8000d84:	bf18      	it	ne
 8000d86:	2301      	movne	r3, #1
 8000d88:	0692      	lsls	r2, r2, #26
 8000d8a:	d42b      	bmi.n	8000de4 <_printf_common+0xb0>
 8000d8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000d90:	4649      	mov	r1, r9
 8000d92:	4638      	mov	r0, r7
 8000d94:	47c0      	blx	r8
 8000d96:	3001      	adds	r0, #1
 8000d98:	d01e      	beq.n	8000dd8 <_printf_common+0xa4>
 8000d9a:	6823      	ldr	r3, [r4, #0]
 8000d9c:	68e5      	ldr	r5, [r4, #12]
 8000d9e:	6832      	ldr	r2, [r6, #0]
 8000da0:	f003 0306 	and.w	r3, r3, #6
 8000da4:	2b04      	cmp	r3, #4
 8000da6:	bf08      	it	eq
 8000da8:	1aad      	subeq	r5, r5, r2
 8000daa:	68a3      	ldr	r3, [r4, #8]
 8000dac:	6922      	ldr	r2, [r4, #16]
 8000dae:	bf0c      	ite	eq
 8000db0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000db4:	2500      	movne	r5, #0
 8000db6:	4293      	cmp	r3, r2
 8000db8:	bfc4      	itt	gt
 8000dba:	1a9b      	subgt	r3, r3, r2
 8000dbc:	18ed      	addgt	r5, r5, r3
 8000dbe:	2600      	movs	r6, #0
 8000dc0:	341a      	adds	r4, #26
 8000dc2:	42b5      	cmp	r5, r6
 8000dc4:	d11a      	bne.n	8000dfc <_printf_common+0xc8>
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	e008      	b.n	8000ddc <_printf_common+0xa8>
 8000dca:	2301      	movs	r3, #1
 8000dcc:	4652      	mov	r2, sl
 8000dce:	4649      	mov	r1, r9
 8000dd0:	4638      	mov	r0, r7
 8000dd2:	47c0      	blx	r8
 8000dd4:	3001      	adds	r0, #1
 8000dd6:	d103      	bne.n	8000de0 <_printf_common+0xac>
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	3501      	adds	r5, #1
 8000de2:	e7c6      	b.n	8000d72 <_printf_common+0x3e>
 8000de4:	18e1      	adds	r1, r4, r3
 8000de6:	1c5a      	adds	r2, r3, #1
 8000de8:	2030      	movs	r0, #48	; 0x30
 8000dea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000dee:	4422      	add	r2, r4
 8000df0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000df4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000df8:	3302      	adds	r3, #2
 8000dfa:	e7c7      	b.n	8000d8c <_printf_common+0x58>
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	4622      	mov	r2, r4
 8000e00:	4649      	mov	r1, r9
 8000e02:	4638      	mov	r0, r7
 8000e04:	47c0      	blx	r8
 8000e06:	3001      	adds	r0, #1
 8000e08:	d0e6      	beq.n	8000dd8 <_printf_common+0xa4>
 8000e0a:	3601      	adds	r6, #1
 8000e0c:	e7d9      	b.n	8000dc2 <_printf_common+0x8e>
	...

08000e10 <_printf_i>:
 8000e10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e14:	460c      	mov	r4, r1
 8000e16:	4691      	mov	r9, r2
 8000e18:	7e27      	ldrb	r7, [r4, #24]
 8000e1a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000e1c:	2f78      	cmp	r7, #120	; 0x78
 8000e1e:	4680      	mov	r8, r0
 8000e20:	469a      	mov	sl, r3
 8000e22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000e26:	d807      	bhi.n	8000e38 <_printf_i+0x28>
 8000e28:	2f62      	cmp	r7, #98	; 0x62
 8000e2a:	d80a      	bhi.n	8000e42 <_printf_i+0x32>
 8000e2c:	2f00      	cmp	r7, #0
 8000e2e:	f000 80d8 	beq.w	8000fe2 <_printf_i+0x1d2>
 8000e32:	2f58      	cmp	r7, #88	; 0x58
 8000e34:	f000 80a3 	beq.w	8000f7e <_printf_i+0x16e>
 8000e38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000e3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000e40:	e03a      	b.n	8000eb8 <_printf_i+0xa8>
 8000e42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000e46:	2b15      	cmp	r3, #21
 8000e48:	d8f6      	bhi.n	8000e38 <_printf_i+0x28>
 8000e4a:	a001      	add	r0, pc, #4	; (adr r0, 8000e50 <_printf_i+0x40>)
 8000e4c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8000e50:	08000ea9 	.word	0x08000ea9
 8000e54:	08000ebd 	.word	0x08000ebd
 8000e58:	08000e39 	.word	0x08000e39
 8000e5c:	08000e39 	.word	0x08000e39
 8000e60:	08000e39 	.word	0x08000e39
 8000e64:	08000e39 	.word	0x08000e39
 8000e68:	08000ebd 	.word	0x08000ebd
 8000e6c:	08000e39 	.word	0x08000e39
 8000e70:	08000e39 	.word	0x08000e39
 8000e74:	08000e39 	.word	0x08000e39
 8000e78:	08000e39 	.word	0x08000e39
 8000e7c:	08000fc9 	.word	0x08000fc9
 8000e80:	08000eed 	.word	0x08000eed
 8000e84:	08000fab 	.word	0x08000fab
 8000e88:	08000e39 	.word	0x08000e39
 8000e8c:	08000e39 	.word	0x08000e39
 8000e90:	08000feb 	.word	0x08000feb
 8000e94:	08000e39 	.word	0x08000e39
 8000e98:	08000eed 	.word	0x08000eed
 8000e9c:	08000e39 	.word	0x08000e39
 8000ea0:	08000e39 	.word	0x08000e39
 8000ea4:	08000fb3 	.word	0x08000fb3
 8000ea8:	680b      	ldr	r3, [r1, #0]
 8000eaa:	1d1a      	adds	r2, r3, #4
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	600a      	str	r2, [r1, #0]
 8000eb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000eb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e0a3      	b.n	8001004 <_printf_i+0x1f4>
 8000ebc:	6825      	ldr	r5, [r4, #0]
 8000ebe:	6808      	ldr	r0, [r1, #0]
 8000ec0:	062e      	lsls	r6, r5, #24
 8000ec2:	f100 0304 	add.w	r3, r0, #4
 8000ec6:	d50a      	bpl.n	8000ede <_printf_i+0xce>
 8000ec8:	6805      	ldr	r5, [r0, #0]
 8000eca:	600b      	str	r3, [r1, #0]
 8000ecc:	2d00      	cmp	r5, #0
 8000ece:	da03      	bge.n	8000ed8 <_printf_i+0xc8>
 8000ed0:	232d      	movs	r3, #45	; 0x2d
 8000ed2:	426d      	negs	r5, r5
 8000ed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000ed8:	485e      	ldr	r0, [pc, #376]	; (8001054 <_printf_i+0x244>)
 8000eda:	230a      	movs	r3, #10
 8000edc:	e019      	b.n	8000f12 <_printf_i+0x102>
 8000ede:	f015 0f40 	tst.w	r5, #64	; 0x40
 8000ee2:	6805      	ldr	r5, [r0, #0]
 8000ee4:	600b      	str	r3, [r1, #0]
 8000ee6:	bf18      	it	ne
 8000ee8:	b22d      	sxthne	r5, r5
 8000eea:	e7ef      	b.n	8000ecc <_printf_i+0xbc>
 8000eec:	680b      	ldr	r3, [r1, #0]
 8000eee:	6825      	ldr	r5, [r4, #0]
 8000ef0:	1d18      	adds	r0, r3, #4
 8000ef2:	6008      	str	r0, [r1, #0]
 8000ef4:	0628      	lsls	r0, r5, #24
 8000ef6:	d501      	bpl.n	8000efc <_printf_i+0xec>
 8000ef8:	681d      	ldr	r5, [r3, #0]
 8000efa:	e002      	b.n	8000f02 <_printf_i+0xf2>
 8000efc:	0669      	lsls	r1, r5, #25
 8000efe:	d5fb      	bpl.n	8000ef8 <_printf_i+0xe8>
 8000f00:	881d      	ldrh	r5, [r3, #0]
 8000f02:	4854      	ldr	r0, [pc, #336]	; (8001054 <_printf_i+0x244>)
 8000f04:	2f6f      	cmp	r7, #111	; 0x6f
 8000f06:	bf0c      	ite	eq
 8000f08:	2308      	moveq	r3, #8
 8000f0a:	230a      	movne	r3, #10
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000f12:	6866      	ldr	r6, [r4, #4]
 8000f14:	60a6      	str	r6, [r4, #8]
 8000f16:	2e00      	cmp	r6, #0
 8000f18:	bfa2      	ittt	ge
 8000f1a:	6821      	ldrge	r1, [r4, #0]
 8000f1c:	f021 0104 	bicge.w	r1, r1, #4
 8000f20:	6021      	strge	r1, [r4, #0]
 8000f22:	b90d      	cbnz	r5, 8000f28 <_printf_i+0x118>
 8000f24:	2e00      	cmp	r6, #0
 8000f26:	d04d      	beq.n	8000fc4 <_printf_i+0x1b4>
 8000f28:	4616      	mov	r6, r2
 8000f2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8000f2e:	fb03 5711 	mls	r7, r3, r1, r5
 8000f32:	5dc7      	ldrb	r7, [r0, r7]
 8000f34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000f38:	462f      	mov	r7, r5
 8000f3a:	42bb      	cmp	r3, r7
 8000f3c:	460d      	mov	r5, r1
 8000f3e:	d9f4      	bls.n	8000f2a <_printf_i+0x11a>
 8000f40:	2b08      	cmp	r3, #8
 8000f42:	d10b      	bne.n	8000f5c <_printf_i+0x14c>
 8000f44:	6823      	ldr	r3, [r4, #0]
 8000f46:	07df      	lsls	r7, r3, #31
 8000f48:	d508      	bpl.n	8000f5c <_printf_i+0x14c>
 8000f4a:	6923      	ldr	r3, [r4, #16]
 8000f4c:	6861      	ldr	r1, [r4, #4]
 8000f4e:	4299      	cmp	r1, r3
 8000f50:	bfde      	ittt	le
 8000f52:	2330      	movle	r3, #48	; 0x30
 8000f54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000f58:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000f5c:	1b92      	subs	r2, r2, r6
 8000f5e:	6122      	str	r2, [r4, #16]
 8000f60:	f8cd a000 	str.w	sl, [sp]
 8000f64:	464b      	mov	r3, r9
 8000f66:	aa03      	add	r2, sp, #12
 8000f68:	4621      	mov	r1, r4
 8000f6a:	4640      	mov	r0, r8
 8000f6c:	f7ff fee2 	bl	8000d34 <_printf_common>
 8000f70:	3001      	adds	r0, #1
 8000f72:	d14c      	bne.n	800100e <_printf_i+0x1fe>
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295
 8000f78:	b004      	add	sp, #16
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	4835      	ldr	r0, [pc, #212]	; (8001054 <_printf_i+0x244>)
 8000f80:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000f84:	6823      	ldr	r3, [r4, #0]
 8000f86:	680e      	ldr	r6, [r1, #0]
 8000f88:	061f      	lsls	r7, r3, #24
 8000f8a:	f856 5b04 	ldr.w	r5, [r6], #4
 8000f8e:	600e      	str	r6, [r1, #0]
 8000f90:	d514      	bpl.n	8000fbc <_printf_i+0x1ac>
 8000f92:	07d9      	lsls	r1, r3, #31
 8000f94:	bf44      	itt	mi
 8000f96:	f043 0320 	orrmi.w	r3, r3, #32
 8000f9a:	6023      	strmi	r3, [r4, #0]
 8000f9c:	b91d      	cbnz	r5, 8000fa6 <_printf_i+0x196>
 8000f9e:	6823      	ldr	r3, [r4, #0]
 8000fa0:	f023 0320 	bic.w	r3, r3, #32
 8000fa4:	6023      	str	r3, [r4, #0]
 8000fa6:	2310      	movs	r3, #16
 8000fa8:	e7b0      	b.n	8000f0c <_printf_i+0xfc>
 8000faa:	6823      	ldr	r3, [r4, #0]
 8000fac:	f043 0320 	orr.w	r3, r3, #32
 8000fb0:	6023      	str	r3, [r4, #0]
 8000fb2:	2378      	movs	r3, #120	; 0x78
 8000fb4:	4828      	ldr	r0, [pc, #160]	; (8001058 <_printf_i+0x248>)
 8000fb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000fba:	e7e3      	b.n	8000f84 <_printf_i+0x174>
 8000fbc:	065e      	lsls	r6, r3, #25
 8000fbe:	bf48      	it	mi
 8000fc0:	b2ad      	uxthmi	r5, r5
 8000fc2:	e7e6      	b.n	8000f92 <_printf_i+0x182>
 8000fc4:	4616      	mov	r6, r2
 8000fc6:	e7bb      	b.n	8000f40 <_printf_i+0x130>
 8000fc8:	680b      	ldr	r3, [r1, #0]
 8000fca:	6826      	ldr	r6, [r4, #0]
 8000fcc:	6960      	ldr	r0, [r4, #20]
 8000fce:	1d1d      	adds	r5, r3, #4
 8000fd0:	600d      	str	r5, [r1, #0]
 8000fd2:	0635      	lsls	r5, r6, #24
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	d501      	bpl.n	8000fdc <_printf_i+0x1cc>
 8000fd8:	6018      	str	r0, [r3, #0]
 8000fda:	e002      	b.n	8000fe2 <_printf_i+0x1d2>
 8000fdc:	0671      	lsls	r1, r6, #25
 8000fde:	d5fb      	bpl.n	8000fd8 <_printf_i+0x1c8>
 8000fe0:	8018      	strh	r0, [r3, #0]
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	6123      	str	r3, [r4, #16]
 8000fe6:	4616      	mov	r6, r2
 8000fe8:	e7ba      	b.n	8000f60 <_printf_i+0x150>
 8000fea:	680b      	ldr	r3, [r1, #0]
 8000fec:	1d1a      	adds	r2, r3, #4
 8000fee:	600a      	str	r2, [r1, #0]
 8000ff0:	681e      	ldr	r6, [r3, #0]
 8000ff2:	6862      	ldr	r2, [r4, #4]
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4630      	mov	r0, r6
 8000ff8:	f7ff f8f2 	bl	80001e0 <memchr>
 8000ffc:	b108      	cbz	r0, 8001002 <_printf_i+0x1f2>
 8000ffe:	1b80      	subs	r0, r0, r6
 8001000:	6060      	str	r0, [r4, #4]
 8001002:	6863      	ldr	r3, [r4, #4]
 8001004:	6123      	str	r3, [r4, #16]
 8001006:	2300      	movs	r3, #0
 8001008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800100c:	e7a8      	b.n	8000f60 <_printf_i+0x150>
 800100e:	6923      	ldr	r3, [r4, #16]
 8001010:	4632      	mov	r2, r6
 8001012:	4649      	mov	r1, r9
 8001014:	4640      	mov	r0, r8
 8001016:	47d0      	blx	sl
 8001018:	3001      	adds	r0, #1
 800101a:	d0ab      	beq.n	8000f74 <_printf_i+0x164>
 800101c:	6823      	ldr	r3, [r4, #0]
 800101e:	079b      	lsls	r3, r3, #30
 8001020:	d413      	bmi.n	800104a <_printf_i+0x23a>
 8001022:	68e0      	ldr	r0, [r4, #12]
 8001024:	9b03      	ldr	r3, [sp, #12]
 8001026:	4298      	cmp	r0, r3
 8001028:	bfb8      	it	lt
 800102a:	4618      	movlt	r0, r3
 800102c:	e7a4      	b.n	8000f78 <_printf_i+0x168>
 800102e:	2301      	movs	r3, #1
 8001030:	4632      	mov	r2, r6
 8001032:	4649      	mov	r1, r9
 8001034:	4640      	mov	r0, r8
 8001036:	47d0      	blx	sl
 8001038:	3001      	adds	r0, #1
 800103a:	d09b      	beq.n	8000f74 <_printf_i+0x164>
 800103c:	3501      	adds	r5, #1
 800103e:	68e3      	ldr	r3, [r4, #12]
 8001040:	9903      	ldr	r1, [sp, #12]
 8001042:	1a5b      	subs	r3, r3, r1
 8001044:	42ab      	cmp	r3, r5
 8001046:	dcf2      	bgt.n	800102e <_printf_i+0x21e>
 8001048:	e7eb      	b.n	8001022 <_printf_i+0x212>
 800104a:	2500      	movs	r5, #0
 800104c:	f104 0619 	add.w	r6, r4, #25
 8001050:	e7f5      	b.n	800103e <_printf_i+0x22e>
 8001052:	bf00      	nop
 8001054:	0800173d 	.word	0x0800173d
 8001058:	0800174e 	.word	0x0800174e

0800105c <_sbrk_r>:
 800105c:	b538      	push	{r3, r4, r5, lr}
 800105e:	4d06      	ldr	r5, [pc, #24]	; (8001078 <_sbrk_r+0x1c>)
 8001060:	2300      	movs	r3, #0
 8001062:	4604      	mov	r4, r0
 8001064:	4608      	mov	r0, r1
 8001066:	602b      	str	r3, [r5, #0]
 8001068:	f7ff fa78 	bl	800055c <_sbrk>
 800106c:	1c43      	adds	r3, r0, #1
 800106e:	d102      	bne.n	8001076 <_sbrk_r+0x1a>
 8001070:	682b      	ldr	r3, [r5, #0]
 8001072:	b103      	cbz	r3, 8001076 <_sbrk_r+0x1a>
 8001074:	6023      	str	r3, [r4, #0]
 8001076:	bd38      	pop	{r3, r4, r5, pc}
 8001078:	200000a8 	.word	0x200000a8

0800107c <__sread>:
 800107c:	b510      	push	{r4, lr}
 800107e:	460c      	mov	r4, r1
 8001080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001084:	f000 fab4 	bl	80015f0 <_read_r>
 8001088:	2800      	cmp	r0, #0
 800108a:	bfab      	itete	ge
 800108c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800108e:	89a3      	ldrhlt	r3, [r4, #12]
 8001090:	181b      	addge	r3, r3, r0
 8001092:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001096:	bfac      	ite	ge
 8001098:	6563      	strge	r3, [r4, #84]	; 0x54
 800109a:	81a3      	strhlt	r3, [r4, #12]
 800109c:	bd10      	pop	{r4, pc}

0800109e <__swrite>:
 800109e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010a2:	461f      	mov	r7, r3
 80010a4:	898b      	ldrh	r3, [r1, #12]
 80010a6:	05db      	lsls	r3, r3, #23
 80010a8:	4605      	mov	r5, r0
 80010aa:	460c      	mov	r4, r1
 80010ac:	4616      	mov	r6, r2
 80010ae:	d505      	bpl.n	80010bc <__swrite+0x1e>
 80010b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010b4:	2302      	movs	r3, #2
 80010b6:	2200      	movs	r2, #0
 80010b8:	f000 f9c8 	bl	800144c <_lseek_r>
 80010bc:	89a3      	ldrh	r3, [r4, #12]
 80010be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010c6:	81a3      	strh	r3, [r4, #12]
 80010c8:	4632      	mov	r2, r6
 80010ca:	463b      	mov	r3, r7
 80010cc:	4628      	mov	r0, r5
 80010ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010d2:	f000 b869 	b.w	80011a8 <_write_r>

080010d6 <__sseek>:
 80010d6:	b510      	push	{r4, lr}
 80010d8:	460c      	mov	r4, r1
 80010da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010de:	f000 f9b5 	bl	800144c <_lseek_r>
 80010e2:	1c43      	adds	r3, r0, #1
 80010e4:	89a3      	ldrh	r3, [r4, #12]
 80010e6:	bf15      	itete	ne
 80010e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80010ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80010ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80010f2:	81a3      	strheq	r3, [r4, #12]
 80010f4:	bf18      	it	ne
 80010f6:	81a3      	strhne	r3, [r4, #12]
 80010f8:	bd10      	pop	{r4, pc}

080010fa <__sclose>:
 80010fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010fe:	f000 b8d3 	b.w	80012a8 <_close_r>
	...

08001104 <__swbuf_r>:
 8001104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001106:	460e      	mov	r6, r1
 8001108:	4614      	mov	r4, r2
 800110a:	4605      	mov	r5, r0
 800110c:	b118      	cbz	r0, 8001116 <__swbuf_r+0x12>
 800110e:	6983      	ldr	r3, [r0, #24]
 8001110:	b90b      	cbnz	r3, 8001116 <__swbuf_r+0x12>
 8001112:	f7ff fbbb 	bl	800088c <__sinit>
 8001116:	4b21      	ldr	r3, [pc, #132]	; (800119c <__swbuf_r+0x98>)
 8001118:	429c      	cmp	r4, r3
 800111a:	d12b      	bne.n	8001174 <__swbuf_r+0x70>
 800111c:	686c      	ldr	r4, [r5, #4]
 800111e:	69a3      	ldr	r3, [r4, #24]
 8001120:	60a3      	str	r3, [r4, #8]
 8001122:	89a3      	ldrh	r3, [r4, #12]
 8001124:	071a      	lsls	r2, r3, #28
 8001126:	d52f      	bpl.n	8001188 <__swbuf_r+0x84>
 8001128:	6923      	ldr	r3, [r4, #16]
 800112a:	b36b      	cbz	r3, 8001188 <__swbuf_r+0x84>
 800112c:	6923      	ldr	r3, [r4, #16]
 800112e:	6820      	ldr	r0, [r4, #0]
 8001130:	1ac0      	subs	r0, r0, r3
 8001132:	6963      	ldr	r3, [r4, #20]
 8001134:	b2f6      	uxtb	r6, r6
 8001136:	4283      	cmp	r3, r0
 8001138:	4637      	mov	r7, r6
 800113a:	dc04      	bgt.n	8001146 <__swbuf_r+0x42>
 800113c:	4621      	mov	r1, r4
 800113e:	4628      	mov	r0, r5
 8001140:	f000 f948 	bl	80013d4 <_fflush_r>
 8001144:	bb30      	cbnz	r0, 8001194 <__swbuf_r+0x90>
 8001146:	68a3      	ldr	r3, [r4, #8]
 8001148:	3b01      	subs	r3, #1
 800114a:	60a3      	str	r3, [r4, #8]
 800114c:	6823      	ldr	r3, [r4, #0]
 800114e:	1c5a      	adds	r2, r3, #1
 8001150:	6022      	str	r2, [r4, #0]
 8001152:	701e      	strb	r6, [r3, #0]
 8001154:	6963      	ldr	r3, [r4, #20]
 8001156:	3001      	adds	r0, #1
 8001158:	4283      	cmp	r3, r0
 800115a:	d004      	beq.n	8001166 <__swbuf_r+0x62>
 800115c:	89a3      	ldrh	r3, [r4, #12]
 800115e:	07db      	lsls	r3, r3, #31
 8001160:	d506      	bpl.n	8001170 <__swbuf_r+0x6c>
 8001162:	2e0a      	cmp	r6, #10
 8001164:	d104      	bne.n	8001170 <__swbuf_r+0x6c>
 8001166:	4621      	mov	r1, r4
 8001168:	4628      	mov	r0, r5
 800116a:	f000 f933 	bl	80013d4 <_fflush_r>
 800116e:	b988      	cbnz	r0, 8001194 <__swbuf_r+0x90>
 8001170:	4638      	mov	r0, r7
 8001172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001174:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <__swbuf_r+0x9c>)
 8001176:	429c      	cmp	r4, r3
 8001178:	d101      	bne.n	800117e <__swbuf_r+0x7a>
 800117a:	68ac      	ldr	r4, [r5, #8]
 800117c:	e7cf      	b.n	800111e <__swbuf_r+0x1a>
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <__swbuf_r+0xa0>)
 8001180:	429c      	cmp	r4, r3
 8001182:	bf08      	it	eq
 8001184:	68ec      	ldreq	r4, [r5, #12]
 8001186:	e7ca      	b.n	800111e <__swbuf_r+0x1a>
 8001188:	4621      	mov	r1, r4
 800118a:	4628      	mov	r0, r5
 800118c:	f000 f81e 	bl	80011cc <__swsetup_r>
 8001190:	2800      	cmp	r0, #0
 8001192:	d0cb      	beq.n	800112c <__swbuf_r+0x28>
 8001194:	f04f 37ff 	mov.w	r7, #4294967295
 8001198:	e7ea      	b.n	8001170 <__swbuf_r+0x6c>
 800119a:	bf00      	nop
 800119c:	080016ec 	.word	0x080016ec
 80011a0:	0800170c 	.word	0x0800170c
 80011a4:	080016cc 	.word	0x080016cc

080011a8 <_write_r>:
 80011a8:	b538      	push	{r3, r4, r5, lr}
 80011aa:	4d07      	ldr	r5, [pc, #28]	; (80011c8 <_write_r+0x20>)
 80011ac:	4604      	mov	r4, r0
 80011ae:	4608      	mov	r0, r1
 80011b0:	4611      	mov	r1, r2
 80011b2:	2200      	movs	r2, #0
 80011b4:	602a      	str	r2, [r5, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	f7ff f97f 	bl	80004ba <_write>
 80011bc:	1c43      	adds	r3, r0, #1
 80011be:	d102      	bne.n	80011c6 <_write_r+0x1e>
 80011c0:	682b      	ldr	r3, [r5, #0]
 80011c2:	b103      	cbz	r3, 80011c6 <_write_r+0x1e>
 80011c4:	6023      	str	r3, [r4, #0]
 80011c6:	bd38      	pop	{r3, r4, r5, pc}
 80011c8:	200000a8 	.word	0x200000a8

080011cc <__swsetup_r>:
 80011cc:	4b32      	ldr	r3, [pc, #200]	; (8001298 <__swsetup_r+0xcc>)
 80011ce:	b570      	push	{r4, r5, r6, lr}
 80011d0:	681d      	ldr	r5, [r3, #0]
 80011d2:	4606      	mov	r6, r0
 80011d4:	460c      	mov	r4, r1
 80011d6:	b125      	cbz	r5, 80011e2 <__swsetup_r+0x16>
 80011d8:	69ab      	ldr	r3, [r5, #24]
 80011da:	b913      	cbnz	r3, 80011e2 <__swsetup_r+0x16>
 80011dc:	4628      	mov	r0, r5
 80011de:	f7ff fb55 	bl	800088c <__sinit>
 80011e2:	4b2e      	ldr	r3, [pc, #184]	; (800129c <__swsetup_r+0xd0>)
 80011e4:	429c      	cmp	r4, r3
 80011e6:	d10f      	bne.n	8001208 <__swsetup_r+0x3c>
 80011e8:	686c      	ldr	r4, [r5, #4]
 80011ea:	89a3      	ldrh	r3, [r4, #12]
 80011ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80011f0:	0719      	lsls	r1, r3, #28
 80011f2:	d42c      	bmi.n	800124e <__swsetup_r+0x82>
 80011f4:	06dd      	lsls	r5, r3, #27
 80011f6:	d411      	bmi.n	800121c <__swsetup_r+0x50>
 80011f8:	2309      	movs	r3, #9
 80011fa:	6033      	str	r3, [r6, #0]
 80011fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001200:	81a3      	strh	r3, [r4, #12]
 8001202:	f04f 30ff 	mov.w	r0, #4294967295
 8001206:	e03e      	b.n	8001286 <__swsetup_r+0xba>
 8001208:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <__swsetup_r+0xd4>)
 800120a:	429c      	cmp	r4, r3
 800120c:	d101      	bne.n	8001212 <__swsetup_r+0x46>
 800120e:	68ac      	ldr	r4, [r5, #8]
 8001210:	e7eb      	b.n	80011ea <__swsetup_r+0x1e>
 8001212:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <__swsetup_r+0xd8>)
 8001214:	429c      	cmp	r4, r3
 8001216:	bf08      	it	eq
 8001218:	68ec      	ldreq	r4, [r5, #12]
 800121a:	e7e6      	b.n	80011ea <__swsetup_r+0x1e>
 800121c:	0758      	lsls	r0, r3, #29
 800121e:	d512      	bpl.n	8001246 <__swsetup_r+0x7a>
 8001220:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001222:	b141      	cbz	r1, 8001236 <__swsetup_r+0x6a>
 8001224:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001228:	4299      	cmp	r1, r3
 800122a:	d002      	beq.n	8001232 <__swsetup_r+0x66>
 800122c:	4630      	mov	r0, r6
 800122e:	f000 f98f 	bl	8001550 <_free_r>
 8001232:	2300      	movs	r3, #0
 8001234:	6363      	str	r3, [r4, #52]	; 0x34
 8001236:	89a3      	ldrh	r3, [r4, #12]
 8001238:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800123c:	81a3      	strh	r3, [r4, #12]
 800123e:	2300      	movs	r3, #0
 8001240:	6063      	str	r3, [r4, #4]
 8001242:	6923      	ldr	r3, [r4, #16]
 8001244:	6023      	str	r3, [r4, #0]
 8001246:	89a3      	ldrh	r3, [r4, #12]
 8001248:	f043 0308 	orr.w	r3, r3, #8
 800124c:	81a3      	strh	r3, [r4, #12]
 800124e:	6923      	ldr	r3, [r4, #16]
 8001250:	b94b      	cbnz	r3, 8001266 <__swsetup_r+0x9a>
 8001252:	89a3      	ldrh	r3, [r4, #12]
 8001254:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800125c:	d003      	beq.n	8001266 <__swsetup_r+0x9a>
 800125e:	4621      	mov	r1, r4
 8001260:	4630      	mov	r0, r6
 8001262:	f000 f929 	bl	80014b8 <__smakebuf_r>
 8001266:	89a0      	ldrh	r0, [r4, #12]
 8001268:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800126c:	f010 0301 	ands.w	r3, r0, #1
 8001270:	d00a      	beq.n	8001288 <__swsetup_r+0xbc>
 8001272:	2300      	movs	r3, #0
 8001274:	60a3      	str	r3, [r4, #8]
 8001276:	6963      	ldr	r3, [r4, #20]
 8001278:	425b      	negs	r3, r3
 800127a:	61a3      	str	r3, [r4, #24]
 800127c:	6923      	ldr	r3, [r4, #16]
 800127e:	b943      	cbnz	r3, 8001292 <__swsetup_r+0xc6>
 8001280:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001284:	d1ba      	bne.n	80011fc <__swsetup_r+0x30>
 8001286:	bd70      	pop	{r4, r5, r6, pc}
 8001288:	0781      	lsls	r1, r0, #30
 800128a:	bf58      	it	pl
 800128c:	6963      	ldrpl	r3, [r4, #20]
 800128e:	60a3      	str	r3, [r4, #8]
 8001290:	e7f4      	b.n	800127c <__swsetup_r+0xb0>
 8001292:	2000      	movs	r0, #0
 8001294:	e7f7      	b.n	8001286 <__swsetup_r+0xba>
 8001296:	bf00      	nop
 8001298:	20000000 	.word	0x20000000
 800129c:	080016ec 	.word	0x080016ec
 80012a0:	0800170c 	.word	0x0800170c
 80012a4:	080016cc 	.word	0x080016cc

080012a8 <_close_r>:
 80012a8:	b538      	push	{r3, r4, r5, lr}
 80012aa:	4d06      	ldr	r5, [pc, #24]	; (80012c4 <_close_r+0x1c>)
 80012ac:	2300      	movs	r3, #0
 80012ae:	4604      	mov	r4, r0
 80012b0:	4608      	mov	r0, r1
 80012b2:	602b      	str	r3, [r5, #0]
 80012b4:	f7ff f91d 	bl	80004f2 <_close>
 80012b8:	1c43      	adds	r3, r0, #1
 80012ba:	d102      	bne.n	80012c2 <_close_r+0x1a>
 80012bc:	682b      	ldr	r3, [r5, #0]
 80012be:	b103      	cbz	r3, 80012c2 <_close_r+0x1a>
 80012c0:	6023      	str	r3, [r4, #0]
 80012c2:	bd38      	pop	{r3, r4, r5, pc}
 80012c4:	200000a8 	.word	0x200000a8

080012c8 <__sflush_r>:
 80012c8:	898a      	ldrh	r2, [r1, #12]
 80012ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012ce:	4605      	mov	r5, r0
 80012d0:	0710      	lsls	r0, r2, #28
 80012d2:	460c      	mov	r4, r1
 80012d4:	d458      	bmi.n	8001388 <__sflush_r+0xc0>
 80012d6:	684b      	ldr	r3, [r1, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	dc05      	bgt.n	80012e8 <__sflush_r+0x20>
 80012dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80012de:	2b00      	cmp	r3, #0
 80012e0:	dc02      	bgt.n	80012e8 <__sflush_r+0x20>
 80012e2:	2000      	movs	r0, #0
 80012e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012ea:	2e00      	cmp	r6, #0
 80012ec:	d0f9      	beq.n	80012e2 <__sflush_r+0x1a>
 80012ee:	2300      	movs	r3, #0
 80012f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80012f4:	682f      	ldr	r7, [r5, #0]
 80012f6:	602b      	str	r3, [r5, #0]
 80012f8:	d032      	beq.n	8001360 <__sflush_r+0x98>
 80012fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80012fc:	89a3      	ldrh	r3, [r4, #12]
 80012fe:	075a      	lsls	r2, r3, #29
 8001300:	d505      	bpl.n	800130e <__sflush_r+0x46>
 8001302:	6863      	ldr	r3, [r4, #4]
 8001304:	1ac0      	subs	r0, r0, r3
 8001306:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001308:	b10b      	cbz	r3, 800130e <__sflush_r+0x46>
 800130a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800130c:	1ac0      	subs	r0, r0, r3
 800130e:	2300      	movs	r3, #0
 8001310:	4602      	mov	r2, r0
 8001312:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001314:	6a21      	ldr	r1, [r4, #32]
 8001316:	4628      	mov	r0, r5
 8001318:	47b0      	blx	r6
 800131a:	1c43      	adds	r3, r0, #1
 800131c:	89a3      	ldrh	r3, [r4, #12]
 800131e:	d106      	bne.n	800132e <__sflush_r+0x66>
 8001320:	6829      	ldr	r1, [r5, #0]
 8001322:	291d      	cmp	r1, #29
 8001324:	d82c      	bhi.n	8001380 <__sflush_r+0xb8>
 8001326:	4a2a      	ldr	r2, [pc, #168]	; (80013d0 <__sflush_r+0x108>)
 8001328:	40ca      	lsrs	r2, r1
 800132a:	07d6      	lsls	r6, r2, #31
 800132c:	d528      	bpl.n	8001380 <__sflush_r+0xb8>
 800132e:	2200      	movs	r2, #0
 8001330:	6062      	str	r2, [r4, #4]
 8001332:	04d9      	lsls	r1, r3, #19
 8001334:	6922      	ldr	r2, [r4, #16]
 8001336:	6022      	str	r2, [r4, #0]
 8001338:	d504      	bpl.n	8001344 <__sflush_r+0x7c>
 800133a:	1c42      	adds	r2, r0, #1
 800133c:	d101      	bne.n	8001342 <__sflush_r+0x7a>
 800133e:	682b      	ldr	r3, [r5, #0]
 8001340:	b903      	cbnz	r3, 8001344 <__sflush_r+0x7c>
 8001342:	6560      	str	r0, [r4, #84]	; 0x54
 8001344:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001346:	602f      	str	r7, [r5, #0]
 8001348:	2900      	cmp	r1, #0
 800134a:	d0ca      	beq.n	80012e2 <__sflush_r+0x1a>
 800134c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001350:	4299      	cmp	r1, r3
 8001352:	d002      	beq.n	800135a <__sflush_r+0x92>
 8001354:	4628      	mov	r0, r5
 8001356:	f000 f8fb 	bl	8001550 <_free_r>
 800135a:	2000      	movs	r0, #0
 800135c:	6360      	str	r0, [r4, #52]	; 0x34
 800135e:	e7c1      	b.n	80012e4 <__sflush_r+0x1c>
 8001360:	6a21      	ldr	r1, [r4, #32]
 8001362:	2301      	movs	r3, #1
 8001364:	4628      	mov	r0, r5
 8001366:	47b0      	blx	r6
 8001368:	1c41      	adds	r1, r0, #1
 800136a:	d1c7      	bne.n	80012fc <__sflush_r+0x34>
 800136c:	682b      	ldr	r3, [r5, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0c4      	beq.n	80012fc <__sflush_r+0x34>
 8001372:	2b1d      	cmp	r3, #29
 8001374:	d001      	beq.n	800137a <__sflush_r+0xb2>
 8001376:	2b16      	cmp	r3, #22
 8001378:	d101      	bne.n	800137e <__sflush_r+0xb6>
 800137a:	602f      	str	r7, [r5, #0]
 800137c:	e7b1      	b.n	80012e2 <__sflush_r+0x1a>
 800137e:	89a3      	ldrh	r3, [r4, #12]
 8001380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001384:	81a3      	strh	r3, [r4, #12]
 8001386:	e7ad      	b.n	80012e4 <__sflush_r+0x1c>
 8001388:	690f      	ldr	r7, [r1, #16]
 800138a:	2f00      	cmp	r7, #0
 800138c:	d0a9      	beq.n	80012e2 <__sflush_r+0x1a>
 800138e:	0793      	lsls	r3, r2, #30
 8001390:	680e      	ldr	r6, [r1, #0]
 8001392:	bf08      	it	eq
 8001394:	694b      	ldreq	r3, [r1, #20]
 8001396:	600f      	str	r7, [r1, #0]
 8001398:	bf18      	it	ne
 800139a:	2300      	movne	r3, #0
 800139c:	eba6 0807 	sub.w	r8, r6, r7
 80013a0:	608b      	str	r3, [r1, #8]
 80013a2:	f1b8 0f00 	cmp.w	r8, #0
 80013a6:	dd9c      	ble.n	80012e2 <__sflush_r+0x1a>
 80013a8:	6a21      	ldr	r1, [r4, #32]
 80013aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80013ac:	4643      	mov	r3, r8
 80013ae:	463a      	mov	r2, r7
 80013b0:	4628      	mov	r0, r5
 80013b2:	47b0      	blx	r6
 80013b4:	2800      	cmp	r0, #0
 80013b6:	dc06      	bgt.n	80013c6 <__sflush_r+0xfe>
 80013b8:	89a3      	ldrh	r3, [r4, #12]
 80013ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013be:	81a3      	strh	r3, [r4, #12]
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295
 80013c4:	e78e      	b.n	80012e4 <__sflush_r+0x1c>
 80013c6:	4407      	add	r7, r0
 80013c8:	eba8 0800 	sub.w	r8, r8, r0
 80013cc:	e7e9      	b.n	80013a2 <__sflush_r+0xda>
 80013ce:	bf00      	nop
 80013d0:	20400001 	.word	0x20400001

080013d4 <_fflush_r>:
 80013d4:	b538      	push	{r3, r4, r5, lr}
 80013d6:	690b      	ldr	r3, [r1, #16]
 80013d8:	4605      	mov	r5, r0
 80013da:	460c      	mov	r4, r1
 80013dc:	b913      	cbnz	r3, 80013e4 <_fflush_r+0x10>
 80013de:	2500      	movs	r5, #0
 80013e0:	4628      	mov	r0, r5
 80013e2:	bd38      	pop	{r3, r4, r5, pc}
 80013e4:	b118      	cbz	r0, 80013ee <_fflush_r+0x1a>
 80013e6:	6983      	ldr	r3, [r0, #24]
 80013e8:	b90b      	cbnz	r3, 80013ee <_fflush_r+0x1a>
 80013ea:	f7ff fa4f 	bl	800088c <__sinit>
 80013ee:	4b14      	ldr	r3, [pc, #80]	; (8001440 <_fflush_r+0x6c>)
 80013f0:	429c      	cmp	r4, r3
 80013f2:	d11b      	bne.n	800142c <_fflush_r+0x58>
 80013f4:	686c      	ldr	r4, [r5, #4]
 80013f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0ef      	beq.n	80013de <_fflush_r+0xa>
 80013fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001400:	07d0      	lsls	r0, r2, #31
 8001402:	d404      	bmi.n	800140e <_fflush_r+0x3a>
 8001404:	0599      	lsls	r1, r3, #22
 8001406:	d402      	bmi.n	800140e <_fflush_r+0x3a>
 8001408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800140a:	f7ff fadd 	bl	80009c8 <__retarget_lock_acquire_recursive>
 800140e:	4628      	mov	r0, r5
 8001410:	4621      	mov	r1, r4
 8001412:	f7ff ff59 	bl	80012c8 <__sflush_r>
 8001416:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001418:	07da      	lsls	r2, r3, #31
 800141a:	4605      	mov	r5, r0
 800141c:	d4e0      	bmi.n	80013e0 <_fflush_r+0xc>
 800141e:	89a3      	ldrh	r3, [r4, #12]
 8001420:	059b      	lsls	r3, r3, #22
 8001422:	d4dd      	bmi.n	80013e0 <_fflush_r+0xc>
 8001424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001426:	f7ff fad0 	bl	80009ca <__retarget_lock_release_recursive>
 800142a:	e7d9      	b.n	80013e0 <_fflush_r+0xc>
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <_fflush_r+0x70>)
 800142e:	429c      	cmp	r4, r3
 8001430:	d101      	bne.n	8001436 <_fflush_r+0x62>
 8001432:	68ac      	ldr	r4, [r5, #8]
 8001434:	e7df      	b.n	80013f6 <_fflush_r+0x22>
 8001436:	4b04      	ldr	r3, [pc, #16]	; (8001448 <_fflush_r+0x74>)
 8001438:	429c      	cmp	r4, r3
 800143a:	bf08      	it	eq
 800143c:	68ec      	ldreq	r4, [r5, #12]
 800143e:	e7da      	b.n	80013f6 <_fflush_r+0x22>
 8001440:	080016ec 	.word	0x080016ec
 8001444:	0800170c 	.word	0x0800170c
 8001448:	080016cc 	.word	0x080016cc

0800144c <_lseek_r>:
 800144c:	b538      	push	{r3, r4, r5, lr}
 800144e:	4d07      	ldr	r5, [pc, #28]	; (800146c <_lseek_r+0x20>)
 8001450:	4604      	mov	r4, r0
 8001452:	4608      	mov	r0, r1
 8001454:	4611      	mov	r1, r2
 8001456:	2200      	movs	r2, #0
 8001458:	602a      	str	r2, [r5, #0]
 800145a:	461a      	mov	r2, r3
 800145c:	f7ff f870 	bl	8000540 <_lseek>
 8001460:	1c43      	adds	r3, r0, #1
 8001462:	d102      	bne.n	800146a <_lseek_r+0x1e>
 8001464:	682b      	ldr	r3, [r5, #0]
 8001466:	b103      	cbz	r3, 800146a <_lseek_r+0x1e>
 8001468:	6023      	str	r3, [r4, #0]
 800146a:	bd38      	pop	{r3, r4, r5, pc}
 800146c:	200000a8 	.word	0x200000a8

08001470 <__swhatbuf_r>:
 8001470:	b570      	push	{r4, r5, r6, lr}
 8001472:	460e      	mov	r6, r1
 8001474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001478:	2900      	cmp	r1, #0
 800147a:	b096      	sub	sp, #88	; 0x58
 800147c:	4614      	mov	r4, r2
 800147e:	461d      	mov	r5, r3
 8001480:	da07      	bge.n	8001492 <__swhatbuf_r+0x22>
 8001482:	2300      	movs	r3, #0
 8001484:	602b      	str	r3, [r5, #0]
 8001486:	89b3      	ldrh	r3, [r6, #12]
 8001488:	061a      	lsls	r2, r3, #24
 800148a:	d410      	bmi.n	80014ae <__swhatbuf_r+0x3e>
 800148c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001490:	e00e      	b.n	80014b0 <__swhatbuf_r+0x40>
 8001492:	466a      	mov	r2, sp
 8001494:	f000 f8be 	bl	8001614 <_fstat_r>
 8001498:	2800      	cmp	r0, #0
 800149a:	dbf2      	blt.n	8001482 <__swhatbuf_r+0x12>
 800149c:	9a01      	ldr	r2, [sp, #4]
 800149e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80014a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80014a6:	425a      	negs	r2, r3
 80014a8:	415a      	adcs	r2, r3
 80014aa:	602a      	str	r2, [r5, #0]
 80014ac:	e7ee      	b.n	800148c <__swhatbuf_r+0x1c>
 80014ae:	2340      	movs	r3, #64	; 0x40
 80014b0:	2000      	movs	r0, #0
 80014b2:	6023      	str	r3, [r4, #0]
 80014b4:	b016      	add	sp, #88	; 0x58
 80014b6:	bd70      	pop	{r4, r5, r6, pc}

080014b8 <__smakebuf_r>:
 80014b8:	898b      	ldrh	r3, [r1, #12]
 80014ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80014bc:	079d      	lsls	r5, r3, #30
 80014be:	4606      	mov	r6, r0
 80014c0:	460c      	mov	r4, r1
 80014c2:	d507      	bpl.n	80014d4 <__smakebuf_r+0x1c>
 80014c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80014c8:	6023      	str	r3, [r4, #0]
 80014ca:	6123      	str	r3, [r4, #16]
 80014cc:	2301      	movs	r3, #1
 80014ce:	6163      	str	r3, [r4, #20]
 80014d0:	b002      	add	sp, #8
 80014d2:	bd70      	pop	{r4, r5, r6, pc}
 80014d4:	ab01      	add	r3, sp, #4
 80014d6:	466a      	mov	r2, sp
 80014d8:	f7ff ffca 	bl	8001470 <__swhatbuf_r>
 80014dc:	9900      	ldr	r1, [sp, #0]
 80014de:	4605      	mov	r5, r0
 80014e0:	4630      	mov	r0, r6
 80014e2:	f7ff fa73 	bl	80009cc <_malloc_r>
 80014e6:	b948      	cbnz	r0, 80014fc <__smakebuf_r+0x44>
 80014e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014ec:	059a      	lsls	r2, r3, #22
 80014ee:	d4ef      	bmi.n	80014d0 <__smakebuf_r+0x18>
 80014f0:	f023 0303 	bic.w	r3, r3, #3
 80014f4:	f043 0302 	orr.w	r3, r3, #2
 80014f8:	81a3      	strh	r3, [r4, #12]
 80014fa:	e7e3      	b.n	80014c4 <__smakebuf_r+0xc>
 80014fc:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <__smakebuf_r+0x7c>)
 80014fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8001500:	89a3      	ldrh	r3, [r4, #12]
 8001502:	6020      	str	r0, [r4, #0]
 8001504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001508:	81a3      	strh	r3, [r4, #12]
 800150a:	9b00      	ldr	r3, [sp, #0]
 800150c:	6163      	str	r3, [r4, #20]
 800150e:	9b01      	ldr	r3, [sp, #4]
 8001510:	6120      	str	r0, [r4, #16]
 8001512:	b15b      	cbz	r3, 800152c <__smakebuf_r+0x74>
 8001514:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001518:	4630      	mov	r0, r6
 800151a:	f000 f88d 	bl	8001638 <_isatty_r>
 800151e:	b128      	cbz	r0, 800152c <__smakebuf_r+0x74>
 8001520:	89a3      	ldrh	r3, [r4, #12]
 8001522:	f023 0303 	bic.w	r3, r3, #3
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	81a3      	strh	r3, [r4, #12]
 800152c:	89a0      	ldrh	r0, [r4, #12]
 800152e:	4305      	orrs	r5, r0
 8001530:	81a5      	strh	r5, [r4, #12]
 8001532:	e7cd      	b.n	80014d0 <__smakebuf_r+0x18>
 8001534:	08000825 	.word	0x08000825

08001538 <__malloc_lock>:
 8001538:	4801      	ldr	r0, [pc, #4]	; (8001540 <__malloc_lock+0x8>)
 800153a:	f7ff ba45 	b.w	80009c8 <__retarget_lock_acquire_recursive>
 800153e:	bf00      	nop
 8001540:	200000a0 	.word	0x200000a0

08001544 <__malloc_unlock>:
 8001544:	4801      	ldr	r0, [pc, #4]	; (800154c <__malloc_unlock+0x8>)
 8001546:	f7ff ba40 	b.w	80009ca <__retarget_lock_release_recursive>
 800154a:	bf00      	nop
 800154c:	200000a0 	.word	0x200000a0

08001550 <_free_r>:
 8001550:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001552:	2900      	cmp	r1, #0
 8001554:	d048      	beq.n	80015e8 <_free_r+0x98>
 8001556:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800155a:	9001      	str	r0, [sp, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	f1a1 0404 	sub.w	r4, r1, #4
 8001562:	bfb8      	it	lt
 8001564:	18e4      	addlt	r4, r4, r3
 8001566:	f7ff ffe7 	bl	8001538 <__malloc_lock>
 800156a:	4a20      	ldr	r2, [pc, #128]	; (80015ec <_free_r+0x9c>)
 800156c:	9801      	ldr	r0, [sp, #4]
 800156e:	6813      	ldr	r3, [r2, #0]
 8001570:	4615      	mov	r5, r2
 8001572:	b933      	cbnz	r3, 8001582 <_free_r+0x32>
 8001574:	6063      	str	r3, [r4, #4]
 8001576:	6014      	str	r4, [r2, #0]
 8001578:	b003      	add	sp, #12
 800157a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800157e:	f7ff bfe1 	b.w	8001544 <__malloc_unlock>
 8001582:	42a3      	cmp	r3, r4
 8001584:	d90b      	bls.n	800159e <_free_r+0x4e>
 8001586:	6821      	ldr	r1, [r4, #0]
 8001588:	1862      	adds	r2, r4, r1
 800158a:	4293      	cmp	r3, r2
 800158c:	bf04      	itt	eq
 800158e:	681a      	ldreq	r2, [r3, #0]
 8001590:	685b      	ldreq	r3, [r3, #4]
 8001592:	6063      	str	r3, [r4, #4]
 8001594:	bf04      	itt	eq
 8001596:	1852      	addeq	r2, r2, r1
 8001598:	6022      	streq	r2, [r4, #0]
 800159a:	602c      	str	r4, [r5, #0]
 800159c:	e7ec      	b.n	8001578 <_free_r+0x28>
 800159e:	461a      	mov	r2, r3
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	b10b      	cbz	r3, 80015a8 <_free_r+0x58>
 80015a4:	42a3      	cmp	r3, r4
 80015a6:	d9fa      	bls.n	800159e <_free_r+0x4e>
 80015a8:	6811      	ldr	r1, [r2, #0]
 80015aa:	1855      	adds	r5, r2, r1
 80015ac:	42a5      	cmp	r5, r4
 80015ae:	d10b      	bne.n	80015c8 <_free_r+0x78>
 80015b0:	6824      	ldr	r4, [r4, #0]
 80015b2:	4421      	add	r1, r4
 80015b4:	1854      	adds	r4, r2, r1
 80015b6:	42a3      	cmp	r3, r4
 80015b8:	6011      	str	r1, [r2, #0]
 80015ba:	d1dd      	bne.n	8001578 <_free_r+0x28>
 80015bc:	681c      	ldr	r4, [r3, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	6053      	str	r3, [r2, #4]
 80015c2:	4421      	add	r1, r4
 80015c4:	6011      	str	r1, [r2, #0]
 80015c6:	e7d7      	b.n	8001578 <_free_r+0x28>
 80015c8:	d902      	bls.n	80015d0 <_free_r+0x80>
 80015ca:	230c      	movs	r3, #12
 80015cc:	6003      	str	r3, [r0, #0]
 80015ce:	e7d3      	b.n	8001578 <_free_r+0x28>
 80015d0:	6825      	ldr	r5, [r4, #0]
 80015d2:	1961      	adds	r1, r4, r5
 80015d4:	428b      	cmp	r3, r1
 80015d6:	bf04      	itt	eq
 80015d8:	6819      	ldreq	r1, [r3, #0]
 80015da:	685b      	ldreq	r3, [r3, #4]
 80015dc:	6063      	str	r3, [r4, #4]
 80015de:	bf04      	itt	eq
 80015e0:	1949      	addeq	r1, r1, r5
 80015e2:	6021      	streq	r1, [r4, #0]
 80015e4:	6054      	str	r4, [r2, #4]
 80015e6:	e7c7      	b.n	8001578 <_free_r+0x28>
 80015e8:	b003      	add	sp, #12
 80015ea:	bd30      	pop	{r4, r5, pc}
 80015ec:	20000084 	.word	0x20000084

080015f0 <_read_r>:
 80015f0:	b538      	push	{r3, r4, r5, lr}
 80015f2:	4d07      	ldr	r5, [pc, #28]	; (8001610 <_read_r+0x20>)
 80015f4:	4604      	mov	r4, r0
 80015f6:	4608      	mov	r0, r1
 80015f8:	4611      	mov	r1, r2
 80015fa:	2200      	movs	r2, #0
 80015fc:	602a      	str	r2, [r5, #0]
 80015fe:	461a      	mov	r2, r3
 8001600:	f7fe ff3e 	bl	8000480 <_read>
 8001604:	1c43      	adds	r3, r0, #1
 8001606:	d102      	bne.n	800160e <_read_r+0x1e>
 8001608:	682b      	ldr	r3, [r5, #0]
 800160a:	b103      	cbz	r3, 800160e <_read_r+0x1e>
 800160c:	6023      	str	r3, [r4, #0]
 800160e:	bd38      	pop	{r3, r4, r5, pc}
 8001610:	200000a8 	.word	0x200000a8

08001614 <_fstat_r>:
 8001614:	b538      	push	{r3, r4, r5, lr}
 8001616:	4d07      	ldr	r5, [pc, #28]	; (8001634 <_fstat_r+0x20>)
 8001618:	2300      	movs	r3, #0
 800161a:	4604      	mov	r4, r0
 800161c:	4608      	mov	r0, r1
 800161e:	4611      	mov	r1, r2
 8001620:	602b      	str	r3, [r5, #0]
 8001622:	f7fe ff72 	bl	800050a <_fstat>
 8001626:	1c43      	adds	r3, r0, #1
 8001628:	d102      	bne.n	8001630 <_fstat_r+0x1c>
 800162a:	682b      	ldr	r3, [r5, #0]
 800162c:	b103      	cbz	r3, 8001630 <_fstat_r+0x1c>
 800162e:	6023      	str	r3, [r4, #0]
 8001630:	bd38      	pop	{r3, r4, r5, pc}
 8001632:	bf00      	nop
 8001634:	200000a8 	.word	0x200000a8

08001638 <_isatty_r>:
 8001638:	b538      	push	{r3, r4, r5, lr}
 800163a:	4d06      	ldr	r5, [pc, #24]	; (8001654 <_isatty_r+0x1c>)
 800163c:	2300      	movs	r3, #0
 800163e:	4604      	mov	r4, r0
 8001640:	4608      	mov	r0, r1
 8001642:	602b      	str	r3, [r5, #0]
 8001644:	f7fe ff71 	bl	800052a <_isatty>
 8001648:	1c43      	adds	r3, r0, #1
 800164a:	d102      	bne.n	8001652 <_isatty_r+0x1a>
 800164c:	682b      	ldr	r3, [r5, #0]
 800164e:	b103      	cbz	r3, 8001652 <_isatty_r+0x1a>
 8001650:	6023      	str	r3, [r4, #0]
 8001652:	bd38      	pop	{r3, r4, r5, pc}
 8001654:	200000a8 	.word	0x200000a8

08001658 <_init>:
 8001658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800165a:	bf00      	nop
 800165c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800165e:	bc08      	pop	{r3}
 8001660:	469e      	mov	lr, r3
 8001662:	4770      	bx	lr

08001664 <_fini>:
 8001664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001666:	bf00      	nop
 8001668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800166a:	bc08      	pop	{r3}
 800166c:	469e      	mov	lr, r3
 800166e:	4770      	bx	lr
